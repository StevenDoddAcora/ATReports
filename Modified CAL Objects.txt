OBJECT Table 36 Sales Header
{
  OBJECT-PROPERTIES
  {
    Date=16/05/25;
    Time=13:59:32;
    Modified=Yes;
    Version List=NAVW111.00.00.28629,NAVGB11.00.00.28629;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name;
    OnInsert=BEGIN
               InitInsert;
               InsertMode := TRUE;

               SetSellToCustomerFromFilter;

               IF GetFilterContNo <> '' THEN
                 VALIDATE("Sell-to Contact No.",GetFilterContNo);

               IF "Salesperson Code" = '' THEN
                 SetDefaultSalesperson;
             END;

    OnDelete=VAR
               CustInvoiceDisc@1002 : Record 19;
               PostSalesDelete@1003 : Codeunit 363;
               ArchiveManagement@1000 : Codeunit 5063;
             BEGIN
               IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                 ERROR(
                   Text022,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

               ArchiveManagement.AutoArchiveSalesDocument(Rec);
               PostSalesDelete.DeleteHeader(
                 Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
                 SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
               UpdateOpportunity;

               VALIDATE("Applies-to ID",'');
               VALIDATE("Incoming Document Entry No.",0);

               ApprovalsMgmt.OnDeleteRecordInApprovalRequest(RECORDID);
               SalesLine.RESET;
               SalesLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               IF NOT WhseRequest.ISEMPTY THEN
                 WhseRequest.DELETEALL(TRUE);

               SalesLine.SETRANGE("Document Type","Document Type");
               SalesLine.SETRANGE("Document No.","No.");
               SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");

               DeleteSalesLines;
               SalesLine.SETRANGE(Type);
               DeleteSalesLines;

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               IF (SalesShptHeader."No." <> '') OR
                  (SalesInvHeader."No." <> '') OR
                  (SalesCrMemoHeader."No." <> '') OR
                  (ReturnRcptHeader."No." <> '') OR
                  (SalesInvHeaderPrepmt."No." <> '') OR
                  (SalesCrMemoHeaderPrepmt."No." <> '')
               THEN
                 MESSAGE(PostedDocsToPrintCreatedMsg);

               IF IdentityManagement.IsInvAppId AND CustInvoiceDisc.GET(SalesHeader."Invoice Disc. Code") THEN
                 CustInvoiceDisc.DELETE; // Cleanup of autogenerated cust. invoice discounts
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Sales Header;
               ENG=Sales Header];
    LookupPageID=Page45;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENG=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENG=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                CheckCreditLimitIfLineNotInsertedYet;
                                                                IF "No." = '' THEN
                                                                  InitRecord;
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Sell-to Customer No." <> xRec."Sell-to Customer No.") AND
                                                                   (xRec."Sell-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Opportunity No." <> '') AND ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
                                                                    ERROR(
                                                                      Text062,
                                                                      FIELDCAPTION("Sell-to Customer No."),
                                                                      FIELDCAPTION("Opportunity No."),
                                                                      "Opportunity No.",
                                                                      "Document Type");
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,SellToCustomerTxt);
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer No." = '' THEN BEGIN
                                                                      IF SalesLine.FINDFIRST THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Sell-to Customer No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;

                                                                    CheckShipmentInfo(SalesLine,FALSE);
                                                                    CheckPrepmtInfo(SalesLine);
                                                                    CheckReturnInfo(SalesLine,FALSE);

                                                                    SalesLine.RESET;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                  SalesLine.RESET;
                                                                END;

                                                                GetCust("Sell-to Customer No.");

                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Sell-to Customer Template Code" := '';
                                                                "Sell-to Customer Name" := Cust.Name;
                                                                "Sell-to Customer Name 2" := Cust."Name 2";
                                                                CopySellToCustomerAddressFieldsFromCustomer(Cust);
                                                                "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                IF NOT SkipSellToContact THEN
                                                                  "Sell-to Contact" := Cust.Contact;
                                                                "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                "Tax Area Code" := Cust."Tax Area Code";
                                                                "Tax Liable" := Cust."Tax Liable";
                                                                "VAT Registration No." := Cust."VAT Registration No.";
                                                                "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                "Shipping Advice" := Cust."Shipping Advice";
                                                                "Type of Supply Code" := Cust."Type of Supply Code";
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(0,Cust."Responsibility Center");
                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

                                                                IF "Sell-to Customer No." = xRec."Sell-to Customer No." THEN
                                                                  IF ShippedSalesLinesExist OR ReturnReceiptExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;

                                                                "Sell-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Sell-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Cust."Bill-to Customer No." <> '' THEN
                                                                  VALIDATE("Bill-to Customer No.",Cust."Bill-to Customer No.")
                                                                ELSE BEGIN
                                                                  IF "Bill-to Customer No." = "Sell-to Customer No." THEN
                                                                    SkipBillToContact := TRUE;
                                                                  VALIDATE("Bill-to Customer No.","Sell-to Customer No.");
                                                                  SkipBillToContact := FALSE;
                                                                END;
                                                                VALIDATE("Ship-to Code",'');

                                                                GetShippingTime(FIELDNO("Sell-to Customer No."));

                                                                IF (xRec."Sell-to Customer No." <> "Sell-to Customer No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreateSalesLines(SellToCustomerTxt);

                                                                IF NOT SkipSellToContact THEN
                                                                  UpdateSellToCont("Sell-to Customer No.");

                                                                IF (xRec."Sell-to Customer No." <> '') AND (xRec."Sell-to Customer No." <> "Sell-to Customer No.") THEN
                                                                  RecallModifyAddressNotification(GetModifyCustomerAddressNotificationId);
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENG=Sell-to Customer No.] }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                BilltoCustomerNoChanged := xRec."Bill-to Customer No." <> "Bill-to Customer No.";
                                                                IF BilltoCustomerNoChanged THEN
                                                                  IF xRec."Bill-to Customer No." = '' THEN
                                                                    InitRecord
                                                                  ELSE BEGIN
                                                                    IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                      Confirmed := TRUE
                                                                    ELSE
                                                                      Confirmed := CONFIRM(ConfirmChangeQst,FALSE,BillToCustomerTxt);
                                                                    IF Confirmed THEN BEGIN
                                                                      SalesLine.SETRANGE("Document Type","Document Type");
                                                                      SalesLine.SETRANGE("Document No.","No.");

                                                                      CheckShipmentInfo(SalesLine,TRUE);
                                                                      CheckPrepmtInfo(SalesLine);
                                                                      CheckReturnInfo(SalesLine,TRUE);

                                                                      SalesLine.RESET;
                                                                    END ELSE
                                                                      "Bill-to Customer No." := xRec."Bill-to Customer No.";
                                                                  END;

                                                                GetCust("Bill-to Customer No.");
                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                PostingSetupMgt.CheckCustPostingGroupReceivablesAccount("Customer Posting Group");
                                                                CheckCrLimit;
                                                                "Bill-to Customer Template Code" := '';
                                                                "Bill-to Name" := Cust.Name;
                                                                "Bill-to Name 2" := Cust."Name 2";
                                                                CopyBillToCustomerAddressFieldsFromCustomer(Cust);
                                                                IF NOT SkipBillToContact THEN
                                                                  "Bill-to Contact" := Cust.Contact;
                                                                "Payment Terms Code" := Cust."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Cust."Payment Terms Code";

                                                                IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Cust."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Cust."Payment Method Code";

                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Cust."Country/Region Code";
                                                                  "VAT Registration No." := Cust."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
                                                                END;
                                                                "Customer Posting Group" := Cust."Customer Posting Group";
                                                                "Currency Code" := Cust."Currency Code";
                                                                "Customer Price Group" := Cust."Customer Price Group";
                                                                "Prices Including VAT" := Cust."Prices Including VAT";
                                                                "Allow Line Disc." := Cust."Allow Line Disc.";
                                                                "Invoice Disc. Code" := Cust."Invoice Disc. Code";
                                                                "Customer Disc. Group" := Cust."Customer Disc. Group";
                                                                "Language Code" := Cust."Language Code";
                                                                SetSalespersonCode(Cust."Salesperson Code","Salesperson Code");
                                                                "Combine Shipments" := Cust."Combine Shipments";
                                                                Reserve := Cust.Reserve;
                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  "Prepayment %" := Cust."Prepayment %";
                                                                OnAfterSetFieldsBilltoCustomer(Rec,Cust);

                                                                IF NOT BilltoCustomerNoChanged THEN
                                                                  IF ShippedSalesLinesExist THEN BEGIN
                                                                    TESTFIELD("Customer Disc. Group",xRec."Customer Disc. Group");
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                  END;

                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Prepayment %");

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Bill-to Customer No." <> "Bill-to Customer No.")
                                                                THEN BEGIN
                                                                  RecreateSalesLines(BillToCustomerTxt);
                                                                  BilltoCustomerNoChanged := FALSE;
                                                                END;
                                                                IF NOT SkipBillToContact THEN
                                                                  UpdateBillToCont("Bill-to Customer No.");

                                                                "Bill-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Bill-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF (xRec."Bill-to Customer No." <> '') AND (xRec."Bill-to Customer No." <> "Bill-to Customer No.") THEN
                                                                  RecallModifyAddressNotification(GetModifyBillToCustomerAddressNotificationId);
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENG=Bill-to Customer No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text50        ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Customer@1000 : Record 18;
                                                              BEGIN
                                                                IF ShouldLookForCustomerByName("Bill-to Customer No.") THEN
                                                                  VALIDATE("Bill-to Customer No.",Customer.GetCustNo("Bill-to Name"));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Name;
                                                              ENG=Bill-to Name] }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ENG=Bill-to Name 2] }
    { 7   ;   ;Bill-to Address     ;Text50        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=[ENU=Bill-to Address;
                                                              ENG=Bill-to Address] }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=[ENU=Bill-to Address 2;
                                                              ENG=Bill-to Address 2] }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ENG=Bill-to City] }
    { 10  ;   ;Bill-to Contact     ;Text50        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   OnLookup=VAR
                                                              Contact@1001 : Record 5050;
                                                            BEGIN
                                                              LookupContact("Bill-to Customer No.","Bill-to Contact No.",Contact);
                                                              IF PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK THEN
                                                                VALIDATE("Bill-to Contact No.",Contact."No.");
                                                            END;

                                                   CaptionML=[ENU=Bill-to Contact;
                                                              ENG=Bill-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENG=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=VAR
                                                                ShipToAddr@1000 : Record 222;
                                                              BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                  SalesLine.RESET;
                                                                END;

                                                                IF NOT IsCreditDocType THEN
                                                                  IF "Ship-to Code" <> '' THEN BEGIN
                                                                    IF xRec."Ship-to Code" <> '' THEN
                                                                      BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                    END;
                                                                    ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                    "Ship-to Name" := ShipToAddr.Name;
                                                                    "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                    "Ship-to Address" := ShipToAddr.Address;
                                                                    "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                    "Ship-to City" := ShipToAddr.City;
                                                                    "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                    "Ship-to County" := ShipToAddr.County;
                                                                    VALIDATE("Ship-to Country/Region Code",ShipToAddr."Country/Region Code");
                                                                    "Ship-to Contact" := ShipToAddr.Contact;
                                                                    "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                    IF ShipToAddr."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                    "Shipping Agent Code" := ShipToAddr."Shipping Agent Code";
                                                                    "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
                                                                    IF ShipToAddr."Tax Area Code" <> '' THEN
                                                                      "Tax Area Code" := ShipToAddr."Tax Area Code";
                                                                    "Tax Liable" := ShipToAddr."Tax Liable";
                                                                  END ELSE
                                                                    IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      "Ship-to Name" := Cust.Name;
                                                                      "Ship-to Name 2" := Cust."Name 2";
                                                                      CopyShipToCustomerAddressFieldsFromCustomer(Cust);
                                                                      "Ship-to Contact" := Cust.Contact;
                                                                      "Shipment Method Code" := Cust."Shipment Method Code";
                                                                      "Tax Area Code" := Cust."Tax Area Code";
                                                                      "Tax Liable" := Cust."Tax Liable";
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Shipping Agent Code" := Cust."Shipping Agent Code";
                                                                      "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";
                                                                    END;

                                                                GetShippingTime(FIELDNO("Ship-to Code"));

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN
                                                                  IF (xRec."VAT Country/Region Code" <> "VAT Country/Region Code") OR
                                                                     (xRec."Tax Area Code" <> "Tax Area Code")
                                                                  THEN
                                                                    RecreateSalesLines(FIELDCAPTION("Ship-to Code"))
                                                                  ELSE BEGIN
                                                                    IF xRec."Shipping Agent Code" <> "Shipping Agent Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Code"));
                                                                    IF xRec."Shipping Agent Service Code" <> "Shipping Agent Service Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Service Code"));
                                                                    IF xRec."Tax Liable" <> "Tax Liable" THEN
                                                                      VALIDATE("Tax Liable");
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENG=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              ENG=Ship-to Name] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENG=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              ENG=Ship-to Address] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENG=Ship-to Address 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENG=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              ENG=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Order Date;
                                                              ENG=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("Posting Date");
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;

                                                                IF "Posting Date" <> xRec."Posting Date" THEN
                                                                  IF DeferralHeadersExist THEN
                                                                    ConfirmUpdateDeferralDate;
                                                                SynchronizeAsmHeader;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ENG=Posting Date] }
    { 21  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Shipment Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipment Date;
                                                              ENG=Shipment Date] }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=[ENU=Posting Description;
                                                              ENG=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF IsCreditDocType AND NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN BEGIN
                                                                  IF xRec."Prepayment Due Date" = 0D THEN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENG=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENG=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              ENG=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENG=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENG=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;
                                                                UpdateOutboundWhseHandlingTime;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENG=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENG=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENG=Customer Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    RecreateSalesLines(FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENG=Currency Code] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Currency Factor"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ENG=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Price Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENG=Customer Price Group] }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                SalesLine@1000 : Record 37;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                                VatFactor@1005 : Decimal;
                                                                LineInvDiscAmt@1004 : Decimal;
                                                                InvDiscRounding@1003 : Decimal;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Job Contract Entry No.",'<>%1',0);
                                                                  IF SalesLine.FIND('-') THEN BEGIN
                                                                    SalesLine.TESTFIELD("Job No.",'');
                                                                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                                                                  END;

                                                                  SalesLine.RESET;
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Unit Price",'<>%1',0);
                                                                  SalesLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF SalesLine.FINDFIRST THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text024,
                                                                          FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
                                                                        TRUE);
                                                                    SalesLine.SetSalesHeader(Rec);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");
                                                                    SalesLine.LOCKTABLE;
                                                                    LOCKTABLE;
                                                                    SalesLine.FINDSET;
                                                                    REPEAT
                                                                      SalesLine.TESTFIELD("Quantity Invoiced",0);
                                                                      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        SalesLine."VAT Difference" := 0;
                                                                        SalesLine.UpdateAmounts;
                                                                      END ELSE BEGIN
                                                                        VatFactor := 1 + SalesLine."VAT %" / 100;
                                                                        IF VatFactor = 0 THEN
                                                                          VatFactor := 1;
                                                                        IF NOT "Prices Including VAT" THEN
                                                                          VatFactor := 1 / VatFactor;
                                                                        SalesLine."Unit Price" :=
                                                                          ROUND(SalesLine."Unit Price" * VatFactor,Currency."Unit-Amount Rounding Precision");
                                                                        SalesLine."Line Discount Amount" :=
                                                                          ROUND(
                                                                            SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                            Currency."Amount Rounding Precision");
                                                                        LineInvDiscAmt := InvDiscRounding + SalesLine."Inv. Discount Amount" * VatFactor;
                                                                        SalesLine."Inv. Discount Amount" := ROUND(LineInvDiscAmt,Currency."Amount Rounding Precision");
                                                                        InvDiscRounding := LineInvDiscAmt - SalesLine."Inv. Discount Amount";
                                                                        IF "Prices Including VAT" THEN
                                                                          SalesLine."Line Amount" := SalesLine."Amount Including VAT" + SalesLine."Inv. Discount Amount"
                                                                        ELSE
                                                                          SalesLine."Line Amount" := SalesLine.Amount + SalesLine."Inv. Discount Amount";
                                                                      END;
                                                                      SalesLine.MODIFY;
                                                                    UNTIL SalesLine.NEXT = 0;
                                                                  END;
                                                                  OnAfterChangePricesIncludingVAT(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              ENG=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   AccessByPermission=TableData 19=R;
                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ENG=Invoice Disc. Code] }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Disc. Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENG=Customer Disc. Group] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              ENG=Language Code] }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ValidateSalesPersonOnSalesHeader(Rec,FALSE,FALSE);

                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text053,FIELDCAPTION("Salesperson Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENG=Salesperson Code] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              ENG=Order Class] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENG=No. Printed];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENG=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENG=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENG=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  CustLedgEntry.SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    CustLedgEntry.SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      CustLedgEntry.SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                              END;

                                                   OnLookup=VAR
                                                              GenJnlLine@1000 : Record 81;
                                                              GenJnlApply@1002 : Codeunit 225;
                                                              ApplyCustEntries@1001 : Page 232;
                                                            BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              CustLedgEntry.SetApplyToFilters("Bill-to Customer No.","Applies-to Doc. Type","Applies-to Doc. No.",Amount);

                                                              ApplyCustEntries.SetSales(Rec,CustLedgEntry,SalesHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                              ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                              ApplyCustEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",CustLedgEntry."Currency Code",GenJnlLine."Account Type"::Customer,TRUE);
                                                                "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                              END;
                                                              CLEAR(ApplyCustEntries);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENG=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENG=Bal. Account No.] }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Recalculate Invoice Disc.=CONST(Yes)));
                                                   CaptionML=[ENU=Recalculate Invoice Disc.;
                                                              ENG=Recalculate Invoice Disc.];
                                                   Editable=No }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              ENG=Ship];
                                                   Editable=No }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              ENG=Invoice] }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=[ENU=Print Posted Documents;
                                                              ENG=Print Posted Documents] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENG=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENG=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=[ENU=Shipping No.;
                                                              ENG=Shipping No.] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              ENG=Posting No.] }
    { 64  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=[ENU=Last Shipping No.;
                                                              ENG=Last Shipping No.];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              ENG=Last Posting No.];
                                                   Editable=No }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              ENG=Prepayment No.] }
    { 67  ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              ENG=Last Prepayment No.] }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              ENG=Prepmt. Cr. Memo No.] }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              ENG=Last Prepmt. Cr. Memo No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                Customer@1000 : Record 18;
                                                                VATRegistrationLog@1200 : Record 249;
                                                                VATRegistrationNoFormat@1300 : Record 381;
                                                                VATRegNoSrvConfig@1001 : Record 248;
                                                                VATRegistrationLogMgt@1400 : Codeunit 249;
                                                                ResultRecRef@1050 : RecordRef;
                                                                ApplicableCountryCode@1600 : Code[10];
                                                              BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                IF "VAT Registration No." = xRec."VAT Registration No." THEN
                                                                  EXIT;

                                                                GLSetup.GetRecordOnce;
                                                                CASE GLSetup."Bill-to/Sell-to VAT Calc." OF
                                                                  GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No.":
                                                                    IF NOT Customer.GET("Bill-to Customer No.") THEN
                                                                      EXIT;
                                                                  GLSetup."Bill-to/Sell-to VAT Calc."::"Sell-to/Buy-from No.":
                                                                    IF NOT Customer.GET("Sell-to Customer No.") THEN
                                                                      EXIT;
                                                                END;

                                                                IF "VAT Registration No." = Customer."VAT Registration No." THEN
                                                                  EXIT;

                                                                IF NOT VATRegistrationNoFormat.Test("VAT Registration No.",Customer."Country/Region Code",Customer."No.",DATABASE::Customer) THEN
                                                                  EXIT;

                                                                Customer."VAT Registration No." := "VAT Registration No.";
                                                                ApplicableCountryCode := Customer."Country/Region Code";
                                                                IF ApplicableCountryCode = '' THEN
                                                                  ApplicableCountryCode := VATRegistrationNoFormat."Country/Region Code";

                                                                IF NOT VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN BEGIN
                                                                  Customer.MODIFY(TRUE);
                                                                  EXIT;
                                                                END;

                                                                VATRegistrationLogMgt.CheckVIESForVATNo(ResultRecRef,VATRegistrationLog,Customer,Customer."No.",
                                                                  ApplicableCountryCode,VATRegistrationLog."Account Type"::Customer);

                                                                IF VATRegistrationLog.Status = VATRegistrationLog.Status::Valid THEN BEGIN
                                                                  MESSAGE(ValidVATNoMsg);
                                                                  Customer.MODIFY(TRUE);
                                                                END ELSE
                                                                  MESSAGE(InvalidVatRegNoMsg);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENG=VAT Registration No.] }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=[ENU=Combine Shipments;
                                                              ENG=Combine Shipments] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENG=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN BEGIN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                  RecreateSalesLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENG=Gen. Bus. Posting Group] }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ENG=EU 3-Party Trade] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Type"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              ENG=Transaction Nature Code] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transport Method"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              ENG=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENG=VAT Country/Region Code] }
    { 79  ;   ;Sell-to Customer Name;Text50       ;TableRelation=Customer;
                                                   OnValidate=VAR
                                                                Customer@1000 : Record 18;
                                                                IdentityManagement@1001 : Codeunit 9801;
                                                              BEGIN
                                                                IF NOT IdentityManagement.IsInvAppId AND ShouldLookForCustomerByName("Sell-to Customer No.") THEN
                                                                  VALIDATE("Sell-to Customer No.",Customer.GetCustNo("Sell-to Customer Name"));
                                                                GetShippingTime(FIELDNO("Sell-to Customer Name"));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Customer Name;
                                                              ENG=Sell-to Customer Name] }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=[ENU=Sell-to Customer Name 2;
                                                              ENG=Sell-to Customer Name 2] }
    { 81  ;   ;Sell-to Address     ;Text50        ;OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Address"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=[ENU=Sell-to Address;
                                                              ENG=Sell-to Address] }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Address 2"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=[ENU=Sell-to Address 2;
                                                              ENG=Sell-to Address 2] }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to City"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to City;
                                                              ENG=Sell-to City] }
    { 84  ;   ;Sell-to Contact     ;Text50        ;OnValidate=BEGIN
                                                                ModifyCustomerAddress;
                                                              END;

                                                   OnLookup=VAR
                                                              Contact@1001 : Record 5050;
                                                            BEGIN
                                                              IF ("Sell-to Customer No." = '') AND ("Document Type" <> "Document Type"::Quote) THEN
                                                                EXIT;

                                                              LookupContact("Sell-to Customer No.","Sell-to Contact No.",Contact);
                                                              IF PAGE.RUNMODAL(0,Contact) = ACTION::LookupOK THEN
                                                                VALIDATE("Sell-to Contact No.",Contact."No.");
                                                            END;

                                                   CaptionML=[ENU=Sell-to Contact;
                                                              ENG=Sell-to Contact] }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ENG=Bill-to Postcode] }
    { 86  ;   ;Bill-to County      ;Text30        ;OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=[ENU=Bill-to County;
                                                              ENG=Bill-to County] }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                ModifyBillToCustomerAddress;
                                                              END;

                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ENG=Bill-to Country/Region Code] }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Post Code"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Post Code;
                                                              ENG=Sell-to Postcode] }
    { 89  ;   ;Sell-to County      ;Text30        ;OnValidate=BEGIN
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to County"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=[ENU=Sell-to County;
                                                              ENG=Sell-to County] }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Ship-to Country/Region Code");
                                                                UpdateShipToAddressFromSellToAddress(FIELDNO("Ship-to Country/Region Code"));
                                                                ModifyCustomerAddress;
                                                              END;

                                                   CaptionML=[ENU=Sell-to Country/Region Code;
                                                              ENG=Sell-to Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode("Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENG=Ship-to Postcode] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENG=Ship-to County] }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENG=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENG=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENG=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Exit Point"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Exit Point;
                                                              ENG=Exit Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENG=Correction] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              ENG=Document Date] }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENG=External Document No.] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION(Area),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              ENG=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Specification"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENG=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record 1230;
                                                              BEGIN
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                IF PaymentMethod."Direct Debit" THEN BEGIN
                                                                  "Direct Debit Mandate ID" := SEPADirectDebitMandate.GetDefaultMandate("Bill-to Customer No.","Due Date");
                                                                  IF "Payment Terms Code" = '' THEN
                                                                    "Payment Terms Code" := PaymentMethod."Direct Debit Pmt. Terms Code";
                                                                END ELSE
                                                                  "Direct Debit Mandate ID" := '';
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                  CLEAR("Payment Service Set ID");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENG=Payment Method Code] }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Shipping Agent Code" = "Shipping Agent Code" THEN
                                                                  EXIT;

                                                                "Shipping Agent Service Code" := '';
                                                                GetShippingTime(FIELDNO("Shipping Agent Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Code"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENG=Shipping Agent Code] }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=[ENU=Package Tracking No.;
                                                              ENG=Package Tracking No.] }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENG=Posting No. Series] }
    { 109 ;   ;Shipping No. Series ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Shipping No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series");
                                                                END;
                                                                TESTFIELD("Shipping No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series") THEN
                                                                  VALIDATE("Shipping No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Shipping No. Series;
                                                              ENG=Shipping No. Series] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                ValidateTaxAreaCode;
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Area Code"));
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENG=VAT Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENG=VAT Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group" THEN
                                                                  RecreateSalesLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENG=VAT Bus. Posting Group] }
    { 117 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Reserve;
                                                              ENG=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENG=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempCustLedgEntry@1000 : TEMPORARY Record 21;
                                                                CustEntrySetApplID@1001 : Codeunit 101;
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
                                                                  CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  CustLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF CustLedgEntry.FINDFIRST THEN
                                                                    CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
                                                                  CustLedgEntry.RESET;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ENG=Applies-to ID] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("VAT Base Discount %"),
                                                                    GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                    GLSetup.TABLECAPTION);

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                SalesLine.SETRANGE("Document Type","Document Type");
                                                                SalesLine.SETRANGE("Document No.","No.");
                                                                SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
                                                                SalesLine.SETFILTER(Quantity,'<>0');
                                                                SalesLine.LOCKTABLE;
                                                                LOCKTABLE;
                                                                IF SalesLine.FINDSET THEN BEGIN
                                                                  MODIFY;
                                                                  REPEAT
                                                                    IF (SalesLine."Quantity Invoiced" <> SalesLine.Quantity) OR
                                                                       ("Shipping Advice" <> "Shipping Advice"::Partial) OR
                                                                       (SalesLine.Type <> SalesLine.Type::"Charge (Item)") OR
                                                                       (CurrFieldNo <> 0)
                                                                    THEN BEGIN
                                                                      SalesLine.UpdateAmounts;
                                                                      SalesLine.MODIFY;
                                                                    END;
                                                                  UNTIL SalesLine.NEXT = 0;
                                                                END;
                                                                SalesLine.RESET;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              ENG=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENG=Status];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    ENG=Open,Released,Pending Approval,Pending Prepayment];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ENG=Invoice Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENG=None,%,Amount];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ENG=Invoice Discount Value];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  IF "Bill-to IC Partner Code" = '' THEN
                                                                    TESTFIELD("Sell-to IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              ENG=Send IC Document] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              ENG=IC Status];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    ENG=New,Pending,Sent];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Sell-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Sell-to IC Partner Code;
                                                              ENG=Sell-to IC Partner Code];
                                                   Editable=No }
    { 126 ;   ;Bill-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Bill-to IC Partner Code;
                                                              ENG=Bill-to IC Partner Code];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              ENG=IC Direction];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ENG=Outgoing,Incoming];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Prepayment %" <> "Prepayment %" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENG=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code20       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ENG=Prepayment No. Series] }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              ENG=Compress Prepayment] }
    { 133 ;   ;Prepayment Due Date ;Date          ;CaptionML=[ENU=Prepayment Due Date;
                                                              ENG=Prepayment Due Date] }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code20 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ENG=Prepmt. Cr. Memo No. Series] }
    { 135 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=[ENU=Prepmt. Posting Description;
                                                              ENG=Prepmt. Posting Description] }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              ENG=Prepmt. Pmt. Discount Date] }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF IsCreditDocType AND NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              ENG=Prepmt. Payment Terms Code] }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              ENG=Prepmt. Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ENG=Quote No.];
                                                   Editable=No }
    { 152 ;   ;Quote Valid Until Date;Date        ;OnValidate=BEGIN
                                                                IF ("Quote Valid Until Date" <> 0D) AND ("Quote Valid Until Date" < WORKDATE) THEN
                                                                  "Quote Valid Until Date" := WORKDATE;
                                                              END;

                                                   CaptionML=[ENU=Quote Valid Until Date;
                                                              ENG=Quote Valid Until Date] }
    { 153 ;   ;Quote Sent to Customer;DateTime    ;CaptionML=[ENU=Quote Sent to Customer;
                                                              ENG=Quote Sent to Customer];
                                                   Editable=No }
    { 154 ;   ;Quote Accepted      ;Boolean       ;OnValidate=BEGIN
                                                                IF "Quote Accepted" THEN BEGIN
                                                                  "Quote Accepted Date" := WORKDATE;
                                                                  OnAfterSalesQuoteAccepted(Rec);
                                                                END ELSE
                                                                  "Quote Accepted Date" := 0D;
                                                              END;

                                                   CaptionML=[ENU=Quote Accepted;
                                                              ENG=Quote Accepted] }
    { 155 ;   ;Quote Accepted Date ;Date          ;CaptionML=[ENU=Quote Accepted Date;
                                                              ENG=Quote Accepted Date];
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=[ENU=Job Queue Status;
                                                              ENG=Job Queue Status];
                                                   OptionCaptionML=[ENU=" ,Scheduled for Posting,Error,Posting";
                                                                    ENG=" ,Scheduled for Posting,Error,Posting"];
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=[ENU=Job Queue Entry ID;
                                                              ENG=Job Queue Entry ID];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;
                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetSalesDoc(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              ENG=Incoming Document Entry No.] }
    { 166 ;   ;Last Email Sent Time;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Max("O365 Document Sent History"."Created Date-Time" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(No.),
                                                                                                                           Posted=CONST(No)));
                                                   CaptionML=[ENU=Last Email Sent Time;
                                                              ENG=Last Email Sent Time] }
    { 167 ;   ;Last Email Sent Status;Option      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History"."Job Last Status" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(No.),
                                                                                                                            Posted=CONST(No),
                                                                                                                            Created Date-Time=FIELD(Last Email Sent Time)));
                                                   CaptionML=[ENU=Last Email Sent Status;
                                                              ENG=Last Email Sent Status];
                                                   OptionCaptionML=[ENU=Not Sent,In Process,Finished,Error;
                                                                    ENG=Not Sent,In Process,Finished,Error];
                                                   OptionString=Not Sent,In Process,Finished,Error }
    { 168 ;   ;Sent as Email       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("O365 Document Sent History" WHERE (Document Type=FIELD(Document Type),
                                                                                                         Document No.=FIELD(No.),
                                                                                                         Posted=CONST(No),
                                                                                                         Job Last Status=CONST(Finished)));
                                                   CaptionML=[ENU=Sent as Email;
                                                              ENG=Sent as Email] }
    { 169 ;   ;Last Email Notif Cleared;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("O365 Document Sent History".NotificationCleared WHERE (Document Type=FIELD(Document Type),
                                                                                                                              Document No.=FIELD(No.),
                                                                                                                              Posted=CONST(No),
                                                                                                                              Created Date-Time=FIELD(Last Email Sent Time)));
                                                   CaptionML=[ENU=Last Email Notif Cleared;
                                                              ENG=Last Email Notif Cleared] }
    { 200 ;   ;Work Description    ;BLOB          ;CaptionML=[ENU=Work Description;
                                                              ENG=Work Description] }
    { 300 ;   ;Amt. Ship. Not Inv. (LCY);Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Invoiced (LCY)" WHERE (Document Type=FIELD(Document Type),
                                                                                                                    Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Shipped Not Invoiced (LCY) Incl. VAT;
                                                              ENG=Amount Shipped Not Invoiced (LCY) Incl. VAT];
                                                   Editable=No }
    { 301 ;   ;Amt. Ship. Not Inv. (LCY) Base;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Shipped Not Inv. (LCY) No VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                       Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Shipped Not Invoiced (LCY);
                                                              ENG=Amount Shipped Not Invoiced (LCY)];
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENG=Dimension Set ID];
                                                   Editable=No }
    { 600 ;   ;Payment Service Set ID;Integer     ;CaptionML=[ENU=Payment Service Set ID;
                                                              ENG=Payment Service Set ID] }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                    Closed=CONST(No),
                                                                                                    Blocked=CONST(No));
                                                   CaptionML=[ENU=Direct Debit Mandate ID;
                                                              ENG=Direct Debit Mandate ID] }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                              Document Type=FIELD(Document Type)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENG=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                               No.=FIELD(No.),
                                                                                                               Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              ENG=No. of Archived Versions];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ENG=Doc. No. Occurrence] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ENG=Campaign No.] }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                SellToCustTemplate@1000 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Sell-to Customer Template Code" <> xRec."Sell-to Customer Template Code") AND
                                                                   (xRec."Sell-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF GetHideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromTemplate("Sell-to Customer Template Code",FIELDCAPTION("Sell-to Customer Template Code")) THEN
                                                                      EXIT
                                                                  END ELSE BEGIN
                                                                    "Sell-to Customer Template Code" := xRec."Sell-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF SellToCustTemplate.GET("Sell-to Customer Template Code") THEN BEGIN
                                                                  SellToCustTemplate.TESTFIELD("Gen. Bus. Posting Group");
                                                                  "Gen. Bus. Posting Group" := SellToCustTemplate."Gen. Bus. Posting Group";
                                                                  "VAT Bus. Posting Group" := SellToCustTemplate."VAT Bus. Posting Group";
                                                                  IF "Bill-to Customer No." = '' THEN
                                                                    VALIDATE("Bill-to Customer Template Code","Sell-to Customer Template Code");
                                                                END;

                                                                IF NOT InsertMode AND
                                                                   ((xRec."Sell-to Customer Template Code" <> "Sell-to Customer Template Code") OR
                                                                    (xRec."Currency Code" <> "Currency Code"))
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer Template Code"));
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer Template Code;
                                                              ENG=Sell-to Customer Template Code] }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                                Opportunity@1000 : Record 5092;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Sell-to Contact No." <> '' THEN
                                                                  IF Cont.GET("Sell-to Contact No.") THEN
                                                                    Cont.CheckIfPrivacyBlockedGeneric;

                                                                IF ("Sell-to Contact No." <> xRec."Sell-to Contact No.") AND
                                                                   (xRec."Sell-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Sell-to Contact No." = '') AND ("Opportunity No." <> '') THEN
                                                                    ERROR(Text049,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF GetHideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromContact("Sell-to Contact No.","Sell-to Customer No.",FIELDCAPTION("Sell-to Contact No.")) THEN
                                                                      EXIT;
                                                                    IF "Opportunity No." <> '' THEN BEGIN
                                                                      Opportunity.GET("Opportunity No.");
                                                                      IF Opportunity."Contact No." <> "Sell-to Contact No." THEN BEGIN
                                                                        MODIFY;
                                                                        Opportunity.VALIDATE("Contact No.","Sell-to Contact No.");
                                                                        Opportunity.MODIFY;
                                                                      END
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Sell-to Customer No." <> '') AND ("Sell-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Sell-to Contact No.");
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Sell-to Customer No.") THEN
                                                                    IF (ContBusinessRelation."Contact No." <> Cont."Company No.") AND (ContBusinessRelation."Contact No." <> Cont."No.") THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Sell-to Customer No.");
                                                                END;

                                                                IF "Sell-to Contact No." <> '' THEN
                                                                  IF Cont.GET("Sell-to Contact No.") THEN
                                                                    IF ("Salesperson Code" = '') AND (Cont."Salesperson Code" <> '') THEN
                                                                      VALIDATE("Salesperson Code",Cont."Salesperson Code");

                                                                UpdateSellToCust("Sell-to Contact No.");
                                                                UpdateSellToCustTemplateCode;
                                                                UpdateShipToContact;
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Sell-to Customer No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Sell-to Customer No.") THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');

                                                              IF "Sell-to Contact No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Sell-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Sell-to Contact No.;
                                                              ENG=Sell-to Contact No.] }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Bill-to Contact No." <> '' THEN
                                                                  IF Cont.GET("Bill-to Contact No.") THEN
                                                                    Cont.CheckIfPrivacyBlockedGeneric;

                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF GetHideValidationDialog OR (NOT GUIALLOWED) THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Bill-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromContact("Bill-to Contact No.","Bill-to Customer No.",FIELDCAPTION("Bill-to Contact No.")) THEN
                                                                      EXIT;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Contact No." := xRec."Bill-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Bill-to Customer No.") THEN
                                                                    IF (ContBusinessRelation."Contact No." <> Cont."Company No.") AND (ContBusinessRelation."Contact No." <> Cont."No.") THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;

                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Bill-to Customer No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE
                                                                  IF ContBusinessRelation.FindByRelation(ContBusinessRelation."Link to Table"::Customer,"Bill-to Customer No.") THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ENG=Bill-to Contact No.] }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                BillToCustTemplate@1001 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Bill-to Customer Template Code" <> xRec."Bill-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF GetHideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(ConfirmChangeQst,FALSE,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    IF InitFromTemplate("Bill-to Customer Template Code",FIELDCAPTION("Bill-to Customer Template Code")) THEN
                                                                      EXIT
                                                                  END ELSE BEGIN
                                                                    "Bill-to Customer Template Code" := xRec."Bill-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                VALIDATE("Ship-to Code",'');
                                                                IF BillToCustTemplate.GET("Bill-to Customer Template Code") THEN BEGIN
                                                                  BillToCustTemplate.TESTFIELD("Customer Posting Group");
                                                                  "Customer Posting Group" := BillToCustTemplate."Customer Posting Group";
                                                                  "Invoice Disc. Code" := BillToCustTemplate."Invoice Disc. Code";
                                                                  "Customer Price Group" := BillToCustTemplate."Customer Price Group";
                                                                  "Customer Disc. Group" := BillToCustTemplate."Customer Disc. Group";
                                                                  "Allow Line Disc." := BillToCustTemplate."Allow Line Disc.";
                                                                  VALIDATE("Payment Terms Code",BillToCustTemplate."Payment Terms Code");
                                                                  VALIDATE("Payment Method Code",BillToCustTemplate."Payment Method Code");
                                                                  "Prices Including VAT" := BillToCustTemplate."Prices Including VAT";
                                                                  "Shipment Method Code" := BillToCustTemplate."Shipment Method Code";
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF NOT InsertMode AND
                                                                   (xRec."Sell-to Customer Template Code" = "Sell-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> "Bill-to Customer Template Code")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer Template Code"));
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer Template Code;
                                                              ENG=Bill-to Customer Template Code] }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=IF (Document Type=FILTER(<>Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                           Closed=CONST(No))
                                                                                                                           ELSE IF (Document Type=CONST(Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                                                                                       Sales Document No.=FIELD(No.),
                                                                                                                                                                                       Sales Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                LinkSalesDocWithOpportunity(xRec."Opportunity No.");
                                                              END;

                                                   CaptionML=[ENU=Opportunity No.;
                                                              ENG=Opportunity No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text027,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(0,'',"Responsibility Center");
                                                                UpdateOutboundWhseHandlingTime;
                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENG=Responsibility Centre] }
    { 5750;   ;Shipping Advice     ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF InventoryPickConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(Text066,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION);
                                                                IF WhseShpmntConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(STRSUBSTNO(Text070,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION));
                                                                WhseSourceHeader.SalesHeaderVerifyChange(Rec,xRec);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipping Advice;
                                                              ENG=Shipping Advice];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    ENG=Partial,Complete];
                                                   OptionString=Partial,Complete }
    { 5751;   ;Shipped Not Invoiced;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped Not Invoiced=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipped Not Invoiced;
                                                              ENG=Shipped Not Invoiced];
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line"."Completely Shipped" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Type=FILTER(<>' '),
                                                                                                            Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Shipped;
                                                              ENG=Completely Shipped];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ENG=Posting from Whse. Ref.] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ENG=Location Filter] }
    { 5755;   ;Shipped             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped (Base)=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipped;
                                                              ENG=Shipped];
                                                   Editable=No }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> xRec."Requested Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Requested Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Requested Delivery Date;
                                                              ENG=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> xRec."Promised Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Promised Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Promised Delivery Date;
                                                              ENG=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Shipping Time" <> xRec."Shipping Time" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Shipping Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENG=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Outbound Whse. Handling Time" <> xRec."Outbound Whse. Handling Time") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Outbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENG=Outbound Whse. Handling Time] }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                GetShippingTime(FIELDNO("Shipping Agent Service Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Service Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENG=Shipping Agent Service Code] }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                                                                         Document No.=FIELD(No.),
                                                                                         Shipment Date=FIELD(Date Filter),
                                                                                         Outstanding Quantity=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Late Order Shipping;
                                                              ENG=Late Order Shipping];
                                                   Editable=No }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENG=Date Filter] }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              ENG=Receive] }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ENG=Return Receipt No.] }
    { 5802;   ;Return Receipt No. Series;Code20   ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Receipt No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series");
                                                                END;
                                                                TESTFIELD("Return Receipt No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series") THEN
                                                                  VALIDATE("Return Receipt No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Receipt No. Series;
                                                              ENG=Return Receipt No. Series] }
    { 5803;   ;Last Return Receipt No.;Code20     ;TableRelation="Return Receipt Header";
                                                   CaptionML=[ENU=Last Return Receipt No.;
                                                              ENG=Last Return Receipt No.];
                                                   Editable=No }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Allow Line Disc."));
                                                              END;

                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENG=Allow Line Disc.] }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=[ENU=Get Shipment Used;
                                                              ENG=Get Shipment Used];
                                                   Editable=No }
    { 8000;   ;Id                  ;GUID          ;CaptionML=[ENU=Id;
                                                              ENG=Id] }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(0,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text061,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter2("Assigned User ID"));
                                                              END;

                                                   DataClassification=EndUserIdentifiableInformation;
                                                   CaptionML=[ENU=Assigned User ID;
                                                              ENG=Assigned User ID] }
    { 10501;  ;Type of Supply Code ;Code10        ;TableRelation="Type of Supply";
                                                   ObsoleteState=Pending;
                                                   ObsoleteReason=Removed based on feedback.;
                                                   CaptionML=[ENU=Type of Supply Code;
                                                              ENG=Type of Supply Code] }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Sell-to Customer No.       }
    {    ;Document Type,Bill-to Customer No.       }
    {    ;Document Type,Combine Shipments,Bill-to Customer No.,Currency Code,EU 3-Party Trade,Dimension Set ID }
    {    ;Sell-to Customer No.,External Document No. }
    {    ;Document Type,Sell-to Contact No.        }
    {    ;Bill-to Contact No.                      }
    {    ;Incoming Document Entry No.              }
    {    ;Document Date                            }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;No.,Sell-to Customer Name,Amount,Sell-to Contact,Amount Including VAT }
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;ENG=You cannot rename a %1.';
      ConfirmChangeQst@1004 : TextConst '@@@="%1 = a Field Caption like Currency Code";ENU=Do you want to change %1?;ENG=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;ENG=You cannot reset %1 because the document still has one or more lines.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more purchase orders.;ENG=You cannot change %1 because the order is associated with one or more purchase orders.';
      Text007@1007 : TextConst 'ENU=%1 cannot be greater than %2 in the %3 table.;ENG=%1 cannot be greater than %2 in the %3 table.';
      Text009@1009 : TextConst 'ENU=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENG=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text012@1012 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENG=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text014@1014 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENG=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      RecreateSalesLinesMsg@1015 : TextConst '@@@=%1: FieldCaption;ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to continue?;ENG=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to continue?';
      ResetItemChargeAssignMsg@1075 : TextConst '@@@=%1: FieldCaption;ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\The amount of the item charge assignment will be reset to 0.\\Do you want to continue?;ENG=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\The amount of the item charge assignment will be reset to 0.\\Do you want to continue?';
      Text017@1017 : TextConst 'ENU=You must delete the existing sales lines before you can change %1.;ENG=You must delete the existing sales lines before you can change %1.';
      LinesNotUpdatedMsg@1018 : TextConst '@@@=You have changed Order Date on the sales header, but it has not been changed on the existing sales lines.;ENU=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.;ENG=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.';
      Text019@1019 : TextConst 'ENU=You must update the existing sales lines manually.;ENG=You must update the existing sales lines manually.';
      AffectExchangeRateMsg@1020 : TextConst 'ENU=The change may affect the exchange rate that is used for price calculation on the sales lines.;ENG=The change may affect the exchange rate that is used for price calculation on the sales lines.';
      Text021@1021 : TextConst 'ENU=Do you want to update the exchange rate?;ENG=Do you want to update the exchange rate?';
      Text022@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;ENG=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text024@1024 : TextConst 'ENU=You have modified the %1 field. The recalculation of VAT may cause penny differences, so you must check the amounts afterward. Do you want to update the %2 field on the lines to reflect the new value of %1?;ENG=You have modified the %1 field. The recalculation of VAT may cause penny differences, so you must check the amounts afterward. Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text027@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;ENG=Your identification is set up to process from %1 %2 only.';
      Text028@1028 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENG=You cannot change the %1 when the %2 has been filled in.';
      Text030@1030 : TextConst 'ENU=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENG=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text031@1031 : TextConst 'ENU=You have modified %1.\\;ENG=You have modified %1.\\';
      Text032@1032 : TextConst 'ENU=Do you want to update the lines?;ENG=Do you want to update the lines?';
      SalesSetup@1033 : Record 311;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      SalesHeader@1036 : Record 36;
      SalesLine@1037 : Record 37;
      CustLedgEntry@1038 : Record 21;
      Cust@1039 : Record 18;
      PaymentTerms@1040 : Record 3;
      PaymentMethod@1041 : Record 289;
      CurrExchRate@1042 : Record 330;
      SalesCommentLine@1043 : Record 44;
      PostCode@1045 : Record 225;
      BankAcc@1046 : Record 270;
      SalesShptHeader@1047 : Record 110;
      SalesInvHeader@1048 : Record 112;
      SalesCrMemoHeader@1049 : Record 114;
      ReturnRcptHeader@1050 : Record 6660;
      SalesInvHeaderPrepmt@1101 : Record 112;
      SalesCrMemoHeaderPrepmt@1100 : Record 114;
      GenBusPostingGrp@1051 : Record 250;
      RespCenter@1053 : Record 5714;
      InvtSetup@1054 : Record 313;
      Location@1055 : Record 14;
      WhseRequest@1056 : Record 5765;
      ReservEntry@1001 : Record 337;
      TempReservEntry@1000 : TEMPORARY Record 337;
      CompanyInfo@1002 : Record 79;
      Salesperson@1932 : Record 13;
      UserSetupMgt@1058 : Codeunit 5700;
      NoSeriesMgt@1059 : Codeunit 396;
      CustCheckCreditLimit@1060 : Codeunit 312;
      DimMgt@1065 : Codeunit 408;
      IdentityManagement@1010 : Codeunit 9801;
      ApprovalsMgmt@1082 : Codeunit 1535;
      WhseSourceHeader@1073 : Codeunit 5781;
      SalesLineReserve@1066 : Codeunit 99000832;
      PostingSetupMgt@1085 : Codeunit 48;
      CurrencyDate@1068 : Date;
      HideValidationDialog@1069 : Boolean;
      Confirmed@1070 : Boolean;
      Text035@1076 : TextConst 'ENU=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?;ENG=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?';
      Text037@1078 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.;ENG=Contact %1 %2 is not related to customer %3.';
      Text038@1074 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.;ENG=Contact %1 %2 is related to a different company than customer %3.';
      Text039@1086 : TextConst 'ENU=Contact %1 %2 is not related to a customer.;ENG=Contact %1 %2 is not related to a customer.';
      Text040@1083 : TextConst 'ENU=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?;ENG=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?';
      Text044@1088 : TextConst 'ENU=The status of the opportunity has not been changed. The program has aborted deleting the order.;ENG=The status of the opportunity has not been changed. The program has aborted deleting the order.';
      SkipSellToContact@1016 : Boolean;
      SkipBillToContact@1025 : Boolean;
      Text045@1081 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";ENG="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text048@1091 : TextConst 'ENU=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?;ENG=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?';
      Text049@1092 : TextConst 'ENU=The %1 field cannot be blank because this quote is linked to an opportunity.;ENG=The %1 field cannot be blank because this quote is linked to an opportunity.';
      InsertMode@1093 : Boolean;
      HideCreditCheckDialogue@1097 : Boolean;
      Text051@1071 : TextConst 'ENU=The sales %1 %2 already exists.;ENG=The sales %1 %2 already exists.';
      Text053@1102 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;ENG=You must cancel the approval process if you wish to change the %1.';
      Text056@1105 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENG=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text057@1108 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENG=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text061@1110 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;ENG=%1 is set up to process from %2 %3 only.';
      Text062@1072 : TextConst 'ENU=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.;ENG=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.';
      Text063@1077 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?;ENG=Reservations exist for this order. These reservations will be cancelled if a date conflict is caused by this change.\\Do you want to continue?';
      Text064@1090 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ENG=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateDocumentDate@1120 : Boolean;
      Text066@1095 : TextConst 'ENU=You cannot change %1 to %2 because an open inventory pick on the %3.;ENG=You cannot change %1 to %2 because an open inventory pick on the %3.';
      Text070@1096 : TextConst 'ENU=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.;ENG=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.';
      BilltoCustomerNoChanged@1121 : Boolean;
      SelectNoSeriesAllowed@1067 : Boolean;
      PrepaymentInvoicesNotPaidErr@1011 : TextConst '@@@=You cannot post the document of type Order with the number 1001 before all related prepayment invoices are posted.;ENU=You cannot post the document of type %1 with the number %2 before all related prepayment invoices are posted.;ENG=You cannot post the document of type %1 with the number %2 before all related prepayment invoices are posted.';
      Text072@1013 : TextConst 'ENU=There are unpaid prepayment invoices related to the document of type %1 with the number %2.;ENG=There are unpaid prepayment invoices related to the document of type %1 with the number %2.';
      Text1041000@1041000 : TextConst 'ENU=%1 %2 is different from Work Date %3.\\Do you want to continue?;ENG=%1 %2 is different from Work Date %3.\\Do you want to continue?';
      DeferralLineQst@1044 : TextConst 'ENU=Do you want to update the deferral schedules for the lines?;ENG=Do you want to update the deferral schedules for the lines?';
      SynchronizingMsg@1026 : TextConst 'ENU=Synchronizing ...\ from: Sales Header with %1\ to: Assembly Header with %2.;ENG=Synchronising ...\ from: Sales Header with %1\ to: Assembly Header with %2.';
      EstimateTxt@1023 : TextConst 'ENU=Estimate;ENG=Estimate';
      ShippingAdviceErr@1029 : TextConst 'ENU=This order must be a complete shipment.;ENG=This order must be a complete shipment.';
      PostedDocsToPrintCreatedMsg@1084 : TextConst 'ENU=One or more related posted documents have been generated during deletion to fill gaps in the posting number series. You can view or print the documents from the respective document archive.;ENG=One or more related posted documents have been generated during deletion to fill gaps in the posting number series. You can view or print the documents from the respective document archive.';
      DocumentNotPostedClosePageQst@1061 : TextConst 'ENU=The document has not been posted.\Are you sure you want to exit?;ENG=The document has not been posted.\Are you sure you want to exit?';
      SelectCustomerTemplateQst@1008 : TextConst 'ENU=Do you want to select the customer template?;ENG=Do you want to select the customer template?';
      ModifyCustomerAddressNotificationLbl@1062 : TextConst 'ENU=Update the address;ENG=Update the address';
      DontShowAgainActionLbl@1064 : TextConst 'ENU=Don''t show again;ENG=Don''t show again';
      ModifyCustomerAddressNotificationMsg@1063 : TextConst '@@@="%1=customer name";ENU=The address you entered for %1 is different from the customer''s existing address.;ENG=The address you entered for %1 is different from the customer''s existing address.';
      ValidVATNoMsg@1254 : TextConst 'ENU=The VAT registration number is valid.;ENG=The VAT registration number is valid.';
      InvalidVatRegNoMsg@1255 : TextConst 'ENU=The VAT registration number is not valid. Try entering the number again.;ENG=The VAT registration number is not valid. Try entering the number again.';
      SellToCustomerTxt@1052 : TextConst 'ENU=Sell-to Customer;ENG=Sell-to Customer';
      BillToCustomerTxt@1057 : TextConst 'ENU=Bill-to Customer;ENG=Bill-to Customer';
      ModifySellToCustomerAddressNotificationNameTxt@1087 : TextConst 'ENU=Update Sell-to Customer Address;ENG=Update Sell-to Customer Address';
      ModifySellToCustomerAddressNotificationDescriptionTxt@1098 : TextConst 'ENU=Warn if the sell-to address on sales documents is different from the customer''s existing address.;ENG=Warn if the sell-to address on sales documents is different from the customer''s existing address.';
      ModifyBillToCustomerAddressNotificationNameTxt@1089 : TextConst 'ENU=Update Bill-to Customer Address;ENG=Update Bill-to Customer Address';
      ModifyBillToCustomerAddressNotificationDescriptionTxt@1099 : TextConst 'ENU=Warn if the bill-to address on sales documents is different from the customer''s existing address.;ENG=Warn if the bill-to address on sales documents is different from the customer''s existing address.';
      SplitMessageTxt@1079 : TextConst '@@@=Some message text 1.\Some message text 2.;ENU=%1\%2;ENG=%1\%2';

    [External]
    PROCEDURE InitInsert@61();
    BEGIN
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;

      InitRecord;
    END;

    [External]
    PROCEDURE InitRecord@10();
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      SalesSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order:
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",SalesSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",SalesSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Invoice Nos." = SalesSetup."Posted Invoice Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            IF SalesSetup."Shipment on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
          END;
        "Document Type"::"Return Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Credit Memo Nos." = SalesSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            IF SalesSetup."Return Receipt on Credit Memo" THEN
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] THEN
        BEGIN
        "Shipment Date" := WORKDATE;
        "Order Date" := WORKDATE;
      END;
      IF "Document Type" = "Document Type"::"Return Order" THEN
        "Order Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

      IF IsCreditDocType THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      UpdateOutboundWhseHandlingTime;

      "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
      "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");

      OnAfterInitRecord(Rec);
    END;

    LOCAL PROCEDURE InitNoSeries@77();
    BEGIN
      IF xRec."Shipping No." <> '' THEN BEGIN
        "Shipping No. Series" := xRec."Shipping No. Series";
        "Shipping No." := xRec."Shipping No.";
      END;
      IF xRec."Posting No." <> '' THEN BEGIN
        "Posting No. Series" := xRec."Posting No. Series";
        "Posting No." := xRec."Posting No.";
      END;
      IF xRec."Return Receipt No." <> '' THEN BEGIN
        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
        "Return Receipt No." := xRec."Return Receipt No.";
      END;
      IF xRec."Prepayment No." <> '' THEN BEGIN
        "Prepayment No. Series" := xRec."Prepayment No. Series";
        "Prepayment No." := xRec."Prepayment No.";
      END;
      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
      END;

      OnAfterInitNoSeries(Rec);
    END;

    PROCEDURE AssistEdit@1(OldSalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesHeader2@1001 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        COPY(Rec);
        SalesSetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldSalesHeader."No. Series","No. Series") THEN BEGIN
          IF ("Sell-to Customer No." = '') AND ("Sell-to Contact No." = '') THEN BEGIN
            HideCreditCheckDialogue := FALSE;
            CheckCreditMaxBeforeInsert;
            HideCreditCheckDialogue := TRUE;
          END;
          NoSeriesMgt.SetSeries("No.");
          IF SalesHeader2.GET("Document Type","No.") THEN
            ERROR(Text051,LOWERCASE(FORMAT("Document Type")),"No.");
          Rec := SalesHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6();
    BEGIN
      SalesSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote:
          SalesSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          SalesSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            SalesSetup.TESTFIELD("Invoice Nos.");
            SalesSetup.TESTFIELD("Posted Invoice Nos.");
          END;
        "Document Type"::"Return Order":
          SalesSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            SalesSetup.TESTFIELD("Credit Memo Nos.");
            SalesSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          SalesSetup.TESTFIELD("Blanket Order Nos.");
      END;

      OnAfterTestNoSeries(Rec);
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[20];
    VAR
      NoSeriesCode@1000 : Code[20];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          NoSeriesCode := SalesSetup."Quote Nos.";
        "Document Type"::Order:
          NoSeriesCode := SalesSetup."Order Nos.";
        "Document Type"::Invoice:
          NoSeriesCode := SalesSetup."Invoice Nos.";
        "Document Type"::"Return Order":
          NoSeriesCode := SalesSetup."Return Order Nos.";
        "Document Type"::"Credit Memo":
          NoSeriesCode := SalesSetup."Credit Memo Nos.";
        "Document Type"::"Blanket Order":
          NoSeriesCode := SalesSetup."Blanket Order Nos.";
      END;
      EXIT(NoSeriesMgt.GetNoSeriesWithCheck(NoSeriesCode,SelectNoSeriesAllowed,"No. Series"));
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[20];
    BEGIN
      IF IsCreditDocType THEN
        EXIT(SalesSetup."Posted Credit Memo Nos.");
      EXIT(SalesSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@59() : Code[20];
    BEGIN
      IF IsCreditDocType THEN
        EXIT(SalesSetup."Posted Prepmt. Cr. Memo Nos.");
      EXIT(SalesSetup."Posted Prepmt. Inv. Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[20];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text045,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    [External]
    PROCEDURE ConfirmDeletion@11() : Boolean;
    VAR
      SourceCode@1002 : Record 230;
      SourceCodeSetup@1001 : Record 242;
      PostSalesDelete@1000 : Codeunit 363;
    BEGIN
      SourceCodeSetup.GET;
      SourceCodeSetup.TESTFIELD("Deleted Document");
      SourceCode.GET(SourceCodeSetup."Deleted Document");

      PostSalesDelete.InitDeleteHeader(
        Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
        SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt,SourceCode.Code);

      IF SalesShptHeader."No." <> '' THEN
        IF NOT CONFIRM(Text009,TRUE,SalesShptHeader."No.") THEN
          EXIT;
      IF SalesInvHeader."No." <> '' THEN
        IF NOT CONFIRM(Text012,TRUE,SalesInvHeader."No.") THEN
          EXIT;
      IF SalesCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(Text014,TRUE,SalesCrMemoHeader."No.") THEN
          EXIT;
      IF ReturnRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(Text030,TRUE,ReturnRcptHeader."No.") THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(Text056,TRUE,SalesInvHeaderPrepmt."No.") THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(Text057,TRUE,SalesCrMemoHeaderPrepmt."No.") THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCust@2(CustNo@1000 : Code[20]);
    BEGIN
      IF NOT (("Document Type" = "Document Type"::Quote) AND (CustNo = '')) THEN BEGIN
        IF CustNo <> Cust."No." THEN
          Cust.GET(CustNo);
      END ELSE
        CLEAR(Cust);
    END;

    [External]
    PROCEDURE SalesLinesExist@3() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE RecreateSalesLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      TempSalesLine@1001 : TEMPORARY Record 37;
      ItemChargeAssgntSales@1004 : Record 5809;
      TempItemChargeAssgntSales@1003 : TEMPORARY Record 5809;
      TempInteger@1006 : TEMPORARY Record 2000000026;
      TempATOLink@1009 : TEMPORARY Record 904;
      ATOLink@1010 : Record 904;
      TransferExtendedText@1005 : Codeunit 378;
      ExtendedTextAdded@1002 : Boolean;
      ConfirmText@1007 : Text;
    BEGIN
      IF SalesLinesExist THEN BEGIN
        IF GetHideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE BEGIN
          IF HasItemChargeAssignment THEN
            ConfirmText := ResetItemChargeAssignMsg
          ELSE
            ConfirmText := RecreateSalesLinesMsg;
          Confirmed := CONFIRM(ConfirmText,FALSE,ChangedFieldName);
        END;

        IF Confirmed THEN BEGIN
          SalesLine.LOCKTABLE;
          ItemChargeAssgntSales.LOCKTABLE;
          ReservEntry.LOCKTABLE;
          MODIFY;
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          IF SalesLine.FINDSET THEN BEGIN
            TempReservEntry.DELETEALL;
            RecreateReservEntryReqLine(TempSalesLine,TempATOLink,ATOLink);
            TransferItemChargeAssgntSalesToTemp(ItemChargeAssgntSales,TempItemChargeAssgntSales);
            SalesLine.DELETEALL(TRUE);
            SalesLine.INIT;
            SalesLine."Line No." := 0;
            TempSalesLine.FINDSET;
            ExtendedTextAdded := FALSE;
            SalesLine.BlockDynamicTracking(TRUE);
            REPEAT
              IF TempSalesLine."Attached to Line No." = 0 THEN BEGIN
                CreateSalesLine(TempSalesLine);
                ExtendedTextAdded := FALSE;

                IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
                  ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",TempSalesLine."Document Type");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",TempSalesLine."Document No.");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",TempSalesLine."Line No.");
                  IF TempItemChargeAssgntSales.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntSales.MARK THEN BEGIN
                        TempItemChargeAssgntSales."Applies-to Doc. Line No." := SalesLine."Line No.";
                        TempItemChargeAssgntSales.Description := SalesLine.Description;
                        TempItemChargeAssgntSales.MODIFY;
                        TempItemChargeAssgntSales.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntSales.NEXT = 0;
                END;
                IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := SalesLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
                  TransferExtendedText.InsertSalesExtText(SalesLine);
                  OnAfterTransferExtendedTextForSalesLineRecreation(SalesLine);

                  SalesLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
              SalesLineReserve.CopyReservEntryFromTemp(TempReservEntry,TempSalesLine,SalesLine."Line No.");
              RecreateReqLine(TempSalesLine,SalesLine."Line No.",FALSE);
              SynchronizeForReservations(SalesLine,TempSalesLine);

              IF TempATOLink.AsmExistsForSalesLine(TempSalesLine) THEN BEGIN
                ATOLink := TempATOLink;
                ATOLink."Document Line No." := SalesLine."Line No.";
                ATOLink.INSERT;
                ATOLink.UpdateAsmFromSalesLineATOExist(SalesLine);
                TempATOLink.DELETE;
              END;
            UNTIL TempSalesLine.NEXT = 0;

            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            TempSalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
            CreateItemChargeAssgntSales(ItemChargeAssgntSales,TempItemChargeAssgntSales,TempSalesLine,TempInteger);
            TempSalesLine.SETRANGE(Type);
            TempSalesLine.DELETEALL;
            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            TempItemChargeAssgntSales.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text017,ChangedFieldName);
      END;

      SalesLine.BlockDynamicTracking(FALSE);
    END;

    LOCAL PROCEDURE MessageIfSalesLinesExist@5(ChangedFieldName@1000 : Text[100]);
    VAR
      MessageText@1001 : Text;
    BEGIN
      IF SalesLinesExist AND NOT GetHideValidationDialog THEN BEGIN
        MessageText := STRSUBSTNO(LinesNotUpdatedMsg,ChangedFieldName);
        MessageText := STRSUBSTNO(SplitMessageTxt,MessageText,Text019);
        MESSAGE(MessageText);
      END;
    END;

    LOCAL PROCEDURE PriceMessageIfSalesLinesExist@7(ChangedFieldName@1000 : Text[100]);
    VAR
      MessageText@1001 : Text;
    BEGIN
      IF SalesLinesExist AND NOT GetHideValidationDialog THEN BEGIN
        MessageText := STRSUBSTNO(LinesNotUpdatedMsg,ChangedFieldName);
        IF "Currency Code" <> '' THEN
          MessageText := STRSUBSTNO(SplitMessageTxt,MessageText,AffectExchangeRateMsg);
        MESSAGE(MessageText);
      END;
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      IF GetHideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text021,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetHideValidationDialog@123() : Boolean;
    VAR
      IdentityManagement@1000 : Codeunit 9801;
    BEGIN
      EXIT(HideValidationDialog OR IdentityManagement.IsInvAppId);
    END;

    [External]
    PROCEDURE UpdateSalesLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      JobTransferLine@1004 : Codeunit 1004;
      PermissionManager@1003 : Codeunit 9002;
      Question@1002 : Text[250];
      NotRunningOnSaaS@1005 : Boolean;
    BEGIN
      IF NOT SalesLinesExist THEN
        EXIT;

      NotRunningOnSaaS := TRUE;
      CASE ChangedFieldName OF
        FIELDCAPTION("Shipping Agent Code"),
        FIELDCAPTION("Shipping Agent Service Code"):
          NotRunningOnSaaS := NOT PermissionManager.SoftwareAsAService;
      END;
      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(
            Text031 +
            Text032,ChangedFieldName);
        IF GUIALLOWED THEN
          IF NotRunningOnSaaS THEN
            IF DIALOG.CONFIRM(Question,TRUE) THEN
              CASE ChangedFieldName OF
                FIELDCAPTION("Shipment Date"),
                FIELDCAPTION("Shipping Agent Code"),
                FIELDCAPTION("Shipping Agent Service Code"),
                FIELDCAPTION("Shipping Time"),
                FIELDCAPTION("Requested Delivery Date"),
                FIELDCAPTION("Promised Delivery Date"),
                FIELDCAPTION("Outbound Whse. Handling Time"):
                  ConfirmResvDateConflict;
              END
            ELSE
              EXIT
          ELSE
            ConfirmResvDateConflict;
      END;

      SalesLine.LOCKTABLE;
      MODIFY;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          CASE ChangedFieldName OF
            FIELDCAPTION("Shipment Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipment Date","Shipment Date");
            FIELDCAPTION("Currency Factor"):
              IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                SalesLine.VALIDATE("Unit Price");
                SalesLine.VALIDATE("Unit Cost (LCY)");
                IF SalesLine."Job No." <> '' THEN
                  JobTransferLine.FromSalesHeaderToPlanningLine(SalesLine,"Currency Factor");
              END;
            FIELDCAPTION("Transaction Type"):
              SalesLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              SalesLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Exit Point"):
              SalesLine.VALIDATE("Exit Point","Exit Point");
            FIELDCAPTION(Area):
              SalesLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              SalesLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Shipping Agent Code"):
              SalesLine.VALIDATE("Shipping Agent Code","Shipping Agent Code");
            FIELDCAPTION("Shipping Agent Service Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
            FIELDCAPTION("Shipping Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Time","Shipping Time");
            FIELDCAPTION("Prepayment %"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Requested Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Requested Delivery Date","Requested Delivery Date");
            FIELDCAPTION("Promised Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Promised Delivery Date","Promised Delivery Date");
            FIELDCAPTION("Outbound Whse. Handling Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
            SalesLine.FIELDCAPTION("Deferral Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Deferral Code");
            ELSE
              OnUpdateSalesLineByChangedFieldName(Rec,SalesLine,ChangedFieldName);
          END;
          SalesLineReserve.AssignForPlanning(SalesLine);
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ConfirmResvDateConflict@41();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForSalesHeader(Rec) THEN
        IF NOT CONFIRM(Text063,FALSE) THEN
          ERROR('');
    END;

    [External]
    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Sales,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND SalesLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ShippedSalesLinesExist@22() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Quantity Shipped",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ReturnReceiptExist@5800() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Return Qty. Received",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE DeleteSalesLines@20();
    VAR
      ReservMgt@1000 : Codeunit 99000845;
    BEGIN
      IF SalesLine.FINDSET THEN BEGIN
        ReservMgt.DeleteDocumentReservation(DATABASE::"Sales Line","Document Type","No.",GetHideValidationDialog);
        REPEAT
          SalesLine.SuspendStatusCheck(TRUE);
          SalesLine.DELETE(TRUE);
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntSalesFilter@17(VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809);
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
    END;

    [External]
    PROCEDURE CheckCustomerCreated@18(Prompt@1000 : Boolean) : Boolean;
    VAR
      Cont@1001 : Record 5050;
    BEGIN
      IF ("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> '') THEN
        EXIT(TRUE);

      IF Prompt THEN
        IF NOT CONFIRM(Text035,TRUE) THEN
          EXIT(FALSE);

      IF "Sell-to Customer No." = '' THEN BEGIN
        TESTFIELD("Sell-to Contact No.");
        TESTFIELD("Sell-to Customer Template Code");
        GetContact(Cont,"Sell-to Contact No.");
        Cont.CreateCustomer("Sell-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      IF "Bill-to Customer No." = '' THEN BEGIN
        TESTFIELD("Bill-to Contact No.");
        TESTFIELD("Bill-to Customer Template Code");
        GetContact(Cont,"Bill-to Contact No.");
        Cont.CreateCustomer("Bill-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      EXIT(("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> ''));
    END;

    LOCAL PROCEDURE CheckShipmentInfo@116(VAR SalesLine@1000 : Record 37;BillTo@1001 : Boolean);
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN
        SalesLine.SETFILTER("Quantity Shipped",'<>0')
      ELSE
        IF "Document Type" = "Document Type"::Invoice THEN BEGIN
          IF NOT BillTo THEN
            SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
          SalesLine.SETFILTER("Shipment No.",'<>%1','');
        END;

      IF SalesLine.FINDFIRST THEN
        IF "Document Type" = "Document Type"::Order THEN
          SalesLine.TESTFIELD("Quantity Shipped",0)
        ELSE
          SalesLine.TESTFIELD("Shipment No.",'');
      SalesLine.SETRANGE("Shipment No.");
      SalesLine.SETRANGE("Quantity Shipped");
    END;

    LOCAL PROCEDURE CheckPrepmtInfo@119(VAR SalesLine@1000 : Record 37);
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
        IF SalesLine.FIND('-') THEN
          SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
        SalesLine.SETRANGE("Prepmt. Amt. Inv.");
      END;
    END;

    LOCAL PROCEDURE CheckReturnInfo@121(VAR SalesLine@1000 : Record 37;BillTo@1001 : Boolean);
    BEGIN
      IF "Document Type" = "Document Type"::"Return Order" THEN
        SalesLine.SETFILTER("Return Qty. Received",'<>0')
      ELSE
        IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
          IF NOT BillTo THEN
            SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
          SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
        END;

      IF SalesLine.FINDFIRST THEN
        IF "Document Type" = "Document Type"::"Return Order" THEN
          SalesLine.TESTFIELD("Return Qty. Received",0)
        ELSE
          SalesLine.TESTFIELD("Return Receipt No.",'');
    END;

    LOCAL PROCEDURE RecreateReqLine@33(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    VAR
      ReqLine@1003 : Record 246;
      TempReqLine@1004 : TEMPORARY Record 246;
    BEGIN
      IF ToTemp THEN BEGIN
        ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        ReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        ReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF ReqLine.FINDSET THEN
          REPEAT
            TempReqLine := ReqLine;
            TempReqLine.INSERT;
          UNTIL ReqLine.NEXT = 0;
        ReqLine.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReqLine);
        TempReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        TempReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        TempReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF TempReqLine.FINDSET THEN
          REPEAT
            ReqLine := TempReqLine;
            ReqLine."Order Promising Line ID" := NewSourceRefNo;
            ReqLine.INSERT;
          UNTIL TempReqLine.NEXT = 0;
        TempReqLine.DELETEALL;
      END;
    END;

    PROCEDURE TestPostingDate@1040000(BatchPost@1040000 : Boolean);
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Posting Date Check on Posting" THEN
        EXIT;
      IF ("Posting Date" <> WORKDATE) AND GUIALLOWED THEN BEGIN
        IF BatchPost THEN
          ERROR('');
        IF NOT CONFIRM(
             Text1041000,
             FALSE,FIELDCAPTION("Posting Date"),"Posting Date",WORKDATE)
        THEN
          ERROR('');
      END;
    END;

    LOCAL PROCEDURE UpdateSellToCont@24(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1004 : Record 18;
      OfficeContact@1001 : Record 5050;
      OfficeMgt@1002 : Codeunit 1630;
    BEGIN
      IF OfficeMgt.GetContact(OfficeContact,CustomerNo) THEN BEGIN
        HideValidationDialog := TRUE;
        UpdateSellToCust(OfficeContact."No.");
        HideValidationDialog := FALSE;
      END ELSE
        IF Cust.GET(CustomerNo) THEN BEGIN
          IF Cust."Primary Contact No." <> '' THEN
            "Sell-to Contact No." := Cust."Primary Contact No."
          ELSE BEGIN
            ContBusRel.RESET;
            ContBusRel.SETCURRENTKEY("Link to Table","No.");
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
            ContBusRel.SETRANGE("No.","Sell-to Customer No.");
            IF ContBusRel.FINDFIRST THEN
              "Sell-to Contact No." := ContBusRel."Contact No."
            ELSE
              "Sell-to Contact No." := '';
          END;
          "Sell-to Contact" := Cust.Contact;
        END;
      IF "Sell-to Contact No." <> '' THEN
        IF OfficeContact.GET("Sell-to Contact No.") THEN
          OfficeContact.CheckIfPrivacyBlockedGeneric;
    END;

    LOCAL PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
      Contact@1002 : Record 5050;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Bill-to Contact No." := '';
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
      IF "Bill-to Contact No." <> '' THEN
        IF Contact.GET("Bill-to Contact No.") THEN
          Contact.CheckIfPrivacyBlockedGeneric;
    END;

    LOCAL PROCEDURE UpdateSellToCust@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Customer@1006 : Record 18;
      Cont@1005 : Record 5050;
      CustTemplate@1004 : Record 5105;
      SearchContact@1003 : Record 5050;
      ContactBusinessRelationFound@1001 : Boolean;
    BEGIN
      IF NOT Cont.GET(ContactNo) THEN BEGIN
        "Sell-to Contact" := '';
        EXIT;
      END;
      "Sell-to Contact No." := Cont."No.";

      IF Cont.Type = Cont.Type::Person THEN
        ContactBusinessRelationFound := ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."No.");
      IF NOT ContactBusinessRelationFound THEN
        ContactBusinessRelationFound :=
          ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.");

      IF ContactBusinessRelationFound THEN BEGIN
        IF ("Sell-to Customer No." <> '') AND ("Sell-to Customer No." <> ContBusinessRelation."No.") THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Sell-to Customer No.");

        IF "Sell-to Customer No." = '' THEN BEGIN
          SkipSellToContact := TRUE;
          VALIDATE("Sell-to Customer No.",ContBusinessRelation."No.");
          SkipSellToContact := FALSE;
        END;
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          IF Cont."Company No." <> '' THEN
            SearchContact.GET(Cont."Company No.")
          ELSE
            SearchContact := Cont;
          "Sell-to Customer Name" := SearchContact."Company Name";
          "Sell-to Customer Name 2" := SearchContact."Name 2";
          SetShipToAddress(
            SearchContact."Company Name",SearchContact."Name 2",SearchContact.Address,SearchContact."Address 2",
            SearchContact.City,SearchContact."Post Code",SearchContact.County,SearchContact."Country/Region Code");
          IF ("Sell-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Sell-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
        "Sell-to Contact" := Cont.Name;
      END;

      IF (Cont.Type = Cont.Type::Company) AND Customer.GET("Sell-to Customer No.") THEN
        "Sell-to Contact" := Customer.Contact
      ELSE
        "Sell-to Contact" := Cont.Name;

      IF "Document Type" = "Document Type"::Quote THEN BEGIN
        IF Customer.GET("Sell-to Customer No.") OR Customer.GET(ContBusinessRelation."No.") THEN BEGIN
          IF Customer."Copy Sell-to Addr. to Qte From" = Customer."Copy Sell-to Addr. to Qte From"::Company THEN BEGIN
            IF Cont."Company No." <> '' THEN
              Cont.GET(Cont."Company No.");
          END;
        END ELSE BEGIN
          IF Cont."Company No." <> '' THEN
            Cont.GET(Cont."Company No.");
        END;
        "Sell-to Address" := Cont.Address;
        "Sell-to Address 2" := Cont."Address 2";
        "Sell-to City" := Cont.City;
        "Sell-to Post Code" := Cont."Post Code";
        "Sell-to County" := Cont.County;
        "Sell-to Country/Region Code" := Cont."Country/Region Code";
      END;
      IF ("Sell-to Customer No." = "Bill-to Customer No.") OR
         ("Bill-to Customer No." = '')
      THEN
        VALIDATE("Bill-to Contact No.","Sell-to Contact No.");
    END;

    LOCAL PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
      CustTemplate@1002 : Record 5105;
      SearchContact@1001 : Record 5050;
      ContactBusinessRelationFound@1007 : Boolean;
    BEGIN
      IF NOT Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;
      "Bill-to Contact No." := Cont."No.";

      IF Cust.GET("Bill-to Customer No.") AND (Cont.Type <> Cont.Type::Person) THEN
        "Bill-to Contact" := Cust.Contact
      ELSE
        "Bill-to Contact" := Cont.Name;

      IF Cont.Type = Cont.Type::Person THEN
        ContactBusinessRelationFound := ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."No.");
      IF NOT ContactBusinessRelationFound THEN
        ContactBusinessRelationFound :=
          ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.");

      IF ContactBusinessRelationFound THEN BEGIN
        IF "Bill-to Customer No." = '' THEN BEGIN
          SkipBillToContact := TRUE;
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.");
          SkipBillToContact := FALSE;
          "Bill-to Customer Template Code" := '';
        END ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          IF Cont."Company No." <> '' THEN
            SearchContact.GET(Cont."Company No.")
          ELSE
            SearchContact.GET(Cont."No.");

          "Bill-to Name" := SearchContact."Company Name";
          "Bill-to Name 2" := SearchContact."Name 2";
          "Bill-to Address" := SearchContact.Address;
          "Bill-to Address 2" := SearchContact."Address 2";
          "Bill-to City" := SearchContact.City;
          "Bill-to Post Code" := SearchContact."Post Code";
          "Bill-to County" := SearchContact.County;
          "Bill-to Country/Region Code" := SearchContact."Country/Region Code";
          "VAT Registration No." := SearchContact."VAT Registration No.";
          VALIDATE("Currency Code",SearchContact."Currency Code");
          "Language Code" := SearchContact."Language Code";
          IF ("Bill-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Bill-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;
    END;

    LOCAL PROCEDURE UpdateSellToCustTemplateCode@1000();
    BEGIN
      IF ("Document Type" = "Document Type"::Quote) AND ("Sell-to Customer No." = '') AND ("Sell-to Customer Template Code" = '' ) AND
         (GetFilterContNo = '')
      THEN
        VALIDATE("Sell-to Customer Template Code",SelectSalesHeaderCustomerTemplate);
    END;

    LOCAL PROCEDURE GetShippingTime@23(CalledByFieldNo@1000 : Integer);
    VAR
      ShippingAgentServices@1001 : Record 5790;
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
        "Shipping Time" := ShippingAgentServices."Shipping Time"
      ELSE BEGIN
        GetCust("Sell-to Customer No.");
        "Shipping Time" := Cust."Shipping Time"
      END;
      IF NOT (CalledByFieldNo IN [FIELDNO("Shipping Agent Code"),FIELDNO("Shipping Agent Service Code")]) THEN
        VALIDATE("Shipping Time");
    END;

    LOCAL PROCEDURE GetContact@159(VAR Contact@1000 : Record 5050;ContactNo@1001 : Code[20]);
    BEGIN
      Contact.GET(ContactNo);
      IF (Contact.Type = Contact.Type::Person) AND (Contact."Company No." <> '') THEN
        Contact.GET(Contact."Company No.");
    END;

    [Internal]
    PROCEDURE CheckCreditMaxBeforeInsert@28();
    VAR
      SalesHeader@1001 : Record 36;
      ContBusinessRelation@1002 : Record 5054;
      Cont@1003 : Record 5050;
      CustCheckCreditLimit@1000 : Codeunit 312;
    BEGIN
      IF HideCreditCheckDialogue THEN
        EXIT;
      IF (GetFilterCustNo <> '') OR ("Sell-to Customer No." <> '') THEN BEGIN
        IF "Sell-to Customer No." <> '' THEN
          Cust.GET("Sell-to Customer No.")
        ELSE
          Cust.GET(GetFilterCustNo);
        IF Cust."Bill-to Customer No." <> '' THEN
          SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
        ELSE
          SalesHeader."Bill-to Customer No." := Cust."No.";
        CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
      END ELSE
        IF GetFilterContNo <> '' THEN BEGIN
          Cont.GET(GetFilterContNo);
          IF ContBusinessRelation.FindByContact(ContBusinessRelation."Link to Table"::Customer,Cont."Company No.") THEN BEGIN
            Cust.GET(ContBusinessRelation."No.");
            IF Cust."Bill-to Customer No." <> '' THEN
              SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
            ELSE
              SalesHeader."Bill-to Customer No." := Cust."No.";
            CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
          END;
        END;
    END;

    [External]
    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN
        IF NOT IsApprovedForPosting THEN
          EXIT;
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            IF "Shipping Advice" = "Shipping Advice"::Complete THEN
              CheckShippingAdvice;
            WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Order");
          END;
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    [External]
    PROCEDURE CreateTask@30();
    VAR
      TempTask@1000 : TEMPORARY Record 5080;
    BEGIN
      TESTFIELD("Sell-to Contact No.");
      TempTask.CreateTaskFromSalesHeader(Rec);
    END;

    [External]
    PROCEDURE UpdateShipToAddress@31();
    BEGIN
      IF IsCreditDocType THEN
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          SetShipToAddress(
            Location.Name,Location."Name 2",Location.Address,Location."Address 2",Location.City,
            Location."Post Code",Location.County,Location."Country/Region Code");
          "Ship-to Contact" := Location.Contact;
        END ELSE BEGIN
          CompanyInfo.GET;
          "Ship-to Code" := '';
          SetShipToAddress(
            CompanyInfo."Ship-to Name",CompanyInfo."Ship-to Name 2",CompanyInfo."Ship-to Address",CompanyInfo."Ship-to Address 2",
            CompanyInfo."Ship-to City",CompanyInfo."Ship-to Post Code",CompanyInfo."Ship-to County",
            CompanyInfo."Ship-to Country/Region Code");
          "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        END;

      OnAfterUpdateShipToAddress(Rec);
    END;

    [External]
    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      ATOLink@1003 : Record 904;
      NewDimSetID@1002 : Integer;
      ShippedReceivedItemLineDimChangeConfirmed@1004 : Boolean;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT GetHideValidationDialog AND GUIALLOWED THEN
        IF NOT CONFIRM(Text064) THEN
          EXIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.LOCKTABLE;
      IF SalesLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(SalesLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF SalesLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            SalesLine."Dimension Set ID" := NewDimSetID;

            IF NOT GetHideValidationDialog AND GUIALLOWED THEN
              VerifyShippedReceivedItemLineDimChange(ShippedReceivedItemLineDimChangeConfirmed);

            DimMgt.UpdateGlobalDimFromDimSetID(
              SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
            SalesLine.MODIFY;
            ATOLink.UpdateAsmDimFromSalesLine(SalesLine);
          END;
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyShippedReceivedItemLineDimChange@105(VAR ShippedReceivedItemLineDimChangeConfirmed@1000 : Boolean);
    BEGIN
      IF SalesLine.IsShippedReceivedItemDimChanged THEN
        IF NOT ShippedReceivedItemLineDimChangeConfirmed THEN
          ShippedReceivedItemLineDimChangeConfirmed := SalesLine.ConfirmShippedReceivedItemDimChange;
    END;

    [External]
    PROCEDURE LookupAdjmtValueEntries@37(QtyType@1000 : 'General,Invoicing');
    VAR
      ItemLedgEntry@1004 : Record 32;
      SalesLine@1001 : Record 37;
      SalesShptLine@1005 : Record 111;
      ReturnRcptLine@1002 : Record 6661;
      TempValueEntry@1003 : TEMPORARY Record 5802;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      TempValueEntry.RESET;
      TempValueEntry.DELETEALL;

      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice:
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH SalesShptLine DO BEGIN
                    IF SalesLine."Shipment No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Shipment No.");
                      SETRANGE("Line No.",SalesLine."Shipment Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Order No.","Order Line No.");
                      SETRANGE("Order No.",SalesLine."Document No.");
                      SETRANGE("Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Qty. Shipped Not Invoiced",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH ReturnRcptLine DO BEGIN
                    IF SalesLine."Return Receipt No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Return Receipt No.");
                      SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Return Order No.","Return Order Line No.");
                      SETRANGE("Return Order No.",SalesLine."Document No.");
                      SETRANGE("Return Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
      END;
      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumber@63() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    [External]
    PROCEDURE GetCustomerVATRegistrationNumberLbl@62() : Text;
    BEGIN
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumber@164() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetCustomerGlobalLocationNumberLbl@161() : Text;
    BEGIN
      EXIT('');
    END;

    LOCAL PROCEDURE CreateTempAdjmtValueEntries@38(VAR TempValueEntry@1001 : TEMPORARY Record 5802;ItemLedgEntryNo@1000 : Integer);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        IF FINDSET THEN
          REPEAT
            IF Adjustment THEN BEGIN
              TempValueEntry := ValueEntry;
              IF TempValueEntry.INSERT THEN;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    [Internal]
    PROCEDURE GetPstdDocLinesToRevere@39();
    VAR
      SalesPostedDocLines@1000 : Page 5850;
    BEGIN
      GetCust("Sell-to Customer No.");
      SalesPostedDocLines.SetToSalesHeader(Rec);
      SalesPostedDocLines.SETRECORD(Cust);
      SalesPostedDocLines.LOOKUPMODE := TRUE;
      IF SalesPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        SalesPostedDocLines.CopyLineToDoc;

      CLEAR(SalesPostedDocLines);
    END;

    [Internal]
    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      SalesInvDisc@1000 : Codeunit 60;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN
        SalesInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    [External]
    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    LOCAL PROCEDURE SynchronizeForReservations@42(VAR NewSalesLine@1000 : Record 37;OldSalesLine@1001 : Record 37);
    BEGIN
      NewSalesLine.CALCFIELDS("Reserved Quantity");
      IF NewSalesLine."Reserved Quantity" = 0 THEN
        EXIT;
      IF NewSalesLine."Location Code" <> OldSalesLine."Location Code" THEN
        NewSalesLine.VALIDATE("Location Code",OldSalesLine."Location Code");
      IF NewSalesLine."Bin Code" <> OldSalesLine."Bin Code" THEN
        NewSalesLine.VALIDATE("Bin Code",OldSalesLine."Bin Code");
      IF NewSalesLine.MODIFY THEN;
    END;

    [External]
    PROCEDURE InventoryPickConflict@46(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1003 : Code[20];ShippingAdvice@1004 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      SalesLine@1001 : Record 37;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseActivityLine.SETRANGE("Source Subtype",DocType);
      WarehouseActivityLine.SETRANGE("Source No.",DocNo);
      IF WarehouseActivityLine.ISEMPTY THEN
        EXIT(FALSE);
      SalesLine.SETRANGE("Document Type",DocType);
      SalesLine.SETRANGE("Document No.",DocNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE WhseShpmntConflict@52(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1001 : Code[20];ShippingAdvice@1000 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",DocType);
      WarehouseShipmentLine.SETRANGE("Source No.",DocNo);
      IF WarehouseShipmentLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckCrLimit@47();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader := Rec;

      IF GUIALLOWED AND
         (CurrFieldNo <> 0) AND
         (("Document Type" <= "Document Type"::Invoice) OR ("Document Type" = "Document Type"::"Blanket Order")) AND
         SalesHeader.FIND
      THEN BEGIN
        "Amount Including VAT" := 0;
        IF "Document Type" = "Document Type"::Order THEN
          IF BilltoCustomerNoChanged THEN BEGIN
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE("Document No.","No.");
            SalesLine.CALCSUMS("Outstanding Amount","Shipped Not Invoiced");
            "Amount Including VAT" := SalesLine."Outstanding Amount" + SalesLine."Shipped Not Invoiced";
          END;
        CustCheckCreditLimit.SalesHeaderCheck(Rec);
        CALCFIELDS("Amount Including VAT");
      END;
    END;

    PROCEDURE CheckItemAvailabilityInLines@142();
    VAR
      SalesLine@1000 : Record 37;
      ItemCheckAvail@1001 : Codeunit 311;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETFILTER("No.",'<>%1','');
      SalesLine.SETFILTER("Outstanding Quantity",'<>%1',0);
      IF SalesLine.FINDSET THEN
        REPEAT
          IF ItemCheckAvail.SalesLineCheck(SalesLine) THEN
            ItemCheckAvail.RaiseUpdateInterruptedError;
        UNTIL SalesLine.NEXT = 0;
    END;

    [External]
    PROCEDURE QtyToShipIsZero@49() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Qty. to Ship",'<>0');
      EXIT(SalesLine.ISEMPTY);
    END;

    [Internal]
    PROCEDURE IsApprovedForPosting@53() : Boolean;
    VAR
      PrepaymentMgt@1001 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
        IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
          ERROR(STRSUBSTNO(PrepaymentInvoicesNotPaidErr,"Document Type","No."));
        IF "Document Type" = "Document Type"::Order THEN
          IF PrepaymentMgt.TestSalesPayment(Rec) THEN
            ERROR(STRSUBSTNO(Text072,"Document Type","No."));
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE IsApprovedForPostingBatch@54() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
        IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
          EXIT(FALSE);
        IF PrepaymentMgt.TestSalesPayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE GetLegalStatement@60() : Text;
    BEGIN
      SalesSetup.GET;
      EXIT(SalesSetup.GetLegalStatement);
    END;

    [External]
    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    [External]
    PROCEDURE CancelBackgroundPosting@48();
    VAR
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      SalesPostViaJobQueue.CancelQueueEntry(Rec);
    END;

    [Internal]
    PROCEDURE EmailRecords@135(ShowDialog@1000 : Boolean);
    VAR
      DocumentSendingProfile@1003 : Record 60;
      DummyReportSelections@1001 : Record 77;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          BEGIN
            DocumentSendingProfile.TrySendToEMail(
              DummyReportSelections.Usage::"S.Quote",Rec,FIELDNO("No."),
              GetDocTypeTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
            FIND;
            "Quote Sent to Customer" := CURRENTDATETIME;
            MODIFY;
          END;
        "Document Type"::Invoice:
          DocumentSendingProfile.TrySendToEMail(
            DummyReportSelections.Usage::"S.Invoice Draft",Rec,FIELDNO("No."),
            GetDocTypeTxt,FIELDNO("Bill-to Customer No."),ShowDialog);
      END;

      OnAfterSendSalesHeader(Rec,ShowDialog);
    END;

    PROCEDURE GetDocTypeTxt@140() : Text[50];
    VAR
      IdentityManagement@1000 : Codeunit 9801;
    BEGIN
      IF "Document Type" = "Document Type"::Quote THEN
        IF IdentityManagement.IsInvAppId THEN
          EXIT(EstimateTxt);
      EXIT(FORMAT("Document Type"));
    END;

    [External]
    PROCEDURE LinkSalesDocWithOpportunity@79(OldOpportunityNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
      Opportunity@1002 : Record 5092;
    BEGIN
      IF "Opportunity No." <> OldOpportunityNo THEN BEGIN
        IF "Opportunity No." <> '' THEN
          IF Opportunity.GET("Opportunity No.") THEN BEGIN
            Opportunity.TESTFIELD(Status,Opportunity.Status::"In Progress");
            IF Opportunity."Sales Document No." <> '' THEN BEGIN
              IF CONFIRM(Text048,FALSE,Opportunity."Sales Document No.",Opportunity."No.") THEN BEGIN
                IF SalesHeader.GET("Document Type"::Quote,Opportunity."Sales Document No.") THEN BEGIN
                  SalesHeader."Opportunity No." := '';
                  SalesHeader.MODIFY;
                END;
                UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
              END ELSE
                "Opportunity No." := OldOpportunityNo;
            END ELSE
              UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
          END;
        IF (OldOpportunityNo <> '') AND Opportunity.GET(OldOpportunityNo) THEN
          UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::" ",'');
      END;
    END;

    LOCAL PROCEDURE UpdateOpportunityLink@80(Opportunity@1000 : Record 5092;SalesDocumentType@1001 : Option;SalesHeaderNo@1002 : Code[20]);
    BEGIN
      Opportunity."Sales Document Type" := SalesDocumentType;
      Opportunity."Sales Document No." := SalesHeaderNo;
      Opportunity.MODIFY;
    END;

    PROCEDURE SynchronizeAsmHeader@56();
    VAR
      AsmHeader@1003 : Record 900;
      ATOLink@1002 : Record 904;
      Window@1000 : Dialog;
    BEGIN
      ATOLink.SETCURRENTKEY(Type,"Document Type","Document No.");
      ATOLink.SETRANGE(Type,ATOLink.Type::Sale);
      ATOLink.SETRANGE("Document Type","Document Type");
      ATOLink.SETRANGE("Document No.","No.");
      IF ATOLink.FINDSET THEN
        REPEAT
          IF AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No.") THEN
            IF "Posting Date" <> AsmHeader."Posting Date" THEN BEGIN
              Window.OPEN(STRSUBSTNO(SynchronizingMsg,"No.",AsmHeader."No."));
              AsmHeader.VALIDATE("Posting Date","Posting Date");
              AsmHeader.MODIFY;
              Window.CLOSE;
            END;
        UNTIL ATOLink.NEXT = 0;
    END;

    [External]
    PROCEDURE CheckShippingAdvice@55();
    VAR
      SalesLine@1000 : Record 37;
      Item@1003 : Record 27;
      QtyToShipBaseTotal@1002 : Decimal;
      Result@1001 : Boolean;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      Result := TRUE;
      IF SalesLine.FINDSET THEN
        REPEAT
          Item.GET(SalesLine."No.");
          IF SalesLine.IsShipment AND (Item.Type = Item.Type::Inventory) THEN BEGIN
            QtyToShipBaseTotal += SalesLine."Qty. to Ship (Base)";
            IF SalesLine."Quantity (Base)" <>
               SalesLine."Qty. to Ship (Base)" + SalesLine."Qty. Shipped (Base)"
            THEN
              Result := FALSE;
          END;
        UNTIL SalesLine.NEXT = 0;
      IF QtyToShipBaseTotal = 0 THEN
        Result := TRUE;
      IF NOT Result THEN
        ERROR(ShippingAdviceErr);
    END;

    LOCAL PROCEDURE GetFilterCustNo@64() : Code[20];
    VAR
      MinValue@1002 : Code[20];
      MaxValue@1001 : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Customer No.") <> '' THEN BEGIN
        IF TryGetFilterCustNoRange(MinValue,MaxValue) THEN
          IF MinValue = MaxValue THEN
            EXIT(MaxValue);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetFilterCustNoRange@128(VAR MinValue@1001 : Code[20];VAR MaxValue@1000 : Code[20]);
    BEGIN
      MinValue := GETRANGEMIN("Sell-to Customer No.");
      MaxValue := GETRANGEMAX("Sell-to Customer No.");
    END;

    LOCAL PROCEDURE GetFilterCustNoByApplyingFilter@129() : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
      MinValue@1001 : Code[20];
      MaxValue@1000 : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Customer No.") <> '' THEN BEGIN
        SalesHeader.COPYFILTERS(Rec);
        SalesHeader.SETCURRENTKEY("Sell-to Customer No.");
        IF SalesHeader.FINDFIRST THEN
          MinValue := SalesHeader."Sell-to Customer No.";
        IF SalesHeader.FINDLAST THEN
          MaxValue := SalesHeader."Sell-to Customer No.";
        IF MinValue = MaxValue THEN
          EXIT(MaxValue);
      END;
    END;

    LOCAL PROCEDURE GetFilterContNo@65() : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Contact No.") <> '' THEN
        IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN
          EXIT(GETRANGEMAX("Sell-to Contact No."));
    END;

    LOCAL PROCEDURE CheckCreditLimitIfLineNotInsertedYet@66();
    BEGIN
      IF "No." = '' THEN BEGIN
        HideCreditCheckDialogue := FALSE;
        CheckCreditMaxBeforeInsert;
        HideCreditCheckDialogue := TRUE;
      END;
    END;

    [External]
    PROCEDURE InvoicedLineExists@156() : Boolean;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      EXIT(NOT SalesLine.ISEMPTY);
    END;

    [External]
    PROCEDURE CreateDimSetForPrepmtAccDefaultDim@73();
    VAR
      SalesLine@1000 : Record 37;
      TempSalesLine@1003 : TEMPORARY Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>%1',0);
      IF SalesLine.FINDSET THEN
        REPEAT
          CollectParamsInBufferForCreateDimSet(TempSalesLine,SalesLine);
        UNTIL SalesLine.NEXT = 0;
      TempSalesLine.RESET;
      TempSalesLine.MARKEDONLY(FALSE);
      IF TempSalesLine.FINDSET THEN
        REPEAT
          SalesLine.CreateDim(DATABASE::"G/L Account",TempSalesLine."No.",
            DATABASE::Job,TempSalesLine."Job No.",
            DATABASE::"Responsibility Center",TempSalesLine."Responsibility Center");
        UNTIL TempSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectParamsInBufferForCreateDimSet@72(VAR TempSalesLine@1000 : TEMPORARY Record 37;SalesLine@1001 : Record 37);
    VAR
      GenPostingSetup@1003 : Record 252;
      DefaultDimension@1002 : Record 352;
    BEGIN
      TempSalesLine.SETRANGE("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
      TempSalesLine.SETRANGE("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
      IF NOT TempSalesLine.FINDFIRST THEN BEGIN
        GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GenPostingSetup.GetSalesPrepmtAccount);
        InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,GenPostingSetup."Sales Prepayments Account",DefaultDimension.ISEMPTY);
      END ELSE
        IF NOT TempSalesLine.MARK THEN BEGIN
          TempSalesLine.SETRANGE("Job No.",SalesLine."Job No.");
          TempSalesLine.SETRANGE("Responsibility Center",SalesLine."Responsibility Center");
          IF TempSalesLine.ISEMPTY THEN
            InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,TempSalesLine."No.",FALSE);
        END;
    END;

    LOCAL PROCEDURE InsertTempSalesLineInBuffer@71(VAR TempSalesLine@1001 : TEMPORARY Record 37;SalesLine@1000 : Record 37;AccountNo@1002 : Code[20];DefaultDimensionsNotExist@1003 : Boolean);
    BEGIN
      TempSalesLine.INIT;
      TempSalesLine."Line No." := SalesLine."Line No.";
      TempSalesLine."No." := AccountNo;
      TempSalesLine."Job No." := SalesLine."Job No.";
      TempSalesLine."Responsibility Center" := SalesLine."Responsibility Center";
      TempSalesLine."Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
      TempSalesLine."Gen. Prod. Posting Group" := SalesLine."Gen. Prod. Posting Group";
      TempSalesLine.MARK := DefaultDimensionsNotExist;
      TempSalesLine.INSERT;
    END;

    [Internal]
    PROCEDURE OpenSalesOrderStatistics@70();
    BEGIN
      CalcInvDiscForHeader;
      CreateDimSetForPrepmtAccDefaultDim;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Order Statistics",Rec);
    END;

    [External]
    PROCEDURE GetCardpageID@58() : Integer;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PAGE::"Sales Quote");
        "Document Type"::Order:
          EXIT(PAGE::"Sales Order");
        "Document Type"::Invoice:
          EXIT(PAGE::"Sales Invoice");
        "Document Type"::"Credit Memo":
          EXIT(PAGE::"Sales Credit Memo");
        "Document Type"::"Blanket Order":
          EXIT(PAGE::"Blanket Sales Order");
        "Document Type"::"Return Order":
          EXIT(PAGE::"Sales Return Order");
      END;
    END;

    [External]
    PROCEDURE CheckAvailableCreditLimit@67() : Decimal;
    VAR
      Customer@1000 : Record 18;
      AvailableCreditLimit@1002 : Decimal;
    BEGIN
      IF ("Bill-to Customer No." = '') AND ("Sell-to Customer No." = '') THEN
        EXIT(0);

      IF NOT Customer.GET("Bill-to Customer No.") THEN
        Customer.GET("Sell-to Customer No.");

      AvailableCreditLimit := Customer.CalcAvailableCredit;

      IF AvailableCreditLimit < 0 THEN
        OnCustomerCreditLimitExceeded
      ELSE
        OnCustomerCreditLimitNotExceeded;

      EXIT(AvailableCreditLimit);
    END;

    [External]
    PROCEDURE SetStatus@99(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    LOCAL PROCEDURE TestSalesLineFieldsBeforeRecreate@68();
    BEGIN
      SalesLine.TESTFIELD("Job No.",'');
      SalesLine.TESTFIELD("Job Contract Entry No.",0);
      SalesLine.TESTFIELD("Quantity Shipped",0);
      SalesLine.TESTFIELD("Quantity Invoiced",0);
      SalesLine.TESTFIELD("Return Qty. Received",0);
      SalesLine.TESTFIELD("Shipment No.",'');
      SalesLine.TESTFIELD("Return Receipt No.",'');
      SalesLine.TESTFIELD("Blanket Order No.",'');
      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
    END;

    LOCAL PROCEDURE RecreateReservEntryReqLine@75(VAR TempSalesLine@1000 : TEMPORARY Record 37;VAR TempATOLink@1003 : TEMPORARY Record 904;VAR ATOLink@1002 : Record 904);
    BEGIN
      REPEAT
        TestSalesLineFieldsBeforeRecreate;
        IF (SalesLine."Location Code" <> "Location Code") AND NOT SalesLine.IsServiceItem THEN
          SalesLine.VALIDATE("Location Code","Location Code");
        TempSalesLine := SalesLine;
        IF SalesLine.Nonstock THEN BEGIN
          SalesLine.Nonstock := FALSE;
          SalesLine.MODIFY;
        END;

        IF ATOLink.AsmExistsForSalesLine(TempSalesLine) THEN BEGIN
          TempATOLink := ATOLink;
          TempATOLink.INSERT;
          ATOLink.DELETE;
        END;

        TempSalesLine.INSERT;
        SalesLineReserve.CopyReservEntryToTemp(TempReservEntry,SalesLine);
        RecreateReqLine(SalesLine,0,TRUE);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferItemChargeAssgntSalesToTemp@69(VAR ItemChargeAssgntSales@1001 : Record 5809;VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809);
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","No.");
      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        REPEAT
          TempItemChargeAssgntSales.INIT;
          TempItemChargeAssgntSales := ItemChargeAssgntSales;
          TempItemChargeAssgntSales.INSERT;
        UNTIL ItemChargeAssgntSales.NEXT = 0;
        ItemChargeAssgntSales.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE CreateSalesLine@78(VAR TempSalesLine@1000 : TEMPORARY Record 37);
    BEGIN
      SalesLine.INIT;
      SalesLine."Line No." := SalesLine."Line No." + 10000;
      SalesLine.VALIDATE(Type,TempSalesLine.Type);
      IF TempSalesLine."No." = '' THEN BEGIN
        SalesLine.VALIDATE(Description,TempSalesLine.Description);
        SalesLine.VALIDATE("Description 2",TempSalesLine."Description 2");
      END ELSE BEGIN
        SalesLine.VALIDATE("No.",TempSalesLine."No.");
        IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
          SalesLine.VALIDATE("Unit of Measure Code",TempSalesLine."Unit of Measure Code");
          SalesLine.VALIDATE("Variant Code",TempSalesLine."Variant Code");
          IF TempSalesLine.Quantity <> 0 THEN BEGIN
            SalesLine.VALIDATE(Quantity,TempSalesLine.Quantity);
            SalesLine.VALIDATE("Qty. to Assemble to Order",TempSalesLine."Qty. to Assemble to Order");
          END;
          SalesLine."Purchase Order No." := TempSalesLine."Purchase Order No.";
          SalesLine."Purch. Order Line No." := TempSalesLine."Purch. Order Line No.";
          SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
        END;
        SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
      END;
      SalesLine.INSERT;
      OnAfterCreateSalesLine(SalesLine,TempSalesLine);
    END;

    LOCAL PROCEDURE CreateItemChargeAssgntSales@83(VAR ItemChargeAssgntSales@1001 : Record 5809;VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809;VAR TempSalesLine@1002 : TEMPORARY Record 37;VAR TempInteger@1003 : TEMPORARY Record 2000000026);
    BEGIN
      IF TempSalesLine.FINDSET THEN
        REPEAT
          TempItemChargeAssgntSales.SETRANGE("Document Line No.",TempSalesLine."Line No.");
          IF TempItemChargeAssgntSales.FINDSET THEN BEGIN
            REPEAT
              TempInteger.FINDFIRST;
              ItemChargeAssgntSales.INIT;
              ItemChargeAssgntSales := TempItemChargeAssgntSales;
              ItemChargeAssgntSales."Document Line No." := TempInteger.Number;
              ItemChargeAssgntSales.VALIDATE("Unit Cost",0);
              ItemChargeAssgntSales.INSERT;
            UNTIL TempItemChargeAssgntSales.NEXT = 0;
            TempInteger.DELETE;
          END;
        UNTIL TempSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateOutboundWhseHandlingTime@88();
    BEGIN
      IF "Location Code" <> '' THEN BEGIN
        IF Location.GET("Location Code") THEN
          "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
      END ELSE
        IF InvtSetup.GET THEN
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCheckSalesPostRestrictions@115();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCustomerCreditLimitExceeded@74();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCustomerCreditLimitNotExceeded@76();
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnCheckSalesReleaseRestrictions@81();
    BEGIN
    END;

    [External]
    PROCEDURE CheckSalesReleaseRestrictions@162();
    VAR
      ApprovalsMgmt@1000 : Codeunit 1535;
    BEGIN
      OnCheckSalesReleaseRestrictions;
      ApprovalsMgmt.PrePostApprovalCheckSales(Rec);
    END;

    [External]
    PROCEDURE DeferralHeadersExist@82() : Boolean;
    VAR
      DeferralHeader@1000 : Record 1701;
      DeferralUtilities@1001 : Codeunit 1720;
    BEGIN
      DeferralHeader.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
      DeferralHeader.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralHeader.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralHeader.SETRANGE("Document Type","Document Type");
      DeferralHeader.SETRANGE("Document No.","No.");
      EXIT(NOT DeferralHeader.ISEMPTY);
    END;

    [External]
    PROCEDURE SetSellToCustomerFromFilter@186();
    VAR
      SellToCustomerNo@1000 : Code[20];
    BEGIN
      SellToCustomerNo := GetFilterCustNo;
      IF SellToCustomerNo = '' THEN BEGIN
        FILTERGROUP(2);
        SellToCustomerNo := GetFilterCustNo;
        IF SellToCustomerNo = '' THEN
          SellToCustomerNo := GetFilterCustNoByApplyingFilter;
        FILTERGROUP(0);
      END;
      IF SellToCustomerNo <> '' THEN
        VALIDATE("Sell-to Customer No.",SellToCustomerNo);
    END;

    [External]
    PROCEDURE CopySellToCustomerFilter@44();
    VAR
      SellToCustomerFilter@1000 : Text;
    BEGIN
      SellToCustomerFilter := GETFILTER("Sell-to Customer No.");
      IF SellToCustomerFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETFILTER("Sell-to Customer No.",SellToCustomerFilter);
        FILTERGROUP(0)
      END;
    END;

    LOCAL PROCEDURE ConfirmUpdateDeferralDate@85();
    BEGIN
      IF GetHideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(DeferralLineQst,FALSE);
      IF Confirmed THEN
        UpdateSalesLines(SalesLine.FIELDCAPTION("Deferral Code"),FALSE);
    END;

    [External]
    PROCEDURE BatchConfirmUpdateDeferralDate@130(VAR BatchConfirm@1000 : ' ,Skip,Update';ReplacePostingDate@1004 : Boolean;PostingDateReq@1003 : Date);
    BEGIN
      IF (NOT ReplacePostingDate) OR (PostingDateReq = "Posting Date") OR (BatchConfirm = BatchConfirm::Skip) THEN
        EXIT;

      IF NOT DeferralHeadersExist THEN
        EXIT;

      "Posting Date" := PostingDateReq;
      CASE BatchConfirm OF
        BatchConfirm::" ":
          BEGIN
            ConfirmUpdateDeferralDate;
            IF Confirmed THEN
              BatchConfirm := BatchConfirm::Update
            ELSE
              BatchConfirm := BatchConfirm::Skip;
          END;
        BatchConfirm::Update:
          UpdateSalesLines(SalesLine.FIELDCAPTION("Deferral Code"),FALSE);
      END;
      COMMIT;
    END;

    [External]
    PROCEDURE GetSelectedPaymentServicesText@84() : Text;
    VAR
      PaymentServiceSetup@1000 : Record 1060;
    BEGIN
      EXIT(PaymentServiceSetup.GetSelectedPaymentsText("Payment Service Set ID"));
    END;

    [External]
    PROCEDURE SetDefaultPaymentServices@86();
    VAR
      PaymentServiceSetup@1000 : Record 1060;
      SetID@1001 : Integer;
    BEGIN
      IF NOT PaymentServiceSetup.CanChangePaymentService(Rec) THEN
        EXIT;

      IF PaymentServiceSetup.GetDefaultPaymentServices(SetID) THEN
        VALIDATE("Payment Service Set ID",SetID);
    END;

    [External]
    PROCEDURE ChangePaymentServiceSetting@87();
    VAR
      PaymentServiceSetup@1000 : Record 1060;
      SetID@1001 : Integer;
    BEGIN
      SetID := "Payment Service Set ID";
      IF PaymentServiceSetup.SelectPaymentService(SetID) THEN BEGIN
        VALIDATE("Payment Service Set ID",SetID);
        MODIFY(TRUE);
      END;
    END;

    [External]
    PROCEDURE IsCreditDocType@110() : Boolean;
    BEGIN
      EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    [External]
    PROCEDURE HasSellToAddress@94() : Boolean;
    BEGIN
      CASE TRUE OF
        "Sell-to Address" <> '':
          EXIT(TRUE);
        "Sell-to Address 2" <> '':
          EXIT(TRUE);
        "Sell-to City" <> '':
          EXIT(TRUE);
        "Sell-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Sell-to County" <> '':
          EXIT(TRUE);
        "Sell-to Post Code" <> '':
          EXIT(TRUE);
        "Sell-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasShipToAddress@103() : Boolean;
    BEGIN
      CASE TRUE OF
        "Ship-to Address" <> '':
          EXIT(TRUE);
        "Ship-to Address 2" <> '':
          EXIT(TRUE);
        "Ship-to City" <> '':
          EXIT(TRUE);
        "Ship-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Ship-to County" <> '':
          EXIT(TRUE);
        "Ship-to Post Code" <> '':
          EXIT(TRUE);
        "Ship-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    [External]
    PROCEDURE HasBillToAddress@95() : Boolean;
    BEGIN
      CASE TRUE OF
        "Bill-to Address" <> '':
          EXIT(TRUE);
        "Bill-to Address 2" <> '':
          EXIT(TRUE);
        "Bill-to City" <> '':
          EXIT(TRUE);
        "Bill-to Country/Region Code" <> '':
          EXIT(TRUE);
        "Bill-to County" <> '':
          EXIT(TRUE);
        "Bill-to Post Code" <> '':
          EXIT(TRUE);
        "Bill-to Contact" <> '':
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HasItemChargeAssignment@152() : Boolean;
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","No.");
      ItemChargeAssgntSales.SETFILTER("Amount to Assign",'<>%1',0);
      EXIT(NOT ItemChargeAssgntSales.ISEMPTY);
    END;

    LOCAL PROCEDURE CopySellToCustomerAddressFieldsFromCustomer@90(VAR SellToCustomer@1000 : Record 18);
    BEGIN
      IF SellToCustomerIsReplaced OR ShouldCopyAddressFromSellToCustomer(SellToCustomer) THEN BEGIN
        "Sell-to Address" := SellToCustomer.Address;
        "Sell-to Address 2" := SellToCustomer."Address 2";
        "Sell-to City" := SellToCustomer.City;
        "Sell-to Post Code" := SellToCustomer."Post Code";
        "Sell-to County" := SellToCustomer.County;
        "Sell-to Country/Region Code" := SellToCustomer."Country/Region Code";
      END;
    END;

    LOCAL PROCEDURE CopyShipToCustomerAddressFieldsFromCustomer@98(VAR SellToCustomer@1000 : Record 18);
    BEGIN
      IF SellToCustomerIsReplaced OR ShipToAddressEqualsOldSellToAddress THEN BEGIN
        "Ship-to Address" := SellToCustomer.Address;
        "Ship-to Address 2" := SellToCustomer."Address 2";
        "Ship-to City" := SellToCustomer.City;
        "Ship-to Post Code" := SellToCustomer."Post Code";
        "Ship-to County" := SellToCustomer.County;
        VALIDATE("Ship-to Country/Region Code",SellToCustomer."Country/Region Code");
      END;
    END;

    LOCAL PROCEDURE CopyBillToCustomerAddressFieldsFromCustomer@93(VAR BillToCustomer@1000 : Record 18);
    BEGIN
      IF BillToCustomerIsReplaced OR ShouldCopyAddressFromBillToCustomer(BillToCustomer) THEN BEGIN
        "Bill-to Address" := BillToCustomer.Address;
        "Bill-to Address 2" := BillToCustomer."Address 2";
        "Bill-to City" := BillToCustomer.City;
        "Bill-to Post Code" := BillToCustomer."Post Code";
        "Bill-to County" := BillToCustomer.County;
        "Bill-to Country/Region Code" := BillToCustomer."Country/Region Code";
      END;
    END;

    [External]
    PROCEDURE SetShipToAddress@117(ShipToName@1000 : Text[50];ShipToName2@1001 : Text[50];ShipToAddress@1002 : Text[50];ShipToAddress2@1003 : Text[50];ShipToCity@1004 : Text[30];ShipToPostCode@1005 : Code[20];ShipToCounty@1006 : Text[30];ShipToCountryRegionCode@1007 : Code[10]);
    BEGIN
      "Ship-to Name" := ShipToName;
      "Ship-to Name 2" := ShipToName2;
      "Ship-to Address" := ShipToAddress;
      "Ship-to Address 2" := ShipToAddress2;
      "Ship-to City" := ShipToCity;
      "Ship-to Post Code" := ShipToPostCode;
      "Ship-to County" := ShipToCounty;
      "Ship-to Country/Region Code" := ShipToCountryRegionCode;
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromSellToCustomer@101(SellToCustomer@1000 : Record 18) : Boolean;
    BEGIN
      EXIT((NOT HasSellToAddress) AND SellToCustomer.HasAddress);
    END;

    LOCAL PROCEDURE ShouldCopyAddressFromBillToCustomer@102(BillToCustomer@1000 : Record 18) : Boolean;
    BEGIN
      EXIT((NOT HasBillToAddress) AND BillToCustomer.HasAddress);
    END;

    LOCAL PROCEDURE SellToCustomerIsReplaced@96() : Boolean;
    BEGIN
      EXIT((xRec."Sell-to Customer No." <> '') AND (xRec."Sell-to Customer No." <> "Sell-to Customer No."));
    END;

    LOCAL PROCEDURE BillToCustomerIsReplaced@97() : Boolean;
    BEGIN
      EXIT((xRec."Bill-to Customer No." <> '') AND (xRec."Bill-to Customer No." <> "Bill-to Customer No."));
    END;

    LOCAL PROCEDURE UpdateShipToAddressFromSellToAddress@50(FieldNumber@1000 : Integer);
    BEGIN
      IF ("Ship-to Code" = '') AND ShipToAddressEqualsOldSellToAddress THEN
        CASE FieldNumber OF
          FIELDNO("Ship-to Address"):
            "Ship-to Address" := "Sell-to Address";
          FIELDNO("Ship-to Address 2"):
            "Ship-to Address 2" := "Sell-to Address 2";
          FIELDNO("Ship-to City"),FIELDNO("Ship-to Post Code"):
            BEGIN
              "Ship-to City" := "Sell-to City";
              "Ship-to Post Code" := "Sell-to Post Code";
              "Ship-to County" := "Sell-to County";
              "Ship-to Country/Region Code" := "Sell-to Country/Region Code";
            END;
          FIELDNO("Ship-to County"):
            "Ship-to County" := "Sell-to County";
          FIELDNO("Ship-to Country/Region Code"):
            "Ship-to Country/Region Code" := "Sell-to Country/Region Code";
        END;
    END;

    LOCAL PROCEDURE ShipToAddressEqualsOldSellToAddress@51() : Boolean;
    BEGIN
      EXIT(IsShipToAddressEqualToSellToAddress(xRec,Rec));
    END;

    [External]
    PROCEDURE ShipToAddressEqualsSellToAddress@111() : Boolean;
    BEGIN
      EXIT(IsShipToAddressEqualToSellToAddress(Rec,Rec));
    END;

    LOCAL PROCEDURE IsShipToAddressEqualToSellToAddress@113(SalesHeaderWithSellTo@1000 : Record 36;SalesHeaderWithShipTo@1001 : Record 36) : Boolean;
    BEGIN
      IF (SalesHeaderWithSellTo."Sell-to Address" = SalesHeaderWithShipTo."Ship-to Address") AND
         (SalesHeaderWithSellTo."Sell-to Address 2" = SalesHeaderWithShipTo."Ship-to Address 2") AND
         (SalesHeaderWithSellTo."Sell-to City" = SalesHeaderWithShipTo."Ship-to City") AND
         (SalesHeaderWithSellTo."Sell-to County" = SalesHeaderWithShipTo."Ship-to County") AND
         (SalesHeaderWithSellTo."Sell-to Post Code" = SalesHeaderWithShipTo."Ship-to Post Code") AND
         (SalesHeaderWithSellTo."Sell-to Country/Region Code" = SalesHeaderWithShipTo."Ship-to Country/Region Code") AND
         (SalesHeaderWithSellTo."Sell-to Contact" = SalesHeaderWithShipTo."Ship-to Contact")
      THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE CopySellToAddressToShipToAddress@112();
    BEGIN
      "Ship-to Address" := "Sell-to Address";
      "Ship-to Address 2" := "Sell-to Address 2";
      "Ship-to City" := "Sell-to City";
      "Ship-to Contact" := "Sell-to Contact";
      "Ship-to Country/Region Code" := "Sell-to Country/Region Code";
      "Ship-to County" := "Sell-to County";
      "Ship-to Post Code" := "Sell-to Post Code";
    END;

    PROCEDURE CopySellToAddressToBillToAddress@92();
    BEGIN
      IF "Bill-to Customer No." = "Sell-to Customer No." THEN BEGIN
        "Bill-to Address" := "Sell-to Address";
        "Bill-to Address 2" := "Sell-to Address 2";
        "Bill-to Post Code" := "Sell-to Post Code";
        "Bill-to Country/Region Code" := "Sell-to Country/Region Code";
        "Bill-to City" := "Sell-to City";
        "Bill-to County" := "Sell-to County";
      END;
    END;

    LOCAL PROCEDURE UpdateShipToContact@149();
    BEGIN
      IF NOT (CurrFieldNo IN [FIELDNO("Sell-to Contact"),FIELDNO("Sell-to Contact No.")]) THEN
        EXIT;

      IF IsCreditDocType THEN
        EXIT;

      VALIDATE("Ship-to Contact","Sell-to Contact");
    END;

    [External]
    PROCEDURE ConfirmCloseUnposted@104() : Boolean;
    VAR
      InstructionMgt@1000 : Codeunit 1330;
    BEGIN
      IF SalesLinesExist THEN
        EXIT(InstructionMgt.ShowConfirm(DocumentNotPostedClosePageQst,InstructionMgt.QueryPostOnCloseCode));
      EXIT(TRUE)
    END;

    LOCAL PROCEDURE UpdateOpportunity@108();
    VAR
      Opp@1002 : Record 5092;
      OpportunityEntry@1001 : Record 5093;
    BEGIN
      IF NOT ("Opportunity No." <> '') OR NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
        EXIT;

      IF NOT Opp.GET("Opportunity No.") THEN
        EXIT;

      IF "Document Type" = "Document Type"::Order THEN BEGIN
        IF NOT CONFIRM(Text040,TRUE) THEN
          ERROR(Text044);

        OpportunityEntry.SETRANGE("Opportunity No.","Opportunity No.");
        OpportunityEntry.MODIFYALL(Active,FALSE);

        OpportunityEntry.INIT;
        OpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");

        OpportunityEntry.LOCKTABLE;
        OpportunityEntry."Entry No." := GetOpportunityEntryNo;
        OpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
        OpportunityEntry."Contact No." := Opp."Contact No.";
        OpportunityEntry."Contact Company No." := Opp."Contact Company No.";
        OpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
        OpportunityEntry."Campaign No." := Opp."Campaign No.";
        OpportunityEntry."Action Taken" := OpportunityEntry."Action Taken"::Lost;
        OpportunityEntry.Active := TRUE;
        OpportunityEntry."Completed %" := 100;
        OpportunityEntry."Estimated Value (LCY)" := GetOpportunityEntryEstimatedValue;
        OpportunityEntry."Estimated Close Date" := Opp."Date Closed";
        OpportunityEntry.INSERT(TRUE);
      END;
      Opp.FIND;
      Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
      Opp."Sales Document No." := '';
      Opp.MODIFY;
      "Opportunity No." := '';
    END;

    LOCAL PROCEDURE GetOpportunityEntryNo@106() : Integer;
    VAR
      OpportunityEntry@1000 : Record 5093;
    BEGIN
      IF OpportunityEntry.FINDLAST THEN
        EXIT(OpportunityEntry."Entry No." + 1);
      EXIT(1);
    END;

    LOCAL PROCEDURE GetOpportunityEntryEstimatedValue@107() : Decimal;
    VAR
      OpportunityEntry@1000 : Record 5093;
    BEGIN
      OpportunityEntry.SETRANGE("Opportunity No.","Opportunity No.");
      IF OpportunityEntry.FINDLAST THEN
        EXIT(OpportunityEntry."Estimated Value (LCY)");
    END;

    [External]
    PROCEDURE InitFromSalesHeader@109(SourceSalesHeader@1000 : Record 36);
    BEGIN
      "Document Date" := SourceSalesHeader."Document Date";
      "Shipment Date" := SourceSalesHeader."Shipment Date";
      "Shortcut Dimension 1 Code" := SourceSalesHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := SourceSalesHeader."Shortcut Dimension 2 Code";
      "Dimension Set ID" := SourceSalesHeader."Dimension Set ID";
      "Location Code" := SourceSalesHeader."Location Code";
      SetShipToAddress(
        SourceSalesHeader."Ship-to Name",SourceSalesHeader."Ship-to Name 2",SourceSalesHeader."Ship-to Address",
        SourceSalesHeader."Ship-to Address 2",SourceSalesHeader."Ship-to City",SourceSalesHeader."Ship-to Post Code",
        SourceSalesHeader."Ship-to County",SourceSalesHeader."Ship-to Country/Region Code");
      "Ship-to Contact" := SourceSalesHeader."Ship-to Contact";
    END;

    LOCAL PROCEDURE InitFromContact@126(ContactNo@1000 : Code[20];CustomerNo@1001 : Code[20];ContactCaption@1002 : Text) : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF (ContactNo = '') AND (CustomerNo = '') THEN BEGIN
        IF NOT SalesLine.ISEMPTY THEN
          ERROR(Text005,ContactCaption);
        INIT;
        SalesSetup.GET;
        "No. Series" := xRec."No. Series";
        InitRecord;
        InitNoSeries;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitFromTemplate@118(TemplateCode@1000 : Code[20];TemplateCaption@1001 : Text) : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF TemplateCode = '' THEN BEGIN
        IF NOT SalesLine.ISEMPTY THEN
          ERROR(Text005,TemplateCaption);
        INIT;
        SalesSetup.GET;
        "No. Series" := xRec."No. Series";
        InitRecord;
        InitNoSeries;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ValidateTaxAreaCode@36();
    VAR
      TaxArea@1000 : Record 318;
    BEGIN
      IF "Tax Area Code" = '' THEN
        EXIT;
      IF NOT TaxArea.GET("Tax Area Code") THEN BEGIN
        TaxArea.SETFILTER(Code,"Tax Area Code" + '*');
        IF NOT TaxArea.FINDFIRST THEN
          TaxArea.CreateTaxArea("Tax Area Code","Sell-to City","Sell-to County");
        "Tax Area Code" := TaxArea.Code;
      END;

      IF Cust.GET("Sell-to Customer No.") THEN
        IF Cust."Tax Area Code" = '' THEN BEGIN
          Cust."Tax Area Code" := "Tax Area Code";
          Cust.MODIFY;
        END;
    END;

    [External]
    PROCEDURE SetWorkDescription@120(NewWorkDescription@1000 : Text);
    VAR
      TempBlob@1001 : TEMPORARY Record 99008535;
    BEGIN
      CLEAR("Work Description");
      IF NewWorkDescription = '' THEN
        EXIT;
      TempBlob.Blob := "Work Description";
      TempBlob.WriteAsText(NewWorkDescription,TEXTENCODING::Windows);
      "Work Description" := TempBlob.Blob;
      MODIFY;
    END;

    [External]
    PROCEDURE GetWorkDescription@114() : Text;
    VAR
      TempBlob@1000 : TEMPORARY Record 99008535;
      CR@1004 : Text[1];
    BEGIN
      CALCFIELDS("Work Description");
      IF NOT "Work Description".HASVALUE THEN
        EXIT('');
      CR[1] := 10;
      TempBlob.Blob := "Work Description";
      EXIT(TempBlob.ReadAsText(CR,TEXTENCODING::Windows));
    END;

    LOCAL PROCEDURE LookupContact@122(CustomerNo@1000 : Code[20];ContactNo@1003 : Code[20];VAR Contact@1001 : Record 5050);
    VAR
      ContactBusinessRelation@1002 : Record 5054;
      FilterByContactCompany@1004 : Boolean;
    BEGIN
      IF ContactBusinessRelation.FindByRelation(ContactBusinessRelation."Link to Table"::Customer,CustomerNo) THEN
        Contact.SETRANGE("Company No.",ContactBusinessRelation."Contact No.")
      ELSE
        IF "Document Type" = "Document Type"::Quote THEN
          FilterByContactCompany := TRUE
        ELSE
          Contact.SETRANGE("Company No.",'');
      IF ContactNo <> '' THEN
        IF Contact.GET(ContactNo) THEN
          IF FilterByContactCompany THEN
            Contact.SETRANGE("Company No.",Contact."Company No.");
    END;

    PROCEDURE SetAllowSelectNoSeries@100();
    BEGIN
      SelectNoSeriesAllowed := TRUE;
    END;

    LOCAL PROCEDURE SetDefaultSalesperson@124();
    VAR
      UserSetup@1000 : Record 91;
    BEGIN
      IF NOT UserSetup.GET(USERID) THEN
        EXIT;

      IF UserSetup."Salespers./Purch. Code" <> '' THEN
        IF Salesperson.GET(UserSetup."Salespers./Purch. Code") THEN
          IF NOT Salesperson.VerifySalesPersonPurchaserPrivacyBlocked(Salesperson) THEN
            VALIDATE("Salesperson Code",UserSetup."Salespers./Purch. Code");
    END;

    PROCEDURE SelltoCustomerNoOnAfterValidate@125(VAR SalesHeader@1000 : Record 36;VAR xSalesHeader@1001 : Record 36);
    BEGIN
      IF SalesHeader.GETFILTER("Sell-to Customer No.") = xSalesHeader."Sell-to Customer No." THEN
        IF SalesHeader."Sell-to Customer No." <> xSalesHeader."Sell-to Customer No." THEN
          SalesHeader.SETRANGE("Sell-to Customer No.");
    END;

    PROCEDURE SelectSalesHeaderCustomerTemplate@127() : Code[10];
    VAR
      Contact@1001 : Record 5050;
    BEGIN
      Contact.GET("Sell-to Contact No.");
      IF (Contact.Type = Contact.Type::Person) AND (Contact."Company No." <> '')THEN
        Contact.GET(Contact."Company No.");
      IF NOT Contact.ContactToCustBusinessRelationExist THEN
        IF CONFIRM(SelectCustomerTemplateQst,FALSE) THEN BEGIN
          COMMIT;
          EXIT(Contact.LookupCustomerTemplate);
        END;
    END;

    LOCAL PROCEDURE ModifyBillToCustomerAddress@194();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Ignore Updated Addresses" THEN
        EXIT;
      IF IsCreditDocType THEN
        EXIT;
      IF ("Bill-to Customer No." <> "Sell-to Customer No.") AND Customer.GET("Bill-to Customer No.") THEN
        IF HasBillToAddress AND HasDifferentBillToAddress(Customer) THEN
          ShowModifyAddressNotification(GetModifyBillToCustomerAddressNotificationId,
            ModifyCustomerAddressNotificationLbl,ModifyCustomerAddressNotificationMsg,
            'CopyBillToCustomerAddressFieldsFromSalesDocument',"Bill-to Customer No.",
            "Bill-to Name",FIELDNAME("Bill-to Customer No."));
    END;

    LOCAL PROCEDURE ModifyCustomerAddress@150();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Ignore Updated Addresses" THEN
        EXIT;
      IF IsCreditDocType THEN
        EXIT;
      IF Customer.GET("Sell-to Customer No.") AND HasSellToAddress AND HasDifferentSellToAddress(Customer) THEN
        ShowModifyAddressNotification(GetModifyCustomerAddressNotificationId,
          ModifyCustomerAddressNotificationLbl,ModifyCustomerAddressNotificationMsg,
          'CopySellToCustomerAddressFieldsFromSalesDocument',"Sell-to Customer No.",
          "Sell-to Customer Name",FIELDNAME("Sell-to Customer No."));
    END;

    LOCAL PROCEDURE ShowModifyAddressNotification@157(NotificationID@1001 : GUID;NotificationLbl@1004 : Text;NotificationMsg@1005 : Text;NotificationFunctionTok@1006 : Text;CustomerNumber@1002 : Code[20];CustomerName@1003 : Text[50];CustomerNumberFieldName@1008 : Text);
    VAR
      MyNotifications@1009 : Record 1518;
      NotificationLifecycleMgt@1007 : Codeunit 1511;
      ModifyCustomerAddressNotification@1000 : Notification;
    BEGIN
      IF NOT MyNotifications.IsEnabled(NotificationID) THEN
        EXIT;

      ModifyCustomerAddressNotification.ID := NotificationID;
      ModifyCustomerAddressNotification.MESSAGE := STRSUBSTNO(NotificationMsg,CustomerName);
      ModifyCustomerAddressNotification.ADDACTION(NotificationLbl,CODEUNIT::"Document Notifications",NotificationFunctionTok);
      ModifyCustomerAddressNotification.ADDACTION(
        DontShowAgainActionLbl,CODEUNIT::"Document Notifications",'HideNotificationForCurrentUser');
      ModifyCustomerAddressNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      ModifyCustomerAddressNotification.SETDATA(FIELDNAME("Document Type"),FORMAT("Document Type"));
      ModifyCustomerAddressNotification.SETDATA(FIELDNAME("No."),"No.");
      ModifyCustomerAddressNotification.SETDATA(CustomerNumberFieldName,CustomerNumber);
      NotificationLifecycleMgt.SendNotification(ModifyCustomerAddressNotification,RECORDID);
    END;

    PROCEDURE RecallModifyAddressNotification@148(NotificationID@1001 : GUID);
    VAR
      MyNotifications@1002 : Record 1518;
      ModifyCustomerAddressNotification@1000 : Notification;
    BEGIN
      IF IsCreditDocType OR (NOT MyNotifications.IsEnabled(NotificationID)) THEN
        EXIT;

      ModifyCustomerAddressNotification.ID := NotificationID;
      ModifyCustomerAddressNotification.RECALL;
    END;

    PROCEDURE GetModifyCustomerAddressNotificationId@193() : GUID;
    BEGIN
      EXIT('509FD112-31EC-4CDC-AEBF-19B8FEBA526F');
    END;

    PROCEDURE GetModifyBillToCustomerAddressNotificationId@191() : GUID;
    BEGIN
      EXIT('2096CE78-6A74-48DB-BC9A-CD5C21504FC1');
    END;

    PROCEDURE SetModifyCustomerAddressNotificationDefaultState@89();
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      MyNotifications.InsertDefault(GetModifyCustomerAddressNotificationId,
        ModifySellToCustomerAddressNotificationNameTxt,ModifySellToCustomerAddressNotificationDescriptionTxt,TRUE);
    END;

    PROCEDURE SetModifyBillToCustomerAddressNotificationDefaultState@91();
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      MyNotifications.InsertDefault(GetModifyBillToCustomerAddressNotificationId,
        ModifyBillToCustomerAddressNotificationNameTxt,ModifyBillToCustomerAddressNotificationDescriptionTxt,TRUE);
    END;

    PROCEDURE DontNotifyCurrentUserAgain@141(NotificationID@1001 : GUID);
    VAR
      MyNotifications@1000 : Record 1518;
    BEGIN
      IF NOT MyNotifications.Disable(NotificationID) THEN
        CASE NotificationID OF
          GetModifyCustomerAddressNotificationId:
            MyNotifications.InsertDefault(NotificationID,ModifySellToCustomerAddressNotificationNameTxt,
              ModifySellToCustomerAddressNotificationDescriptionTxt,FALSE);
          GetModifyBillToCustomerAddressNotificationId:
            MyNotifications.InsertDefault(NotificationID,ModifyBillToCustomerAddressNotificationNameTxt,
              ModifyBillToCustomerAddressNotificationDescriptionTxt,FALSE);
        END;
    END;

    LOCAL PROCEDURE HasDifferentSellToAddress@195(Customer@1000 : Record 18) : Boolean;
    BEGIN
      EXIT(("Sell-to Address" <> Customer.Address) OR
        ("Sell-to Address 2" <> Customer."Address 2") OR
        ("Sell-to City" <> Customer.City) OR
        ("Sell-to Country/Region Code" <> Customer."Country/Region Code") OR
        ("Sell-to County" <> Customer.County) OR
        ("Sell-to Post Code" <> Customer."Post Code") OR
        ("Sell-to Contact" <> Customer.Contact));
    END;

    LOCAL PROCEDURE HasDifferentBillToAddress@192(Customer@1000 : Record 18) : Boolean;
    BEGIN
      EXIT(("Bill-to Address" <> Customer.Address) OR
        ("Bill-to Address 2" <> Customer."Address 2") OR
        ("Bill-to City" <> Customer.City) OR
        ("Bill-to Country/Region Code" <> Customer."Country/Region Code") OR
        ("Bill-to County" <> Customer.County) OR
        ("Bill-to Post Code" <> Customer."Post Code") OR
        ("Bill-to Contact" <> Customer.Contact));
    END;

    [External]
    PROCEDURE ShowInteractionLogEntries@131();
    VAR
      InteractionLogEntry@1000 : Record 5065;
    BEGIN
      IF "Bill-to Contact No." <> '' THEN
        InteractionLogEntry.SETRANGE("Contact No.","Bill-to Contact No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          InteractionLogEntry.SETRANGE("Document Type",InteractionLogEntry."Document Type"::"Sales Ord. Cnfrmn.");
        "Document Type"::Quote:
          InteractionLogEntry.SETRANGE("Document Type",InteractionLogEntry."Document Type"::"Sales Qte.");
      END;

      InteractionLogEntry.SETRANGE("Document No.","No.");
      PAGE.RUN(PAGE::"Interaction Log Entries",InteractionLogEntry);
    END;

    [External]
    PROCEDURE GetBillToNo@132() : Code[20];
    BEGIN
      IF ("Document Type" = "Document Type"::Quote) AND
         ("Bill-to Customer No." = '') AND ("Bill-to Contact No." <> '') AND
         ("Bill-to Customer Template Code" <> '')
      THEN
        EXIT("Bill-to Contact No.");
      EXIT("Bill-to Customer No.");
    END;

    [External]
    PROCEDURE GetCurrencySymbol@146() : Text[10];
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      Currency@1001 : Record 4;
    BEGIN
      IF GeneralLedgerSetup.GET THEN
        IF ("Currency Code" = '') OR ("Currency Code" = GeneralLedgerSetup."LCY Code") THEN
          EXIT(GeneralLedgerSetup.GetCurrencySymbol);

      IF Currency.GET("Currency Code") THEN
        EXIT(Currency.GetCurrencySymbol);

      EXIT("Currency Code");
    END;

    LOCAL PROCEDURE SetSalespersonCode@433(SalesPersonCodeToCheck@1000 : Code[20];VAR SalesPersonCodeToAssign@1001 : Code[20]);
    BEGIN
      IF SalesPersonCodeToCheck <> '' THEN BEGIN
        IF Salesperson.GET(SalesPersonCodeToCheck) THEN
          IF Salesperson.VerifySalesPersonPurchaserPrivacyBlocked(Salesperson) THEN
            SalesPersonCodeToAssign := ''
          ELSE
            SalesPersonCodeToAssign := SalesPersonCodeToCheck;
      END ELSE
        SalesPersonCodeToAssign := '';
    END;

    PROCEDURE ValidateSalesPersonOnSalesHeader@218(SalesHeader2@1000 : Record 36;IsTransaction@1001 : Boolean;IsPostAction@1002 : Boolean);
    BEGIN
      IF SalesHeader2."Salesperson Code" <> '' THEN
        IF Salesperson.GET(SalesHeader2."Salesperson Code") THEN
          IF Salesperson.VerifySalesPersonPurchaserPrivacyBlocked(Salesperson) THEN BEGIN
            IF IsTransaction THEN
              ERROR(Salesperson.GetPrivacyBlockedTransactionText(Salesperson,IsPostAction,TRUE));
            IF NOT IsTransaction THEN
              ERROR(Salesperson.GetPrivacyBlockedGenericText(Salesperson,TRUE));
          END;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitRecord@21(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitNoSeries@35(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTestNoSeries@136(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdateShipToAddress@137(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnUpdateSalesLineByChangedFieldName@139(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ChangedFieldName@1002 : Text[100]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR SalesHeader@1000 : Record 36;FieldNo@1001 : Integer;VAR TableID@1003 : ARRAY [10] OF Integer;VAR No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateSalesLine@147(VAR SalesLine@1000 : Record 37;VAR TempSalesLine@1001 : TEMPORARY Record 37);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesQuoteAccepted@143(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterChangePricesIncludingVAT@187(VAR SalesHeader@1000 : Record 36);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSendSalesHeader@144(VAR SalesHeader@1000 : Record 36;ShowDialog@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetFieldsBilltoCustomer@151(VAR SalesHeader@1000 : Record 36;Customer@1001 : Record 18);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransferExtendedTextForSalesLineRecreation@145(VAR SalesLine@1000 : Record 37);
    BEGIN
    END;

    LOCAL PROCEDURE ShouldLookForCustomerByName@181(CustomerNo@1000 : Code[20]) : Boolean;
    VAR
      Customer@1001 : Record 18;
    BEGIN
      IF CustomerNo = '' THEN
        EXIT(TRUE);

      IF NOT Customer.GET(CustomerNo) THEN
        EXIT(TRUE);

      EXIT(NOT Customer."Disable Search by Name");
    END;

    BEGIN
    END.
  }
}

OBJECT Report 595 Adjust Exchange Rates
{
  OBJECT-PROPERTIES
  {
    Date=23/03/20;
    Time=12:59:41;
    Modified=Yes;
    Version List=NAVW111.00.00.31747,MAR;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd,
                TableData 86=rimd,
                TableData 254=rimd,
                TableData 379=rimd,
                TableData 380=rimd;
    CaptionML=[ENU=Adjust Exchange Rates;
               ENG=Adjust Exchange Rates];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF EndDateReq = 0D THEN
                    EndDate := DMY2DATE(31,12,9999)
                  ELSE
                    EndDate := EndDateReq;
                  IF PostingDocNo = '' THEN
                    ERROR(Text000,GenJnlLine.FIELDCAPTION("Document No."));
                  IF NOT AdjCustVendBank AND AdjGLAcc THEN
                    IF NOT CONFIRM(Text001 + Text004,FALSE) THEN
                      ERROR(Text005);

                  SourceCodeSetup.GET;

                  IF ExchRateAdjReg.FINDLAST THEN
                    ExchRateAdjReg.INIT;

                  GLSetup.GET;

                  IF AdjGLAcc THEN BEGIN
                    GLSetup.TESTFIELD("Additional Reporting Currency");

                    Currency3.GET(GLSetup."Additional Reporting Currency");
                    "G/L Account".GET(Currency3.GetRealizedGLGainsAccount);
                    "G/L Account".TESTFIELD("Exchange Rate Adjustment","G/L Account"."Exchange Rate Adjustment"::"No Adjustment");

                    "G/L Account".GET(Currency3.GetRealizedGLLossesAccount);
                    "G/L Account".TESTFIELD("Exchange Rate Adjustment","G/L Account"."Exchange Rate Adjustment"::"No Adjustment");

                    WITH VATPostingSetup2 DO
                      IF FIND('-') THEN
                        REPEAT
                          IF "VAT Calculation Type" <> "VAT Calculation Type"::"Sales Tax" THEN BEGIN
                            CheckExchRateAdjustment(
                              "Purchase VAT Account",TABLECAPTION,FIELDCAPTION("Purchase VAT Account"));
                            CheckExchRateAdjustment(
                              "Reverse Chrg. VAT Acc.",TABLECAPTION,FIELDCAPTION("Reverse Chrg. VAT Acc."));
                            CheckExchRateAdjustment(
                              "Purch. VAT Unreal. Account",TABLECAPTION,FIELDCAPTION("Purch. VAT Unreal. Account"));
                            CheckExchRateAdjustment(
                              "Reverse Chrg. VAT Unreal. Acc.",TABLECAPTION,FIELDCAPTION("Reverse Chrg. VAT Unreal. Acc."));
                            CheckExchRateAdjustment(
                              "Sales VAT Account",TABLECAPTION,FIELDCAPTION("Sales VAT Account"));
                            CheckExchRateAdjustment(
                              "Sales VAT Unreal. Account",TABLECAPTION,FIELDCAPTION("Sales VAT Unreal. Account"));
                          END;
                        UNTIL NEXT = 0;

                    WITH TaxJurisdiction2 DO
                      IF FIND('-') THEN
                        REPEAT
                          CheckExchRateAdjustment(
                            "Tax Account (Purchases)",TABLECAPTION,FIELDCAPTION("Tax Account (Purchases)"));
                          CheckExchRateAdjustment(
                            "Reverse Charge (Purchases)",TABLECAPTION,FIELDCAPTION("Reverse Charge (Purchases)"));
                          CheckExchRateAdjustment(
                            "Unreal. Tax Acc. (Purchases)",TABLECAPTION,FIELDCAPTION("Unreal. Tax Acc. (Purchases)"));
                          CheckExchRateAdjustment(
                            "Unreal. Rev. Charge (Purch.)",TABLECAPTION,FIELDCAPTION("Unreal. Rev. Charge (Purch.)"));
                          CheckExchRateAdjustment(
                            "Tax Account (Sales)",TABLECAPTION,FIELDCAPTION("Tax Account (Sales)"));
                          CheckExchRateAdjustment(
                            "Unreal. Tax Acc. (Sales)",TABLECAPTION,FIELDCAPTION("Unreal. Tax Acc. (Sales)"));
                        UNTIL NEXT = 0;

                    AddCurrCurrencyFactor :=
                      CurrExchRate2.ExchangeRateAdjmt(PostingDate,GLSetup."Additional Reporting Currency");
                  END;
                END;

    OnPostReport=BEGIN
                   UpdateAnalysisView.UpdateAll(0,TRUE);

                   IF TotalCustomersAdjusted + TotalVendorsAdjusted + TotalBankAccountsAdjusted + TotalGLAccountsAdjusted < 1 THEN
                     MESSAGE(NothingToAdjustMsg)
                   ELSE
                     MESSAGE(RatesAdjustedMsg);
                 END;

  }
  DATASET
  {
    { 4146;    ;DataItem;                    ;
               DataItemTable=Table4;
               DataItemTableView=SORTING(Code);
               OnPreDataItem=BEGIN
                               CheckPostingDate;
                               IF NOT AdjCustVendBank THEN
                                 CurrReport.BREAK;

                               Window.OPEN(
                                 Text006 +
                                 Text007 +
                                 Text008 +
                                 Text009 +
                                 Text010);

                               CustNoTotal := Customer.COUNT;
                               VendNoTotal := Vendor.COUNT;
                               COPYFILTER(Code,"Bank Account"."Currency Code");
                               FILTERGROUP(2);
                               "Bank Account".SETFILTER("Currency Code",'<>%1','');
                               FILTERGROUP(0);
                               BankAccNoTotal := "Bank Account".COUNT;
                               "Bank Account".RESET;
                             END;

               OnAfterGetRecord=BEGIN
                                  "Last Date Adjusted" := PostingDate;
                                  MODIFY;

                                  "Currency Factor" :=
                                    CurrExchRate.ExchangeRateAdjmt(PostingDate,Code);

                                  Currency2 := Currency;
                                  Currency2.INSERT;
                                END;

               OnPostDataItem=BEGIN
                                IF (Code = '') AND AdjCustVendBank THEN
                                  ERROR(Text011);
                              END;

               ReqFilterFields=Code }

    { 4558;1   ;DataItem;                    ;
               DataItemTable=Table270;
               DataItemTableView=SORTING(Bank Acc. Posting Group);
               OnPreDataItem=BEGIN
                               SETRANGE("Date Filter",StartDate,EndDate);
                               TempDimBuf2.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  TempEntryNoAmountBuf.DELETEALL;
                                  BankAccNo := BankAccNo + 1;
                                  Window.UPDATE(1,ROUND(BankAccNo / BankAccNoTotal * 10000,1));

                                  TempDimSetEntry.RESET;
                                  TempDimSetEntry.DELETEALL;
                                  TempDimBuf.RESET;
                                  TempDimBuf.DELETEALL;

                                  CALCFIELDS("Balance at Date","Balance at Date (LCY)");
                                  AdjBase := "Balance at Date";
                                  AdjBaseLCY := "Balance at Date (LCY)";
                                  AdjAmount :=
                                    ROUND(
                                      CurrExchRate.ExchangeAmtFCYToLCYAdjmt(
                                        PostingDate,Currency.Code,"Balance at Date",Currency."Currency Factor")) -
                                    "Balance at Date (LCY)";

                                  IF AdjAmount <> 0 THEN BEGIN
                                    GenJnlLine.VALIDATE("Posting Date",PostingDate);
                                    GenJnlLine."Document No." := PostingDocNo;
                                    GenJnlLine."Account Type" := GenJnlLine."Account Type"::"Bank Account";
                                    GenJnlLine.VALIDATE("Account No.","No.");
                                    GenJnlLine.Description := PADSTR(STRSUBSTNO(PostingDescription,Currency.Code,AdjBase),MAXSTRLEN(GenJnlLine.Description));
                                    GenJnlLine.VALIDATE(Amount,0);
                                    GenJnlLine."Amount (LCY)" := AdjAmount;
                                    GenJnlLine."Source Currency Code" := Currency.Code;
                                    IF Currency.Code = GLSetup."Additional Reporting Currency" THEN
                                      GenJnlLine."Source Currency Amount" := 0;
                                    GenJnlLine."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
                                    GenJnlLine."System-Created Entry" := TRUE;
                                    GetJnlLineDefDim(GenJnlLine,TempDimSetEntry);
                                    CopyDimSetEntryToDimBuf(TempDimSetEntry,TempDimBuf);
                                    PostGenJnlLine(GenJnlLine,TempDimSetEntry);
                                    WITH TempEntryNoAmountBuf DO BEGIN
                                      INIT;
                                      "Business Unit Code" := '';
                                      "Entry No." := "Entry No." + 1;
                                      Amount := AdjAmount;
                                      Amount2 := AdjBase;
                                      INSERT;
                                    END;
                                    TempDimBuf2.INIT;
                                    TempDimBuf2."Table ID" := TempEntryNoAmountBuf."Entry No.";
                                    TempDimBuf2."Entry No." := GetDimCombID(TempDimBuf);
                                    TempDimBuf2.INSERT;
                                    TotalAdjBase := TotalAdjBase + AdjBase;
                                    TotalAdjBaseLCY := TotalAdjBaseLCY + AdjBaseLCY;
                                    TotalAdjAmount := TotalAdjAmount + AdjAmount;
                                    Window.UPDATE(4,TotalAdjAmount);

                                    IF TempEntryNoAmountBuf.Amount <> 0 THEN BEGIN
                                      TempDimSetEntry.RESET;
                                      TempDimSetEntry.DELETEALL;
                                      TempDimBuf.RESET;
                                      TempDimBuf.DELETEALL;
                                      TempDimBuf2.SETRANGE("Table ID",TempEntryNoAmountBuf."Entry No.");
                                      IF TempDimBuf2.FINDFIRST THEN
                                        DimBufMgt.GetDimensions(TempDimBuf2."Entry No.",TempDimBuf);
                                      DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
                                      IF TempEntryNoAmountBuf.Amount > 0 THEN
                                        PostAdjmt(
                                          Currency.GetRealizedGainsAccount,-TempEntryNoAmountBuf.Amount,TempEntryNoAmountBuf.Amount2,
                                          "Currency Code",TempDimSetEntry,PostingDate,'')
                                      ELSE
                                        PostAdjmt(
                                          Currency.GetRealizedLossesAccount,-TempEntryNoAmountBuf.Amount,TempEntryNoAmountBuf.Amount2,
                                          "Currency Code",TempDimSetEntry,PostingDate,'');
                                    END;
                                  END;
                                  TempDimBuf2.DELETEALL;
                                END;

               DataItemLink=Currency Code=FIELD(Code) }

    { 3273;2   ;DataItem;BankAccountGroupTotal;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnAfterGetRecord=VAR
                                  BankAccount@1102601000 : Record 270;
                                  GroupTotal@1102601001 : Boolean;
                                BEGIN
                                  BankAccount.COPY("Bank Account");
                                  IF BankAccount.NEXT = 1 THEN BEGIN
                                    IF BankAccount."Bank Acc. Posting Group" <> "Bank Account"."Bank Acc. Posting Group" THEN
                                      GroupTotal := TRUE;
                                  END ELSE
                                    GroupTotal := TRUE;

                                  IF GroupTotal THEN
                                    IF TotalAdjAmount <> 0 THEN BEGIN
                                      AdjExchRateBufferUpdate(
                                        "Bank Account"."Currency Code","Bank Account"."Bank Acc. Posting Group",
                                        TotalAdjBase,TotalAdjBaseLCY,TotalAdjAmount,0,0,0,PostingDate,'');
                                      InsertExchRateAdjmtReg(3,"Bank Account"."Bank Acc. Posting Group","Bank Account"."Currency Code");
                                      TotalBankAccountsAdjusted += 1;
                                      AdjExchRateBuffer.RESET;
                                      AdjExchRateBuffer.DELETEALL;
                                      TotalAdjBase := 0;
                                      TotalAdjBaseLCY := 0;
                                      TotalAdjAmount := 0;
                                    END;
                                END;
                                 }

    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF NOT AdjCustVendBank THEN
                                 CurrReport.BREAK;

                               DtldCustLedgEntry.LOCKTABLE;
                               CustLedgerEntry.LOCKTABLE;

                               CustNo := 0;

                               IF DtldCustLedgEntry.FIND('+') THEN
                                 NewEntryNo := DtldCustLedgEntry."Entry No." + 1
                               ELSE
                                 NewEntryNo := 1;

                               CLEAR(DimMgt);
                               TempEntryNoAmountBuf.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  CustNo := CustNo + 1;
                                  Window.UPDATE(2,ROUND(CustNo / CustNoTotal * 10000,1));

                                  TempCustLedgerEntry.DELETEALL;

                                  Currency.COPYFILTER(Code,CustLedgerEntry."Currency Code");
                                  CustLedgerEntry.FILTERGROUP(2);
                                  CustLedgerEntry.SETFILTER("Currency Code",'<>%1','');
                                  CustLedgerEntry.FILTERGROUP(0);

                                  DtldCustLedgEntry.RESET;
                                  DtldCustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date","Entry Type");
                                  DtldCustLedgEntry.SETRANGE("Customer No.","No.");
                                  DtldCustLedgEntry.SETRANGE("Posting Date",CALCDATE('<+1D>',EndDate),DMY2DATE(31,12,9999));
                                  IF DtldCustLedgEntry.FIND('-') THEN
                                    REPEAT
                                      CustLedgerEntry."Entry No." := DtldCustLedgEntry."Cust. Ledger Entry No.";
                                      IF CustLedgerEntry.FIND('=') THEN
                                        IF (CustLedgerEntry."Posting Date" >= StartDate) AND
                                           (CustLedgerEntry."Posting Date" <= EndDate)
                                        THEN BEGIN
                                          TempCustLedgerEntry."Entry No." := CustLedgerEntry."Entry No.";
                                          IF TempCustLedgerEntry.INSERT THEN;
                                        END;
                                    UNTIL DtldCustLedgEntry.NEXT = 0;

                                  CustLedgerEntry.SETCURRENTKEY("Customer No.",Open);
                                  CustLedgerEntry.SETRANGE("Customer No.","No.");
                                  CustLedgerEntry.SETRANGE(Open,TRUE);
                                  CustLedgerEntry.SETRANGE("Posting Date",0D,EndDate);
                                  IF CustLedgerEntry.FIND('-') THEN
                                    REPEAT
                                      TempCustLedgerEntry."Entry No." := CustLedgerEntry."Entry No.";
                                      IF TempCustLedgerEntry.INSERT THEN;
                                    UNTIL CustLedgerEntry.NEXT = 0;
                                  CustLedgerEntry.RESET;
                                END;

               OnPostDataItem=BEGIN
                                IF CustNo <> 0 THEN
                                  HandlePostAdjmt(1); // Customer
                              END;
                               }

    { 3687;1   ;DataItem;CustomerLedgerEntryLoop;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               IF NOT TempCustLedgerEntry.FIND('-') THEN
                                 CurrReport.BREAK;
                               FirstEntry := TRUE;
                             END;

               OnAfterGetRecord=BEGIN
                                  TempDtldCustLedgEntrySums.DELETEALL;

                                  IF FirstEntry THEN BEGIN
                                    TempCustLedgerEntry.FIND('-');
                                    FirstEntry := FALSE
                                  END ELSE
                                    IF TempCustLedgerEntry.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  CustLedgerEntry.GET(TempCustLedgerEntry."Entry No.");
                                  AdjustCustomerLedgerEntry(CustLedgerEntry,PostingDate);
                                END;
                                 }

    { 6942;2   ;DataItem;                    ;
               DataItemTable=Table379;
               DataItemTableView=SORTING(Cust. Ledger Entry No.,Posting Date);
               OnPreDataItem=BEGIN
                               SETCURRENTKEY("Cust. Ledger Entry No.");
                               SETRANGE("Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
                               SETFILTER("Posting Date",'%1..',CALCDATE('<+1D>',PostingDate));
                             END;

               OnAfterGetRecord=BEGIN
                                  AdjustCustomerLedgerEntry(CustLedgerEntry,"Posting Date");
                                END;
                                 }

    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF NOT AdjCustVendBank THEN
                                 CurrReport.BREAK;

                               DtldVendLedgEntry.LOCKTABLE;
                               VendorLedgerEntry.LOCKTABLE;

                               VendNo := 0;
                               IF DtldVendLedgEntry.FIND('+') THEN
                                 NewEntryNo := DtldVendLedgEntry."Entry No." + 1
                               ELSE
                                 NewEntryNo := 1;

                               CLEAR(DimMgt);
                               TempEntryNoAmountBuf.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  VendNo := VendNo + 1;
                                  Window.UPDATE(3,ROUND(VendNo / VendNoTotal * 10000,1));

                                  TempVendorLedgerEntry.DELETEALL;

                                  Currency.COPYFILTER(Code,VendorLedgerEntry."Currency Code");
                                  VendorLedgerEntry.FILTERGROUP(2);
                                  VendorLedgerEntry.SETFILTER("Currency Code",'<>%1','');
                                  VendorLedgerEntry.FILTERGROUP(0);

                                  DtldVendLedgEntry.RESET;
                                  DtldVendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date","Entry Type");
                                  DtldVendLedgEntry.SETRANGE("Vendor No.","No.");
                                  DtldVendLedgEntry.SETRANGE("Posting Date",CALCDATE('<+1D>',EndDate),DMY2DATE(31,12,9999));
                                  IF DtldVendLedgEntry.FIND('-') THEN
                                    REPEAT
                                      VendorLedgerEntry."Entry No." := DtldVendLedgEntry."Vendor Ledger Entry No.";
                                      IF VendorLedgerEntry.FIND('=') THEN
                                        IF (VendorLedgerEntry."Posting Date" >= StartDate) AND
                                           (VendorLedgerEntry."Posting Date" <= EndDate)
                                        THEN BEGIN
                                          TempVendorLedgerEntry."Entry No." := VendorLedgerEntry."Entry No.";
                                          IF TempVendorLedgerEntry.INSERT THEN;
                                        END;
                                    UNTIL DtldVendLedgEntry.NEXT = 0;

                                  VendorLedgerEntry.SETCURRENTKEY("Vendor No.",Open);
                                  VendorLedgerEntry.SETRANGE("Vendor No.","No.");
                                  VendorLedgerEntry.SETRANGE(Open,TRUE);
                                  VendorLedgerEntry.SETRANGE("Posting Date",0D,EndDate);
                                  IF VendorLedgerEntry.FIND('-') THEN
                                    REPEAT
                                      TempVendorLedgerEntry."Entry No." := VendorLedgerEntry."Entry No.";
                                      IF TempVendorLedgerEntry.INSERT THEN;
                                    UNTIL VendorLedgerEntry.NEXT = 0;
                                  VendorLedgerEntry.RESET;
                                END;

               OnPostDataItem=BEGIN
                                IF VendNo <> 0 THEN
                                  HandlePostAdjmt(2); // Vendor
                              END;
                               }

    { 1221;1   ;DataItem;VendorLedgerEntryLoop;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               IF NOT TempVendorLedgerEntry.FIND('-') THEN
                                 CurrReport.BREAK;
                               FirstEntry := TRUE;
                             END;

               OnAfterGetRecord=BEGIN
                                  TempDtldVendLedgEntrySums.DELETEALL;

                                  IF FirstEntry THEN BEGIN
                                    TempVendorLedgerEntry.FIND('-');
                                    FirstEntry := FALSE
                                  END ELSE
                                    IF TempVendorLedgerEntry.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  VendorLedgerEntry.GET(TempVendorLedgerEntry."Entry No.");
                                  AdjustVendorLedgerEntry(VendorLedgerEntry,PostingDate);
                                END;
                                 }

    { 2149;2   ;DataItem;                    ;
               DataItemTable=Table380;
               DataItemTableView=SORTING(Vendor Ledger Entry No.,Posting Date);
               OnPreDataItem=BEGIN
                               SETCURRENTKEY("Vendor Ledger Entry No.");
                               SETRANGE("Vendor Ledger Entry No.",VendorLedgerEntry."Entry No.");
                               SETFILTER("Posting Date",'%1..',CALCDATE('<+1D>',PostingDate));
                             END;

               OnAfterGetRecord=BEGIN
                                  AdjustVendorLedgerEntry(VendorLedgerEntry,"Posting Date");
                                END;
                                 }

    { 1756;    ;DataItem;                    ;
               DataItemTable=Table325;
               DataItemTableView=SORTING(VAT Bus. Posting Group,VAT Prod. Posting Group);
               OnPreDataItem=BEGIN
                               IF NOT AdjGLAcc OR
                                  (GLSetup."VAT Exchange Rate Adjustment" = GLSetup."VAT Exchange Rate Adjustment"::"No Adjustment")
                               THEN
                                 CurrReport.BREAK;

                               Window.OPEN(
                                 Text012 +
                                 Text013);

                               VATEntryNoTotal := VATEntry.COUNT;
                               IF NOT
                                  VATEntry.SETCURRENTKEY(
                                    Type,Closed,"VAT Bus. Posting Group","VAT Prod. Posting Group","Posting Date")
                               THEN
                                 VATEntry.SETCURRENTKEY(
                                   Type,Closed,"Tax Jurisdiction Code","Use Tax","Posting Date");
                               VATEntry.SETRANGE(Closed,FALSE);
                               VATEntry.SETRANGE("Posting Date",StartDate,EndDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  VATEntryNo := VATEntryNo + 1;
                                  Window.UPDATE(1,ROUND(VATEntryNo / VATEntryNoTotal * 10000,1));

                                  VATEntry.SETRANGE("VAT Bus. Posting Group","VAT Bus. Posting Group");
                                  VATEntry.SETRANGE("VAT Prod. Posting Group","VAT Prod. Posting Group");

                                  IF "VAT Calculation Type" <> "VAT Calculation Type"::"Sales Tax" THEN BEGIN
                                    AdjustVATEntries(VATEntry.Type::Purchase,FALSE);
                                    IF (VATEntry2.Amount <> 0) OR (VATEntry2."Additional-Currency Amount" <> 0) THEN BEGIN
                                      AdjustVATAccount(
                                        GetPurchAccount(FALSE),
                                        VATEntry2.Amount,VATEntry2."Additional-Currency Amount",
                                        VATEntryTotalBase.Amount,VATEntryTotalBase."Additional-Currency Amount");
                                      IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                                        AdjustVATAccount(
                                          GetRevChargeAccount(FALSE),
                                          -VATEntry2.Amount,-VATEntry2."Additional-Currency Amount",
                                          -VATEntryTotalBase.Amount,-VATEntryTotalBase."Additional-Currency Amount");
                                    END;
                                    IF (VATEntry2."Remaining Unrealized Amount" <> 0) OR
                                       (VATEntry2."Add.-Curr. Rem. Unreal. Amount" <> 0)
                                    THEN BEGIN
                                      TESTFIELD("Unrealized VAT Type");
                                      AdjustVATAccount(
                                        GetPurchAccount(TRUE),
                                        VATEntry2."Remaining Unrealized Amount",
                                        VATEntry2."Add.-Curr. Rem. Unreal. Amount",
                                        VATEntryTotalBase."Remaining Unrealized Amount",
                                        VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
                                      IF "VAT Calculation Type" = "VAT Calculation Type"::"Reverse Charge VAT" THEN
                                        AdjustVATAccount(
                                          GetRevChargeAccount(TRUE),
                                          -VATEntry2."Remaining Unrealized Amount",
                                          -VATEntry2."Add.-Curr. Rem. Unreal. Amount",
                                          -VATEntryTotalBase."Remaining Unrealized Amount",
                                          -VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
                                    END;

                                    AdjustVATEntries(VATEntry.Type::Sale,FALSE);
                                    IF (VATEntry2.Amount <> 0) OR (VATEntry2."Additional-Currency Amount" <> 0) THEN
                                      AdjustVATAccount(
                                        GetSalesAccount(FALSE),
                                        VATEntry2.Amount,VATEntry2."Additional-Currency Amount",
                                        VATEntryTotalBase.Amount,VATEntryTotalBase."Additional-Currency Amount");
                                    IF (VATEntry2."Remaining Unrealized Amount" <> 0) OR
                                       (VATEntry2."Add.-Curr. Rem. Unreal. Amount" <> 0)
                                    THEN BEGIN
                                      TESTFIELD("Unrealized VAT Type");
                                      AdjustVATAccount(
                                        GetSalesAccount(TRUE),
                                        VATEntry2."Remaining Unrealized Amount",
                                        VATEntry2."Add.-Curr. Rem. Unreal. Amount",
                                        VATEntryTotalBase."Remaining Unrealized Amount",
                                        VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
                                    END;
                                  END ELSE BEGIN
                                    IF TaxJurisdiction.FIND('-') THEN
                                      REPEAT
                                        VATEntry.SETRANGE("Tax Jurisdiction Code",TaxJurisdiction.Code);
                                        AdjustVATEntries(VATEntry.Type::Purchase,FALSE);
                                        AdjustPurchTax(FALSE);
                                        AdjustVATEntries(VATEntry.Type::Purchase,TRUE);
                                        AdjustPurchTax(TRUE);
                                        AdjustVATEntries(VATEntry.Type::Sale,FALSE);
                                        AdjustSalesTax;
                                      UNTIL TaxJurisdiction.NEXT = 0;
                                    VATEntry.SETRANGE("Tax Jurisdiction Code");
                                  END;
                                  CLEAR(VATEntryTotalBase);
                                END;
                                 }

    { 6710;    ;DataItem;                    ;
               DataItemTable=Table15;
               DataItemTableView=SORTING(No.)
                                 WHERE(Exchange Rate Adjustment=FILTER(Adjust Amount..Adjust Additional-Currency Amount));
               OnPreDataItem=BEGIN
                               IF NOT AdjGLAcc THEN
                                 CurrReport.BREAK;

                               Window.OPEN(
                                 Text014 +
                                 Text015);

                               GLAccNoTotal := COUNT;
                               SETRANGE("Date Filter",StartDate,EndDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  GLAccNo := GLAccNo + 1;
                                  Window.UPDATE(1,ROUND(GLAccNo / GLAccNoTotal * 10000,1));
                                  IF "Exchange Rate Adjustment" = "Exchange Rate Adjustment"::"No Adjustment" THEN
                                    CurrReport.SKIP;

                                  TempDimSetEntry.RESET;
                                  TempDimSetEntry.DELETEALL;
                                  CALCFIELDS("Net Change","Additional-Currency Net Change");
                                  CASE "Exchange Rate Adjustment" OF
                                    "Exchange Rate Adjustment"::"Adjust Amount":
                                      PostGLAccAdjmt(
                                        "No.","Exchange Rate Adjustment"::"Adjust Amount",
                                        ROUND(
                                          CurrExchRate2.ExchangeAmtFCYToLCYAdjmt(
                                            PostingDate,GLSetup."Additional Reporting Currency",
                                            "Additional-Currency Net Change",AddCurrCurrencyFactor) -
                                          "Net Change"),
                                        "Net Change",
                                        "Additional-Currency Net Change");
                                    "Exchange Rate Adjustment"::"Adjust Additional-Currency Amount":
                                      PostGLAccAdjmt(
                                        "No.","Exchange Rate Adjustment"::"Adjust Additional-Currency Amount",
                                        ROUND(
                                          CurrExchRate2.ExchangeAmtLCYToFCY(
                                            PostingDate,GLSetup."Additional Reporting Currency",
                                            "Net Change",AddCurrCurrencyFactor) -
                                          "Additional-Currency Net Change",
                                          Currency3."Amount Rounding Precision"),
                                        "Net Change",
                                        "Additional-Currency Net Change");
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF AdjGLAcc THEN BEGIN
                                  GenJnlLine."Document No." := PostingDocNo;
                                  GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
                                  GenJnlLine."Posting Date" := PostingDate;
                                  GenJnlLine."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";

                                  IF GLAmtTotal <> 0 THEN BEGIN
                                    IF GLAmtTotal < 0 THEN
                                      GenJnlLine."Account No." := Currency3.GetRealizedGLLossesAccount
                                    ELSE
                                      GenJnlLine."Account No." := Currency3.GetRealizedGLGainsAccount;
                                    GenJnlLine.Description :=
                                      STRSUBSTNO(
                                        PostingDescription,
                                        GLSetup."Additional Reporting Currency",
                                        GLAddCurrNetChangeTotal);
                                    GenJnlLine."Additional-Currency Posting" := GenJnlLine."Additional-Currency Posting"::"Amount Only";
                                    GenJnlLine."Currency Code" := '';
                                    GenJnlLine.Amount := -GLAmtTotal;
                                    GenJnlLine."Amount (LCY)" := -GLAmtTotal;
                                    GetJnlLineDefDim(GenJnlLine,TempDimSetEntry);
                                    PostGenJnlLine(GenJnlLine,TempDimSetEntry);
                                  END;
                                  IF GLAddCurrAmtTotal <> 0 THEN BEGIN
                                    IF GLAddCurrAmtTotal < 0 THEN
                                      GenJnlLine."Account No." := Currency3.GetRealizedGLLossesAccount
                                    ELSE
                                      GenJnlLine."Account No." := Currency3.GetRealizedGLGainsAccount;
                                    GenJnlLine.Description :=
                                      STRSUBSTNO(
                                        PostingDescription,'',
                                        GLNetChangeTotal);
                                    GenJnlLine."Additional-Currency Posting" := GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only";
                                    GenJnlLine."Currency Code" := GLSetup."Additional Reporting Currency";
                                    GenJnlLine.Amount := -GLAddCurrAmtTotal;
                                    GenJnlLine."Amount (LCY)" := 0;
                                    GetJnlLineDefDim(GenJnlLine,TempDimSetEntry);
                                    PostGenJnlLine(GenJnlLine,TempDimSetEntry);
                                  END;

                                  WITH ExchRateAdjReg DO BEGIN
                                    "No." := "No." + 1;
                                    "Creation Date" := PostingDate;
                                    "Account Type" := "Account Type"::"G/L Account";
                                    "Posting Group" := '';
                                    "Currency Code" := GLSetup."Additional Reporting Currency";
                                    "Currency Factor" := CurrExchRate2."Adjustment Exch. Rate Amount";
                                    "Adjusted Base" := 0;
                                    "Adjusted Base (LCY)" := GLNetChangeBase;
                                    "Adjusted Amt. (LCY)" := GLAmtTotal;
                                    "Adjusted Base (Add.-Curr.)" := GLAddCurrNetChangeBase;
                                    "Adjusted Amt. (Add.-Curr.)" := GLAddCurrAmtTotal;
                                    INSERT;
                                  END;

                                  TotalGLAccountsAdjusted += 1;
                                END;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF PostingDescription = '' THEN
                     PostingDescription := Text016;
                   IF NOT (AdjCustVendBank OR AdjGLAcc) THEN
                     AdjCustVendBank := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENG=Options] }

      { 21  ;2   ;Group     ;
                  CaptionML=[ENU=Adjustment Period;
                             ENG=Adjustment Period] }

      { 1   ;3   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[ENU=Starting Date;
                             ENG=Starting Date];
                  ToolTipML=[ENU=Specifies the beginning of the period for which entries are adjusted. This field is usually left blank, but you can enter a date.;
                             ENG=Specifies the beginning of the period for which entries are adjusted. This field is usually left blank, but you can enter a date.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=StartDate }

      { 2   ;3   ;Field     ;
                  Name=EndingDate;
                  CaptionML=[ENU=Ending Date;
                             ENG=Ending Date];
                  ToolTipML=[ENU=Specifies the last date for which entries are adjusted. This date is usually the same as the posting date in the Posting Date field.;
                             ENG=Specifies the last date for which entries are adjusted. This date is usually the same as the posting date in the Posting Date field.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EndDateReq;
                  OnValidate=BEGIN
                               PostingDate := EndDateReq;
                             END;
                              }

      { 3   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Description;
                             ENG=Posting Description];
                  ToolTipML=[ENU=Specifies text for the general ledger entries that are created by the batch job. The default text is Exchange Rate Adjmt. of %1 %2, in which %1 is replaced by the currency code and %2 is replaced by the currency amount that is adjusted. For example, Exchange Rate Adjmt. of DEM 38,000.;
                             ENG=Specifies text for the general ledger entries that are created by the batch job. The default text is Exchange Rate Adjmt. of %1 %2, in which %1 is replaced by the currency code and %2 is replaced by the currency amount that is adjusted. For example, Exchange Rate Adjmt. of DEM 38,000.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDescription }

      { 4   ;2   ;Field     ;
                  CaptionML=[ENU=Posting Date;
                             ENG=Posting Date];
                  ToolTipML=[ENU=Specifies the date on which the general ledger entries are posted. This date is usually the same as the ending date in the Ending Date field.;
                             ENG=Specifies the date on which the general ledger entries are posted. This date is usually the same as the ending date in the Ending Date field.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDate;
                  OnValidate=BEGIN
                               CheckPostingDate;
                             END;
                              }

      { 5   ;2   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=[ENU=Document No.;
                             ENG=Document No.];
                  ToolTipML=[ENU=Specifies the document number that will appear on the general ledger entries that are created by the batch job.;
                             ENG=Specifies the document number that will appear on the general ledger entries that are created by the batch job.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDocNo }

      { 7   ;2   ;Field     ;
                  CaptionML=[ENU=Adjust Customer, Vendor and Bank Accounts;
                             ENG=Adjust Customer, Vendor and Bank Accounts];
                  ToolTipML=[ENU=Specifies if you want to adjust customer, vendor, and bank accounts for currency fluctuations.;
                             ENG=Specifies if you want to adjust customer, vendor, and bank accounts for currency fluctuations.];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=AdjCustVendBank;
                  MultiLine=Yes }

      { 9   ;2   ;Field     ;
                  Name=AdjGLAcc;
                  CaptionML=[ENU=Adjust G/L Accounts for Add.-Reporting Currency;
                             ENG=Adjust G/L Accounts for Add.-Reporting Currency];
                  ToolTipML=[ENU=Specifies if you want to post in an additional reporting currency and adjust general ledger accounts for currency fluctuations between LCY and the additional reporting currency.;
                             ENG=Specifies if you want to post in an additional reporting currency and adjust general ledger accounts for currency fluctuations between LCY and the additional reporting currency.];
                  ApplicationArea=#Suite;
                  SourceExpr=AdjGLAcc;
                  MultiLine=Yes }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be entered.;ENG=%1 must be entered.';
      Text001@1001 : TextConst 'ENU="Do you want to adjust general ledger entries for currency fluctuations without adjusting customer, vendor and bank ledger entries? This may result in incorrect currency adjustments to payables, receivables and bank accounts.\\ ";ENG="Do you want to adjust general ledger entries for currency fluctuations without adjusting customer, vendor and bank ledger entries? This may result in incorrect currency adjustments to payables, receivables and bank accounts.\\ "';
      Text004@1004 : TextConst 'ENU=Do you wish to continue?;ENG=Do you wish to continue?';
      Text005@1005 : TextConst 'ENU=The adjustment of exchange rates has been canceled.;ENG=The adjustment of exchange rates has been cancelled.';
      Text006@1006 : TextConst 'ENU=Adjusting exchange rates...\\;ENG=Adjusting exchange rates...\\';
      Text007@1007 : TextConst 'ENU=Bank Account    @1@@@@@@@@@@@@@\\;ENG=Bank Account    @1@@@@@@@@@@@@@\\';
      Text008@1008 : TextConst 'ENU=Customer        @2@@@@@@@@@@@@@\;ENG=Customer        @2@@@@@@@@@@@@@\';
      Text009@1009 : TextConst 'ENU=Vendor          @3@@@@@@@@@@@@@\;ENG=Vendor          @3@@@@@@@@@@@@@\';
      Text010@1010 : TextConst 'ENU=Adjustment      #4#############;ENG=Adjustment      #4#############';
      Text011@1011 : TextConst 'ENU=No currencies have been found.;ENG=No currencies have been found.';
      Text012@1012 : TextConst 'ENU=Adjusting VAT Entries...\\;ENG=Adjusting VAT Entries...\\';
      Text013@1013 : TextConst 'ENU=VAT Entry    @1@@@@@@@@@@@@@;ENG=VAT Entry       @1@@@@@@@@@@@@@';
      Text014@1014 : TextConst 'ENU=Adjusting general ledger...\\;ENG=Adjusting general ledger...\\';
      Text015@1015 : TextConst 'ENU=G/L Account    @1@@@@@@@@@@@@@;ENG=G/L Account     @1@@@@@@@@@@@@@';
      Text016@1016 : TextConst '@@@="%1 = Currency Code, %2= Adjust Amount";ENU=Adjmt. of %1 %2, Ex.Rate Adjust.;ENG=Adjmt. of %1 %2, Ex.Rate Adjust.';
      Text017@1017 : TextConst 'ENU="%1 on %2 %3 must be %4. When this %2 is used in %5, the exchange rate adjustment is defined in the %6 field in the %7. %2 %3 is used in the %8 field in the %5. ";ENG="%1 on %2 %3 must be %4. When this %2 is used in %5, the exchange rate adjustment is defined in the %6 field in the %7. %2 %3 is used in the %8 field in the %5. "';
      DtldCustLedgEntry@1019 : Record 379;
      TempDtldCustLedgEntry@1003 : TEMPORARY Record 379;
      TempDtldCustLedgEntrySums@1096 : TEMPORARY Record 379;
      DtldVendLedgEntry@1020 : Record 380;
      TempDtldVendLedgEntry@1018 : TEMPORARY Record 380;
      TempDtldVendLedgEntrySums@1098 : TEMPORARY Record 380;
      ExchRateAdjReg@1021 : Record 86;
      CustPostingGr@1022 : Record 92;
      VendPostingGr@1023 : Record 93;
      GenJnlLine@1024 : Record 81;
      SourceCodeSetup@1025 : Record 242;
      AdjExchRateBuffer@1026 : TEMPORARY Record 331;
      AdjExchRateBuffer2@1027 : TEMPORARY Record 331;
      Currency2@1028 : TEMPORARY Record 4;
      Currency3@1029 : Record 4;
      CurrExchRate@1030 : Record 330;
      CurrExchRate2@1031 : Record 330;
      GLSetup@1032 : Record 98;
      VATEntry@1033 : Record 254;
      VATEntry2@1034 : Record 254;
      VATEntryTotalBase@1035 : Record 254;
      TaxJurisdiction@1036 : Record 320;
      VATPostingSetup2@1037 : Record 325;
      TaxJurisdiction2@1038 : Record 320;
      TempDimBuf@1049 : TEMPORARY Record 360;
      TempDimBuf2@1090 : TEMPORARY Record 360;
      TempDimSetEntry@1050 : TEMPORARY Record 480;
      TempEntryNoAmountBuf@1079 : TEMPORARY Record 386;
      CustLedgerEntry@1083 : Record 21;
      TempCustLedgerEntry@1082 : TEMPORARY Record 21;
      VendorLedgerEntry@1081 : Record 25;
      TempVendorLedgerEntry@1085 : TEMPORARY Record 25;
      GenJnlPostLine@1039 : Codeunit 12;
      UpdateAnalysisView@1002 : Codeunit 410;
      DimMgt@1077 : Codeunit 408;
      DimBufMgt@1078 : Codeunit 411;
      Window@1040 : Dialog;
      TotalAdjBase@1087 : Decimal;
      TotalAdjBaseLCY@1086 : Decimal;
      TotalAdjAmount@1041 : Decimal;
      GainsAmount@1042 : Decimal;
      LossesAmount@1043 : Decimal;
      PostingDate@1044 : Date;
      PostingDescription@1045 : Text[50];
      AdjBase@1046 : Decimal;
      AdjBaseLCY@1047 : Decimal;
      AdjAmount@1048 : Decimal;
      CustNo@1051 : Decimal;
      CustNoTotal@1052 : Decimal;
      VendNo@1053 : Decimal;
      VendNoTotal@1054 : Decimal;
      BankAccNo@1055 : Decimal;
      BankAccNoTotal@1056 : Decimal;
      GLAccNo@1057 : Decimal;
      GLAccNoTotal@1058 : Decimal;
      GLAmtTotal@1059 : Decimal;
      GLAddCurrAmtTotal@1060 : Decimal;
      GLNetChangeTotal@1061 : Decimal;
      GLAddCurrNetChangeTotal@1062 : Decimal;
      GLNetChangeBase@1063 : Decimal;
      GLAddCurrNetChangeBase@1064 : Decimal;
      PostingDocNo@1065 : Code[20];
      StartDate@1066 : Date;
      EndDate@1067 : Date;
      EndDateReq@1068 : Date;
      Correction@1069 : Boolean;
      HideUI@1097 : Boolean;
      OK@1070 : Boolean;
      AdjCustVendBank@1071 : Boolean;
      AdjGLAcc@1072 : Boolean;
      AddCurrCurrencyFactor@1073 : Decimal;
      VATEntryNoTotal@1074 : Decimal;
      VATEntryNo@1075 : Decimal;
      NewEntryNo@1076 : Integer;
      Text018@1080 : TextConst 'ENU=This posting date cannot be entered because it does not occur within the adjustment period. Reenter the posting date.;ENG=This posting date cannot be entered because it does not occur within the adjustment period. Reenter the posting date.';
      FirstEntry@1084 : Boolean;
      MaxAdjExchRateBufIndex@1089 : Integer;
      RatesAdjustedMsg@1088 : TextConst 'ENU=One or more currency exchange rates have been adjusted.;ENG=One or more currency exchange rates have been adjusted.';
      NothingToAdjustMsg@1091 : TextConst 'ENU=There is nothing to adjust.;ENG=There is nothing to adjust.';
      TotalBankAccountsAdjusted@1092 : Integer;
      TotalCustomersAdjusted@1093 : Integer;
      TotalVendorsAdjusted@1094 : Integer;
      TotalGLAccountsAdjusted@1095 : Integer;

    LOCAL PROCEDURE PostAdjmt@1(GLAccNo@1000 : Code[20];PostingAmount@1001 : Decimal;AdjBase2@1002 : Decimal;CurrencyCode2@1003 : Code[10];VAR DimSetEntry@1004 : Record 480;PostingDate2@1005 : Date;ICCode@1006 : Code[20]) TransactionNo : Integer;
    BEGIN
      WITH GenJnlLine DO
        IF PostingAmount <> 0 THEN BEGIN
          INIT;
          VALIDATE("Posting Date",PostingDate2);
          "Document No." := PostingDocNo;
          "Account Type" := "Account Type"::"G/L Account";
          VALIDATE("Account No.",GLAccNo);
          Description := PADSTR(STRSUBSTNO(PostingDescription,CurrencyCode2,AdjBase2),MAXSTRLEN(Description));
          VALIDATE(Amount,PostingAmount);
          "Source Currency Code" := CurrencyCode2;
          "IC Partner Code" := ICCode;
          IF CurrencyCode2 = GLSetup."Additional Reporting Currency" THEN
            "Source Currency Amount" := 0;
          "Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
          "System-Created Entry" := TRUE;
          TransactionNo := PostGenJnlLine(GenJnlLine,DimSetEntry);
        END;
    END;

    LOCAL PROCEDURE InsertExchRateAdjmtReg@2(AdjustAccType@1000 : Integer;PostingGrCode@1001 : Code[20];CurrencyCode@1002 : Code[10]);
    BEGIN
      IF Currency2.Code <> CurrencyCode THEN
        Currency2.GET(CurrencyCode);

      WITH ExchRateAdjReg DO BEGIN
        "No." := "No." + 1;
        "Creation Date" := PostingDate;
        "Account Type" := AdjustAccType;
        "Posting Group" := PostingGrCode;
        "Currency Code" := Currency2.Code;
        "Currency Factor" := Currency2."Currency Factor";
        "Adjusted Base" := AdjExchRateBuffer.AdjBase;
        "Adjusted Base (LCY)" := AdjExchRateBuffer.AdjBaseLCY;
        "Adjusted Amt. (LCY)" := AdjExchRateBuffer.AdjAmount;
        INSERT;
      END;
    END;

    [External]
    PROCEDURE InitializeRequest@3(NewStartDate@1000 : Date;NewEndDate@1001 : Date;NewPostingDescription@1002 : Text[50];NewPostingDate@1003 : Date);
    BEGIN
      StartDate := NewStartDate;
      EndDate := NewEndDate;
      PostingDescription := NewPostingDescription;
      PostingDate := NewPostingDate;
      IF EndDate = 0D THEN
        EndDateReq := DMY2DATE(31,12,9999)
      ELSE
        EndDateReq := EndDate;
    END;

    [External]
    PROCEDURE InitializeRequest2@25(NewStartDate@1000 : Date;NewEndDate@1001 : Date;NewPostingDescription@1002 : Text[50];NewPostingDate@1003 : Date;NewPostingDocNo@1004 : Code[20];NewAdjCustVendBank@1005 : Boolean;NewAdjGLAcc@1006 : Boolean);
    BEGIN
      InitializeRequest(NewStartDate,NewEndDate,NewPostingDescription,NewPostingDate);
      PostingDocNo := NewPostingDocNo;
      AdjCustVendBank := NewAdjCustVendBank;
      AdjGLAcc := NewAdjGLAcc;
    END;

    LOCAL PROCEDURE AdjExchRateBufferUpdate@15(CurrencyCode2@1000 : Code[10];PostingGroup2@1001 : Code[20];AdjBase2@1002 : Decimal;AdjBaseLCY2@1003 : Decimal;AdjAmount2@1004 : Decimal;GainsAmount2@1005 : Decimal;LossesAmount2@1006 : Decimal;DimEntryNo@1007 : Integer;Postingdate2@1008 : Date;ICCode@1009 : Code[20]) : Integer;
    BEGIN
      AdjExchRateBuffer.INIT;
      OK := AdjExchRateBuffer.GET(CurrencyCode2,PostingGroup2,DimEntryNo,Postingdate2,ICCode);

      AdjExchRateBuffer.AdjBase := AdjExchRateBuffer.AdjBase + AdjBase2;
      AdjExchRateBuffer.AdjBaseLCY := AdjExchRateBuffer.AdjBaseLCY + AdjBaseLCY2;
      AdjExchRateBuffer.AdjAmount := AdjExchRateBuffer.AdjAmount + AdjAmount2;
      AdjExchRateBuffer.TotalGainsAmount := AdjExchRateBuffer.TotalGainsAmount + GainsAmount2;
      AdjExchRateBuffer.TotalLossesAmount := AdjExchRateBuffer.TotalLossesAmount + LossesAmount2;

      IF NOT OK THEN BEGIN
        AdjExchRateBuffer."Currency Code" := CurrencyCode2;
        AdjExchRateBuffer."Posting Group" := PostingGroup2;
        AdjExchRateBuffer."Dimension Entry No." := DimEntryNo;
        AdjExchRateBuffer."Posting Date" := Postingdate2;
        AdjExchRateBuffer."IC Partner Code" := ICCode;
        MaxAdjExchRateBufIndex += 1;
        AdjExchRateBuffer.Index := MaxAdjExchRateBufIndex;
        AdjExchRateBuffer.INSERT;
      END ELSE
        AdjExchRateBuffer.MODIFY;

      EXIT(AdjExchRateBuffer.Index);
    END;

    LOCAL PROCEDURE HandlePostAdjmt@7(AdjustAccType@1000 : Integer);
    VAR
      GLEntry@1001 : Record 17;
      TempDtldCVLedgEntryBuf@1002 : TEMPORARY Record 383;
    BEGIN
      IF AdjExchRateBuffer.FIND('-') THEN BEGIN
        // Summarize per currency and dimension combination
        REPEAT
          AdjExchRateBuffer2.INIT;
          OK :=
            AdjExchRateBuffer2.GET(
              AdjExchRateBuffer."Currency Code",
              '',
              AdjExchRateBuffer."Dimension Entry No.",
              AdjExchRateBuffer."Posting Date",
              AdjExchRateBuffer."IC Partner Code");
          AdjExchRateBuffer2.AdjBase := AdjExchRateBuffer2.AdjBase + AdjExchRateBuffer.AdjBase;
          AdjExchRateBuffer2.TotalGainsAmount := AdjExchRateBuffer2.TotalGainsAmount + AdjExchRateBuffer.TotalGainsAmount;
          AdjExchRateBuffer2.TotalLossesAmount := AdjExchRateBuffer2.TotalLossesAmount + AdjExchRateBuffer.TotalLossesAmount;
          IF NOT OK THEN BEGIN
            AdjExchRateBuffer2."Currency Code" := AdjExchRateBuffer."Currency Code";
            AdjExchRateBuffer2."Dimension Entry No." := AdjExchRateBuffer."Dimension Entry No.";
            AdjExchRateBuffer2."Posting Date" := AdjExchRateBuffer."Posting Date";
            AdjExchRateBuffer2."IC Partner Code" := AdjExchRateBuffer."IC Partner Code";
            AdjExchRateBuffer2.INSERT;
          END ELSE
            AdjExchRateBuffer2.MODIFY;
        UNTIL AdjExchRateBuffer.NEXT = 0;

        // Post per posting group and per currency
        IF AdjExchRateBuffer2.FIND('-') THEN
          REPEAT
            WITH AdjExchRateBuffer DO BEGIN
              SETRANGE("Currency Code",AdjExchRateBuffer2."Currency Code");
              SETRANGE("Dimension Entry No.",AdjExchRateBuffer2."Dimension Entry No.");
              SETRANGE("Posting Date",AdjExchRateBuffer2."Posting Date");
              SETRANGE("IC Partner Code",AdjExchRateBuffer2."IC Partner Code");
              TempDimBuf.RESET;
              TempDimBuf.DELETEALL;
              TempDimSetEntry.RESET;
              TempDimSetEntry.DELETEALL;
              FIND('-');
              DimBufMgt.GetDimensions("Dimension Entry No.",TempDimBuf);
              DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
              REPEAT
                TempDtldCVLedgEntryBuf.INIT;
                TempDtldCVLedgEntryBuf."Entry No." := Index;
                IF AdjAmount <> 0 THEN
                  CASE AdjustAccType OF
                    1: // Customer
                      BEGIN
                        CustPostingGr.GET("Posting Group");
                        TempDtldCVLedgEntryBuf."Transaction No." :=
                          PostAdjmt(
                            CustPostingGr.GetReceivablesAccount,AdjAmount,AdjBase,"Currency Code",TempDimSetEntry,
                            AdjExchRateBuffer2."Posting Date","IC Partner Code");
                        IF TempDtldCVLedgEntryBuf.INSERT THEN;
                        InsertExchRateAdjmtReg(1,"Posting Group","Currency Code");
                        TotalCustomersAdjusted += 1;
                      END;
                    2: // Vendor
                      BEGIN
                        VendPostingGr.GET("Posting Group");
                        TempDtldCVLedgEntryBuf."Transaction No." :=
                          PostAdjmt(
                            VendPostingGr.GetPayablesAccount,AdjAmount,AdjBase,"Currency Code",TempDimSetEntry,
                            AdjExchRateBuffer2."Posting Date","IC Partner Code");
                        IF TempDtldCVLedgEntryBuf.INSERT THEN;
                        InsertExchRateAdjmtReg(2,"Posting Group","Currency Code");
                        TotalVendorsAdjusted += 1;
                      END;
                  END;
              UNTIL NEXT = 0;
            END;

            WITH AdjExchRateBuffer2 DO BEGIN
              Currency2.GET("Currency Code");
              IF TotalGainsAmount <> 0 THEN
                PostAdjmt(
                  Currency2.GetUnrealizedGainsAccount,-TotalGainsAmount,AdjBase,"Currency Code",TempDimSetEntry,
                  "Posting Date","IC Partner Code");
              IF TotalLossesAmount <> 0 THEN
                PostAdjmt(
                  Currency2.GetUnrealizedLossesAccount,-TotalLossesAmount,AdjBase,"Currency Code",TempDimSetEntry,
                  "Posting Date","IC Partner Code");
            END;
          UNTIL AdjExchRateBuffer2.NEXT = 0;

        GLEntry.FINDLAST;
        CASE AdjustAccType OF
          1: // Customer
            IF TempDtldCustLedgEntry.FIND('-') THEN
              REPEAT
                IF TempDtldCVLedgEntryBuf.GET(TempDtldCustLedgEntry."Transaction No.") THEN
                  TempDtldCustLedgEntry."Transaction No." := TempDtldCVLedgEntryBuf."Transaction No."
                ELSE
                  TempDtldCustLedgEntry."Transaction No." := GLEntry."Transaction No.";
                DtldCustLedgEntry := TempDtldCustLedgEntry;
                DtldCustLedgEntry.INSERT(TRUE);
              UNTIL TempDtldCustLedgEntry.NEXT = 0;
          2: // Vendor
            IF TempDtldVendLedgEntry.FIND('-') THEN
              REPEAT
                IF TempDtldCVLedgEntryBuf.GET(TempDtldVendLedgEntry."Transaction No.") THEN
                  TempDtldVendLedgEntry."Transaction No." := TempDtldCVLedgEntryBuf."Transaction No."
                ELSE
                  TempDtldVendLedgEntry."Transaction No." := GLEntry."Transaction No.";
                DtldVendLedgEntry := TempDtldVendLedgEntry;
                DtldVendLedgEntry.INSERT(TRUE);
              UNTIL TempDtldVendLedgEntry.NEXT = 0;
        END;

        AdjExchRateBuffer.RESET;
        AdjExchRateBuffer.DELETEALL;
        AdjExchRateBuffer2.RESET;
        AdjExchRateBuffer2.DELETEALL;
        TempDtldCustLedgEntry.RESET;
        TempDtldCustLedgEntry.DELETEALL;
        TempDtldVendLedgEntry.RESET;
        TempDtldVendLedgEntry.DELETEALL;
      END;
    END;

    [Internal]
    LOCAL PROCEDURE AdjustVATEntries@12(VATType@1000 : Integer;UseTax@1001 : Boolean);
    BEGIN
      CLEAR(VATEntry2);
      WITH VATEntry DO BEGIN
        SETRANGE(Type,VATType);
        SETRANGE("Use Tax",UseTax);
        IF FIND('-') THEN
          REPEAT
            Accumulate(VATEntry2.Base,Base);
            Accumulate(VATEntry2.Amount,Amount);
            Accumulate(VATEntry2."Unrealized Amount","Unrealized Amount");
            Accumulate(VATEntry2."Unrealized Base","Unrealized Base");
            Accumulate(VATEntry2."Remaining Unrealized Amount","Remaining Unrealized Amount");
            Accumulate(VATEntry2."Remaining Unrealized Base","Remaining Unrealized Base");
            Accumulate(VATEntry2."Additional-Currency Amount","Additional-Currency Amount");
            Accumulate(VATEntry2."Additional-Currency Base","Additional-Currency Base");
            Accumulate(VATEntry2."Add.-Currency Unrealized Amt.","Add.-Currency Unrealized Amt.");
            Accumulate(VATEntry2."Add.-Currency Unrealized Base","Add.-Currency Unrealized Base");
            Accumulate(VATEntry2."Add.-Curr. Rem. Unreal. Amount","Add.-Curr. Rem. Unreal. Amount");
            Accumulate(VATEntry2."Add.-Curr. Rem. Unreal. Base","Add.-Curr. Rem. Unreal. Base");

            Accumulate(VATEntryTotalBase.Base,Base);
            Accumulate(VATEntryTotalBase.Amount,Amount);
            Accumulate(VATEntryTotalBase."Unrealized Amount","Unrealized Amount");
            Accumulate(VATEntryTotalBase."Unrealized Base","Unrealized Base");
            Accumulate(VATEntryTotalBase."Remaining Unrealized Amount","Remaining Unrealized Amount");
            Accumulate(VATEntryTotalBase."Remaining Unrealized Base","Remaining Unrealized Base");
            Accumulate(VATEntryTotalBase."Additional-Currency Amount","Additional-Currency Amount");
            Accumulate(VATEntryTotalBase."Additional-Currency Base","Additional-Currency Base");
            Accumulate(VATEntryTotalBase."Add.-Currency Unrealized Amt.","Add.-Currency Unrealized Amt.");
            Accumulate(VATEntryTotalBase."Add.-Currency Unrealized Base","Add.-Currency Unrealized Base");
            Accumulate(
              VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount","Add.-Curr. Rem. Unreal. Amount");
            Accumulate(VATEntryTotalBase."Add.-Curr. Rem. Unreal. Base","Add.-Curr. Rem. Unreal. Base");

            AdjustVATAmount(Base,"Additional-Currency Base");
            AdjustVATAmount(Amount,"Additional-Currency Amount");
            AdjustVATAmount("Unrealized Amount","Add.-Currency Unrealized Amt.");
            AdjustVATAmount("Unrealized Base","Add.-Currency Unrealized Base");
            AdjustVATAmount("Remaining Unrealized Amount","Add.-Curr. Rem. Unreal. Amount");
            AdjustVATAmount("Remaining Unrealized Base","Add.-Curr. Rem. Unreal. Base");
            MODIFY;

            Accumulate(VATEntry2.Base,-Base);
            Accumulate(VATEntry2.Amount,-Amount);
            Accumulate(VATEntry2."Unrealized Amount",-"Unrealized Amount");
            Accumulate(VATEntry2."Unrealized Base",-"Unrealized Base");
            Accumulate(VATEntry2."Remaining Unrealized Amount",-"Remaining Unrealized Amount");
            Accumulate(VATEntry2."Remaining Unrealized Base",-"Remaining Unrealized Base");
            Accumulate(VATEntry2."Additional-Currency Amount",-"Additional-Currency Amount");
            Accumulate(VATEntry2."Additional-Currency Base",-"Additional-Currency Base");
            Accumulate(VATEntry2."Add.-Currency Unrealized Amt.",-"Add.-Currency Unrealized Amt.");
            Accumulate(VATEntry2."Add.-Currency Unrealized Base",-"Add.-Currency Unrealized Base");
            Accumulate(VATEntry2."Add.-Curr. Rem. Unreal. Amount",-"Add.-Curr. Rem. Unreal. Amount");
            Accumulate(VATEntry2."Add.-Curr. Rem. Unreal. Base",-"Add.-Curr. Rem. Unreal. Base");
          UNTIL NEXT = 0;
      END;
    END;

    [Internal]
    LOCAL PROCEDURE AdjustVATAmount@4(VAR AmountLCY@1000 : Decimal;VAR AmountAddCurr@1001 : Decimal);
    BEGIN
      CASE GLSetup."VAT Exchange Rate Adjustment" OF
        GLSetup."VAT Exchange Rate Adjustment"::"Adjust Amount":
          AmountLCY :=
            ROUND(
              CurrExchRate2.ExchangeAmtFCYToLCYAdjmt(
                PostingDate,GLSetup."Additional Reporting Currency",
                AmountAddCurr,AddCurrCurrencyFactor));
        GLSetup."VAT Exchange Rate Adjustment"::"Adjust Additional-Currency Amount":
          AmountAddCurr :=
            ROUND(
              CurrExchRate2.ExchangeAmtLCYToFCY(
                PostingDate,GLSetup."Additional Reporting Currency",
                AmountLCY,AddCurrCurrencyFactor));
      END;
    END;

    LOCAL PROCEDURE AdjustVATAccount@13(AccNo@1000 : Code[20];AmountLCY@1001 : Decimal;AmountAddCurr@1002 : Decimal;BaseLCY@1003 : Decimal;BaseAddCurr@1004 : Decimal);
    BEGIN
      "G/L Account".GET(AccNo);
      "G/L Account".SETRANGE("Date Filter",StartDate,EndDate);
      CASE GLSetup."VAT Exchange Rate Adjustment" OF
        GLSetup."VAT Exchange Rate Adjustment"::"Adjust Amount":
          PostGLAccAdjmt(
            AccNo,GLSetup."VAT Exchange Rate Adjustment"::"Adjust Amount",
            -AmountLCY,BaseLCY,BaseAddCurr);
        GLSetup."VAT Exchange Rate Adjustment"::"Adjust Additional-Currency Amount":
          PostGLAccAdjmt(
            AccNo,GLSetup."VAT Exchange Rate Adjustment"::"Adjust Additional-Currency Amount",
            -AmountAddCurr,BaseLCY,BaseAddCurr);
      END;
    END;

    LOCAL PROCEDURE AdjustPurchTax@5(UseTax@1000 : Boolean);
    BEGIN
      IF (VATEntry2.Amount <> 0) OR (VATEntry2."Additional-Currency Amount" <> 0) THEN BEGIN
        TaxJurisdiction.TESTFIELD("Tax Account (Purchases)");
        AdjustVATAccount(
          TaxJurisdiction."Tax Account (Purchases)",
          VATEntry2.Amount,VATEntry2."Additional-Currency Amount",
          VATEntryTotalBase.Amount,VATEntryTotalBase."Additional-Currency Amount");
        IF UseTax THEN BEGIN
          TaxJurisdiction.TESTFIELD("Reverse Charge (Purchases)");
          AdjustVATAccount(
            TaxJurisdiction."Reverse Charge (Purchases)",
            -VATEntry2.Amount,-VATEntry2."Additional-Currency Amount",
            -VATEntryTotalBase.Amount,-VATEntryTotalBase."Additional-Currency Amount");
        END;
      END;
      IF (VATEntry2."Remaining Unrealized Amount" <> 0) OR
         (VATEntry2."Add.-Curr. Rem. Unreal. Amount" <> 0)
      THEN BEGIN
        TaxJurisdiction.TESTFIELD("Unrealized VAT Type");
        TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Purchases)");
        AdjustVATAccount(
          TaxJurisdiction."Unreal. Tax Acc. (Purchases)",
          VATEntry2."Remaining Unrealized Amount",VATEntry2."Add.-Curr. Rem. Unreal. Amount",
          VATEntryTotalBase."Remaining Unrealized Amount",VATEntry2."Add.-Curr. Rem. Unreal. Amount");

        IF UseTax THEN BEGIN
          TaxJurisdiction.TESTFIELD("Unreal. Rev. Charge (Purch.)");
          AdjustVATAccount(
            TaxJurisdiction."Unreal. Rev. Charge (Purch.)",
            -VATEntry2."Remaining Unrealized Amount",
            -VATEntry2."Add.-Curr. Rem. Unreal. Amount",
            -VATEntryTotalBase."Remaining Unrealized Amount",
            -VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
        END;
      END;
    END;

    LOCAL PROCEDURE AdjustSalesTax@10();
    BEGIN
      TaxJurisdiction.TESTFIELD("Tax Account (Sales)");
      AdjustVATAccount(
        TaxJurisdiction."Tax Account (Sales)",
        VATEntry2.Amount,VATEntry2."Additional-Currency Amount",
        VATEntryTotalBase.Amount,VATEntryTotalBase."Additional-Currency Amount");
      IF (VATEntry2."Remaining Unrealized Amount" <> 0) OR
         (VATEntry2."Add.-Curr. Rem. Unreal. Amount" <> 0)
      THEN BEGIN
        TaxJurisdiction.TESTFIELD("Unrealized VAT Type");
        TaxJurisdiction.TESTFIELD("Unreal. Tax Acc. (Sales)");
        AdjustVATAccount(
          TaxJurisdiction."Unreal. Tax Acc. (Sales)",
          VATEntry2."Remaining Unrealized Amount",
          VATEntry2."Add.-Curr. Rem. Unreal. Amount",
          VATEntryTotalBase."Remaining Unrealized Amount",
          VATEntryTotalBase."Add.-Curr. Rem. Unreal. Amount");
      END;
    END;

    LOCAL PROCEDURE Accumulate@9(VAR TotalAmount@1000 : Decimal;AmountToAdd@1001 : Decimal);
    BEGIN
      TotalAmount := TotalAmount + AmountToAdd;
    END;

    LOCAL PROCEDURE PostGLAccAdjmt@23(GLAccNo@1000 : Code[20];ExchRateAdjmt@1001 : Integer;Amount@1002 : Decimal;NetChange@1003 : Decimal;AddCurrNetChange@1004 : Decimal);
    BEGIN
      GenJnlLine.INIT;
      CASE ExchRateAdjmt OF
        "G/L Account"."Exchange Rate Adjustment"::"Adjust Amount":
          BEGIN
            GenJnlLine."Additional-Currency Posting" := GenJnlLine."Additional-Currency Posting"::"Amount Only";
            GenJnlLine."Currency Code" := '';
            GenJnlLine.Amount := Amount;
            GenJnlLine."Amount (LCY)" := GenJnlLine.Amount;
            GLAmtTotal := GLAmtTotal + GenJnlLine.Amount;
            GLAddCurrNetChangeTotal := GLAddCurrNetChangeTotal + AddCurrNetChange;
            GLNetChangeBase := GLNetChangeBase + NetChange;
          END;
        "G/L Account"."Exchange Rate Adjustment"::"Adjust Additional-Currency Amount":
          BEGIN
            GenJnlLine."Additional-Currency Posting" := GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only";
            GenJnlLine."Currency Code" := GLSetup."Additional Reporting Currency";
            GenJnlLine.Amount := Amount;
            GenJnlLine."Amount (LCY)" := 0;
            GLAddCurrAmtTotal := GLAddCurrAmtTotal + GenJnlLine.Amount;
            GLNetChangeTotal := GLNetChangeTotal + NetChange;
            GLAddCurrNetChangeBase := GLAddCurrNetChangeBase + AddCurrNetChange;
          END;
      END;
      IF GenJnlLine.Amount <> 0 THEN BEGIN
        GenJnlLine."Document No." := PostingDocNo;
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine."Account No." := GLAccNo;
        GenJnlLine."Posting Date" := PostingDate;
        CASE GenJnlLine."Additional-Currency Posting" OF
          GenJnlLine."Additional-Currency Posting"::"Amount Only":
            GenJnlLine.Description :=
              STRSUBSTNO(
                PostingDescription,
                GLSetup."Additional Reporting Currency",
                AddCurrNetChange);
          GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only":
            GenJnlLine.Description :=
              STRSUBSTNO(
                PostingDescription,
                '',
                NetChange);
        END;
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
        GetJnlLineDefDim(GenJnlLine,TempDimSetEntry);
        PostGenJnlLine(GenJnlLine,TempDimSetEntry);
      END;
    END;

    LOCAL PROCEDURE CheckExchRateAdjustment@6(AccNo@1000 : Code[20];SetupTableName@1001 : Text[100];SetupFieldName@1002 : Text[100]);
    VAR
      GLAcc@1003 : Record 15;
      GLSetup@1004 : Record 98;
    BEGIN
      IF AccNo = '' THEN
        EXIT;
      GLAcc.GET(AccNo);
      IF GLAcc."Exchange Rate Adjustment" <> GLAcc."Exchange Rate Adjustment"::"No Adjustment" THEN BEGIN
        GLAcc."Exchange Rate Adjustment" := GLAcc."Exchange Rate Adjustment"::"No Adjustment";
        ERROR(
          Text017,
          GLAcc.FIELDCAPTION("Exchange Rate Adjustment"),GLAcc.TABLECAPTION,
          GLAcc."No.",GLAcc."Exchange Rate Adjustment",
          SetupTableName,GLSetup.FIELDCAPTION("VAT Exchange Rate Adjustment"),
          GLSetup.TABLECAPTION,SetupFieldName);
      END;
    END;

    LOCAL PROCEDURE HandleCustDebitCredit@17(Amount@1000 : Decimal;AmountLCY@1001 : Decimal;Correction@1002 : Boolean;AdjAmount@1003 : Decimal);
    BEGIN
      IF ((Amount > 0) OR (AmountLCY > 0)) AND (NOT Correction) OR
         ((Amount < 0) OR (AmountLCY < 0)) AND Correction
      THEN BEGIN
        TempDtldCustLedgEntry."Debit Amount (LCY)" := AdjAmount;
        TempDtldCustLedgEntry."Credit Amount (LCY)" := 0;
      END ELSE BEGIN
        TempDtldCustLedgEntry."Debit Amount (LCY)" := 0;
        TempDtldCustLedgEntry."Credit Amount (LCY)" := -AdjAmount;
      END;
    END;

    LOCAL PROCEDURE HandleVendDebitCredit@14(Amount@1000 : Decimal;AmountLCY@1001 : Decimal;Correction@1002 : Boolean;AdjAmount@1003 : Decimal);
    BEGIN
      IF ((Amount > 0) OR (AmountLCY > 0)) AND (NOT Correction) OR
         ((Amount < 0) OR (AmountLCY < 0)) AND Correction
      THEN BEGIN
        TempDtldVendLedgEntry."Debit Amount (LCY)" := AdjAmount;
        TempDtldVendLedgEntry."Credit Amount (LCY)" := 0;
      END ELSE BEGIN
        TempDtldVendLedgEntry."Debit Amount (LCY)" := 0;
        TempDtldVendLedgEntry."Credit Amount (LCY)" := -AdjAmount;
      END;
    END;

    LOCAL PROCEDURE GetJnlLineDefDim@11(VAR GenJnlLine@1000 : Record 81;VAR DimSetEntry@1001 : Record 480);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      WITH GenJnlLine DO BEGIN
        CASE "Account Type" OF
          "Account Type"::"G/L Account":
            TableID[1] := DATABASE::"G/L Account";
          "Account Type"::"Bank Account":
            TableID[1] := DATABASE::"Bank Account";
        END;
        No[1] := "Account No.";
        DimMgt.GetDefaultDimID(TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","Dimension Set ID",0);
      END;
      DimMgt.GetDimSetEntryDefaultDim(DimSetEntry);
    END;

    LOCAL PROCEDURE CopyDimSetEntryToDimBuf@18(VAR DimSetEntry@1000 : Record 480;VAR DimBuf@1001 : Record 360);
    BEGIN
      IF DimSetEntry.FIND('-') THEN
        REPEAT
          DimBuf."Table ID" := DATABASE::"Dimension Buffer";
          DimBuf."Entry No." := 0;
          DimBuf."Dimension Code" := DimSetEntry."Dimension Code";
          DimBuf."Dimension Value Code" := DimSetEntry."Dimension Value Code";
          DimBuf.INSERT;
        UNTIL DimSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE GetDimCombID@21(VAR DimBuf@1000 : Record 360) : Integer;
    VAR
      DimEntryNo@1001 : Integer;
    BEGIN
      DimEntryNo := DimBufMgt.FindDimensions(DimBuf);
      IF DimEntryNo = 0 THEN
        DimEntryNo := DimBufMgt.InsertDimensions(DimBuf);
      EXIT(DimEntryNo);
    END;

    LOCAL PROCEDURE PostGenJnlLine@8(VAR GenJnlLine@1000 : Record 81;VAR DimSetEntry@1001 : Record 480) : Integer;
    BEGIN
      GenJnlLine."Shortcut Dimension 1 Code" := GetGlobalDimVal(GLSetup."Global Dimension 1 Code",DimSetEntry);
      GenJnlLine."Shortcut Dimension 2 Code" := GetGlobalDimVal(GLSetup."Global Dimension 2 Code",DimSetEntry);
      GenJnlLine."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      GenJnlPostLine.RUN(GenJnlLine);
      EXIT(GenJnlPostLine.GetNextTransactionNo);
    END;

    LOCAL PROCEDURE GetGlobalDimVal@16(GlobalDimCode@1000 : Code[20];VAR DimSetEntry@1001 : Record 480) : Code[20];
    VAR
      DimVal@1002 : Code[20];
    BEGIN
      IF GlobalDimCode = '' THEN
        DimVal := ''
      ELSE BEGIN
        DimSetEntry.SETRANGE("Dimension Code",GlobalDimCode);
        IF DimSetEntry.FIND('-') THEN
          DimVal := DimSetEntry."Dimension Value Code"
        ELSE
          DimVal := '';
        DimSetEntry.SETRANGE("Dimension Code");
      END;
      EXIT(DimVal);
    END;

    [External]
    PROCEDURE CheckPostingDate@19();
    BEGIN
      IF PostingDate < StartDate THEN
        ERROR(Text018);
      IF PostingDate > EndDateReq THEN
        ERROR(Text018);
    END;

    [Internal]
    PROCEDURE AdjustCustomerLedgerEntry@20(CusLedgerEntry@1001 : Record 21;PostingDate2@1000 : Date);
    VAR
      DimSetEntry@1005 : Record 480;
      DimEntryNo@1004 : Integer;
      OldAdjAmount@1003 : Decimal;
      Adjust@1002 : Boolean;
      AdjExchRateBufIndex@1006 : Integer;
    BEGIN
      WITH CusLedgerEntry DO BEGIN
        SETRANGE("Date Filter",0D,PostingDate2);
        Currency2.GET("Currency Code");
        GainsAmount := 0;
        LossesAmount := 0;
        OldAdjAmount := 0;
        Adjust := FALSE;

        TempDimSetEntry.RESET;
        TempDimSetEntry.DELETEALL;
        TempDimBuf.RESET;
        TempDimBuf.DELETEALL;
        DimSetEntry.SETRANGE("Dimension Set ID","Dimension Set ID");
        CopyDimSetEntryToDimBuf(DimSetEntry,TempDimBuf);
        DimEntryNo := GetDimCombID(TempDimBuf);

        CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)","Original Amt. (LCY)",
          "Debit Amount","Credit Amount","Debit Amount (LCY)","Credit Amount (LCY)");

        // Calculate Old Unrealized Gains and Losses
        SetUnrealizedGainLossFilterCust(DtldCustLedgEntry,"Entry No.");
        DtldCustLedgEntry.CALCSUMS("Amount (LCY)");

        SetUnrealizedGainLossFilterCust(TempDtldCustLedgEntrySums,"Entry No.");
        TempDtldCustLedgEntrySums.CALCSUMS("Amount (LCY)");
        OldAdjAmount := DtldCustLedgEntry."Amount (LCY)" + TempDtldCustLedgEntrySums."Amount (LCY)";
        "Remaining Amt. (LCY)" := "Remaining Amt. (LCY)" + TempDtldCustLedgEntrySums."Amount (LCY)";
        "Debit Amount (LCY)" := "Debit Amount (LCY)" + TempDtldCustLedgEntrySums."Amount (LCY)";
        "Credit Amount (LCY)" := "Credit Amount (LCY)" + TempDtldCustLedgEntrySums."Amount (LCY)";
        TempDtldCustLedgEntrySums.RESET;

        // Modify Currency factor on Customer Ledger Entry
        IF "Adjusted Currency Factor" <> Currency2."Currency Factor" THEN BEGIN
          "Adjusted Currency Factor" := Currency2."Currency Factor";
          MODIFY;
        END;

        // Calculate New Unrealized Gains and Losses
        AdjAmount :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCYAdjmt(
              PostingDate2,Currency2.Code,"Remaining Amount",Currency2."Currency Factor")) -
          "Remaining Amt. (LCY)";

        IF AdjAmount <> 0 THEN BEGIN
          InitDtldCustLedgEntry(CusLedgerEntry,TempDtldCustLedgEntry);
          TempDtldCustLedgEntry."Entry No." := NewEntryNo;
          TempDtldCustLedgEntry."Posting Date" := PostingDate2;
          TempDtldCustLedgEntry."Document No." := PostingDocNo;

          Correction :=
            ("Debit Amount" < 0) OR
            ("Credit Amount" < 0) OR
            ("Debit Amount (LCY)" < 0) OR
            ("Credit Amount (LCY)" < 0);

          IF OldAdjAmount > 0 THEN
            CASE TRUE OF
              (AdjAmount > 0):
                BEGIN
                  TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  GainsAmount := AdjAmount;
                  Adjust := TRUE;
                END;
              (AdjAmount < 0):
                IF -AdjAmount <= OldAdjAmount THEN BEGIN
                  TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  LossesAmount := AdjAmount;
                  Adjust := TRUE;
                END ELSE BEGIN
                  AdjAmount := AdjAmount + OldAdjAmount;
                  TempDtldCustLedgEntry."Amount (LCY)" := -OldAdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  AdjExchRateBufIndex :=
                    AdjExchRateBufferUpdate(
                      "Currency Code",Customer."Customer Posting Group",
                      0,0,-OldAdjAmount,-OldAdjAmount,0,DimEntryNo,PostingDate2,Customer."IC Partner Code");
                  TempDtldCustLedgEntry."Transaction No." := AdjExchRateBufIndex;
                  ModifyTempDtldCustomerLedgerEntry;
                  Adjust := FALSE;
                END;
            END;
          IF OldAdjAmount < 0 THEN
            CASE TRUE OF
              (AdjAmount < 0):
                BEGIN
                  TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  LossesAmount := AdjAmount;
                  Adjust := TRUE;
                END;
              (AdjAmount > 0):
                IF AdjAmount <= -OldAdjAmount THEN BEGIN
                  TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  GainsAmount := AdjAmount;
                  Adjust := TRUE;
                END ELSE BEGIN
                  AdjAmount := OldAdjAmount + AdjAmount;
                  TempDtldCustLedgEntry."Amount (LCY)" := -OldAdjAmount;
                  TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleCustDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
                  InsertTempDtldCustomerLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  AdjExchRateBufIndex :=
                    AdjExchRateBufferUpdate(
                      "Currency Code",Customer."Customer Posting Group",
                      0,0,-OldAdjAmount,0,-OldAdjAmount,DimEntryNo,PostingDate2,Customer."IC Partner Code");
                  TempDtldCustLedgEntry."Transaction No." := AdjExchRateBufIndex;
                  ModifyTempDtldCustomerLedgerEntry;
                  Adjust := FALSE;
                END;
            END;
          IF NOT Adjust THEN BEGIN
            TempDtldCustLedgEntry."Amount (LCY)" := AdjAmount;
            HandleCustDebitCredit(Amount,"Amount (LCY)",Correction,TempDtldCustLedgEntry."Amount (LCY)");
            TempDtldCustLedgEntry."Entry No." := NewEntryNo;
            IF AdjAmount < 0 THEN BEGIN
              TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Loss";
              GainsAmount := 0;
              LossesAmount := AdjAmount;
            END ELSE
              IF AdjAmount > 0 THEN BEGIN
                TempDtldCustLedgEntry."Entry Type" := TempDtldCustLedgEntry."Entry Type"::"Unrealized Gain";
                GainsAmount := AdjAmount;
                LossesAmount := 0;
              END;
            InsertTempDtldCustomerLedgerEntry;
            NewEntryNo := NewEntryNo + 1;
          END;

          TotalAdjAmount := TotalAdjAmount + AdjAmount;
          IF NOT HideUI THEN
            Window.UPDATE(4,TotalAdjAmount);
          AdjExchRateBufIndex :=
            AdjExchRateBufferUpdate(
              "Currency Code",Customer."Customer Posting Group",
              "Remaining Amount","Remaining Amt. (LCY)",TempDtldCustLedgEntry."Amount (LCY)",
              GainsAmount,LossesAmount,DimEntryNo,PostingDate2,Customer."IC Partner Code");
          TempDtldCustLedgEntry."Transaction No." := AdjExchRateBufIndex;
          ModifyTempDtldCustomerLedgerEntry;
        END;
      END;
    END;

    [Internal]
    PROCEDURE AdjustVendorLedgerEntry@24(VendLedgerEntry@1001 : Record 25;PostingDate2@1000 : Date);
    VAR
      DimSetEntry@1006 : Record 480;
      DimEntryNo@1005 : Integer;
      OldAdjAmount@1004 : Decimal;
      Adjust@1003 : Boolean;
      AdjExchRateBufIndex@1007 : Integer;
    BEGIN
      WITH VendLedgerEntry DO BEGIN
        SETRANGE("Date Filter",0D,PostingDate2);
        Currency2.GET("Currency Code");
        GainsAmount := 0;
        LossesAmount := 0;
        OldAdjAmount := 0;
        Adjust := FALSE;

        TempDimBuf.RESET;
        TempDimBuf.DELETEALL;
        DimSetEntry.SETRANGE("Dimension Set ID","Dimension Set ID");
        CopyDimSetEntryToDimBuf(DimSetEntry,TempDimBuf);
        DimEntryNo := GetDimCombID(TempDimBuf);

        CALCFIELDS(
          Amount,"Amount (LCY)","Remaining Amount","Remaining Amt. (LCY)","Original Amt. (LCY)",
          "Debit Amount","Credit Amount","Debit Amount (LCY)","Credit Amount (LCY)");

        // Calculate Old Unrealized GainLoss
        SetUnrealizedGainLossFilterVend(DtldVendLedgEntry,"Entry No.");
        DtldVendLedgEntry.CALCSUMS("Amount (LCY)");

        SetUnrealizedGainLossFilterVend(TempDtldVendLedgEntrySums,"Entry No.");
        TempDtldVendLedgEntrySums.CALCSUMS("Amount (LCY)");
        OldAdjAmount := DtldVendLedgEntry."Amount (LCY)" + TempDtldVendLedgEntrySums."Amount (LCY)";
        "Remaining Amt. (LCY)" := "Remaining Amt. (LCY)" + TempDtldVendLedgEntrySums."Amount (LCY)";
        "Debit Amount (LCY)" := "Debit Amount (LCY)" + TempDtldVendLedgEntrySums."Amount (LCY)";
        "Credit Amount (LCY)" := "Credit Amount (LCY)" + TempDtldVendLedgEntrySums."Amount (LCY)";
        TempDtldVendLedgEntrySums.RESET;

        // Modify Currency factor on Vendor Ledger Entry
        IF "Adjusted Currency Factor" <> Currency2."Currency Factor" THEN BEGIN
          "Adjusted Currency Factor" := Currency2."Currency Factor";
          MODIFY;
        END;

        // Calculate New Unrealized Gains and Losses
        AdjAmount :=
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCYAdjmt(
              PostingDate2,Currency2.Code,"Remaining Amount",Currency2."Currency Factor")) -
          "Remaining Amt. (LCY)";

        IF AdjAmount <> 0 THEN BEGIN
          InitDtldVendLedgEntry(VendLedgerEntry,TempDtldVendLedgEntry);
          TempDtldVendLedgEntry."Entry No." := NewEntryNo;
          TempDtldVendLedgEntry."Posting Date" := PostingDate2;
          TempDtldVendLedgEntry."Document No." := PostingDocNo;

          Correction :=
            ("Debit Amount" < 0) OR
            ("Credit Amount" < 0) OR
            ("Debit Amount (LCY)" < 0) OR
            ("Credit Amount (LCY)" < 0);

          IF OldAdjAmount > 0 THEN
            CASE TRUE OF
              (AdjAmount > 0):
                BEGIN
                  TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleVendDebitCredit(Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  GainsAmount := AdjAmount;
                  Adjust := TRUE;
                END;
              (AdjAmount < 0):
                IF -AdjAmount <= OldAdjAmount THEN BEGIN
                  TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleVendDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  LossesAmount := AdjAmount;
                  Adjust := TRUE;
                END ELSE BEGIN
                  AdjAmount := AdjAmount + OldAdjAmount;
                  TempDtldVendLedgEntry."Amount (LCY)" := -OldAdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleVendDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  AdjExchRateBufIndex :=
                    AdjExchRateBufferUpdate(
                      "Currency Code",Vendor."Vendor Posting Group",
                      0,0,-OldAdjAmount,-OldAdjAmount,0,DimEntryNo,PostingDate2,Vendor."IC Partner Code");
                  TempDtldVendLedgEntry."Transaction No." := AdjExchRateBufIndex;
                  ModifyTempDtldVendorLedgerEntry;
                  Adjust := FALSE;
                END;
            END;
          IF OldAdjAmount < 0 THEN
            CASE TRUE OF
              (AdjAmount < 0):
                BEGIN
                  TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleVendDebitCredit(Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  LossesAmount := AdjAmount;
                  Adjust := TRUE;
                END;
              (AdjAmount > 0):
                IF AdjAmount <= -OldAdjAmount THEN BEGIN
                  TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Gain";
                  HandleVendDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  GainsAmount := AdjAmount;
                  Adjust := TRUE;
                END ELSE BEGIN
                  AdjAmount := OldAdjAmount + AdjAmount;
                  TempDtldVendLedgEntry."Amount (LCY)" := -OldAdjAmount;
                  TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Loss";
                  HandleVendDebitCredit(
                    Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
                  InsertTempDtldVendorLedgerEntry;
                  NewEntryNo := NewEntryNo + 1;
                  AdjExchRateBufIndex :=
                    AdjExchRateBufferUpdate(
                      "Currency Code",Vendor."Vendor Posting Group",
                      0,0,-OldAdjAmount,0,-OldAdjAmount,DimEntryNo,PostingDate2,Vendor."IC Partner Code");
                  TempDtldVendLedgEntry."Transaction No." := AdjExchRateBufIndex;
                  ModifyTempDtldVendorLedgerEntry;
                  Adjust := FALSE;
                END;
            END;

          IF NOT Adjust THEN BEGIN
            TempDtldVendLedgEntry."Amount (LCY)" := AdjAmount;
            HandleVendDebitCredit(Amount,"Amount (LCY)",Correction,TempDtldVendLedgEntry."Amount (LCY)");
            TempDtldVendLedgEntry."Entry No." := NewEntryNo;
            IF AdjAmount < 0 THEN BEGIN
              TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Loss";
              GainsAmount := 0;
              LossesAmount := AdjAmount;
            END ELSE
              IF AdjAmount > 0 THEN BEGIN
                TempDtldVendLedgEntry."Entry Type" := TempDtldVendLedgEntry."Entry Type"::"Unrealized Gain";
                GainsAmount := AdjAmount;
                LossesAmount := 0;
              END;
            InsertTempDtldVendorLedgerEntry;
            NewEntryNo := NewEntryNo + 1;
          END;

          TotalAdjAmount := TotalAdjAmount + AdjAmount;
          IF NOT HideUI THEN
            Window.UPDATE(4,TotalAdjAmount);
          AdjExchRateBufIndex :=
            AdjExchRateBufferUpdate(
              "Currency Code",Vendor."Vendor Posting Group",
              "Remaining Amount","Remaining Amt. (LCY)",
              TempDtldVendLedgEntry."Amount (LCY)",GainsAmount,LossesAmount,DimEntryNo,PostingDate2,Vendor."IC Partner Code");
          TempDtldVendLedgEntry."Transaction No." := AdjExchRateBufIndex;
          ModifyTempDtldVendorLedgerEntry;
        END;
      END;
    END;

    PROCEDURE AdjustExchRateCust@269(GenJournalLine@1007 : Record 81;VAR TempCustLedgerEntry@1000 : TEMPORARY Record 21);
    VAR
      CustLedgerEntry@1003 : Record 21;
      DetailedCustLedgEntry@1006 : Record 379;
      PostingDate2@1004 : Date;
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        PostingDate2 := GenJournalLine."Posting Date";
        IF TempCustLedgerEntry.FINDSET THEN
          REPEAT
            GET(TempCustLedgerEntry."Entry No.");
            SETRANGE("Date Filter",0D,PostingDate2);
            CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
            IF ShouldAdjustEntry(
                 PostingDate2,"Currency Code","Remaining Amount","Remaining Amt. (LCY)","Adjusted Currency Factor")
            THEN BEGIN
              InitVariablesForSetLedgEntry(GenJournalLine);
              SetCustLedgEntry(CustLedgerEntry);
              AdjustCustomerLedgerEntry(CustLedgerEntry,PostingDate2);

              DetailedCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
              DetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.","Entry No.");
              DetailedCustLedgEntry.SETFILTER("Posting Date",'%1..',CALCDATE('<+1D>',PostingDate2));
              IF DetailedCustLedgEntry.FINDSET THEN
                REPEAT
                  AdjustCustomerLedgerEntry(CustLedgerEntry,DetailedCustLedgEntry."Posting Date");
                UNTIL DetailedCustLedgEntry.NEXT = 0;
              HandlePostAdjmt(1);
            END;
          UNTIL TempCustLedgerEntry.NEXT = 0;
      END;
    END;

    PROCEDURE AdjustExchRateVend@270(GenJournalLine@1007 : Record 81;VAR TempVendLedgerEntry@1000 : TEMPORARY Record 25);
    VAR
      VendLedgerEntry@1003 : Record 25;
      DetailedVendLedgEntry@1006 : Record 380;
      PostingDate2@1004 : Date;
    BEGIN
      WITH VendLedgerEntry DO BEGIN
        PostingDate2 := GenJournalLine."Posting Date";
        IF TempVendLedgerEntry.FINDSET THEN
          REPEAT
            GET(TempVendLedgerEntry."Entry No.");
            SETRANGE("Date Filter",0D,PostingDate2);
            CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
            IF ShouldAdjustEntry(
                 PostingDate2,"Currency Code","Remaining Amount","Remaining Amt. (LCY)","Adjusted Currency Factor")
            THEN BEGIN
              InitVariablesForSetLedgEntry(GenJournalLine);
              SetVendLedgEntry(VendLedgerEntry);
              AdjustVendorLedgerEntry(VendLedgerEntry,PostingDate2);

              DetailedVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
              DetailedVendLedgEntry.SETRANGE("Vendor Ledger Entry No.","Entry No.");
              DetailedVendLedgEntry.SETFILTER("Posting Date",'%1..',CALCDATE('<+1D>',PostingDate2));
              IF DetailedVendLedgEntry.FINDSET THEN
                REPEAT
                  AdjustVendorLedgerEntry(VendLedgerEntry,DetailedVendLedgEntry."Posting Date");
                UNTIL DetailedVendLedgEntry.NEXT = 0;
              HandlePostAdjmt(2);
            END;
          UNTIL TempVendLedgerEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetCustLedgEntry@36(CustLedgerEntryToAdjust@1000 : Record 21);
    BEGIN
      Customer.GET(CustLedgerEntryToAdjust."Customer No.");
      AddCurrency(CustLedgerEntryToAdjust."Currency Code",CustLedgerEntryToAdjust."Adjusted Currency Factor");
      DtldCustLedgEntry.LOCKTABLE;
      CustLedgerEntry.LOCKTABLE;
      IF DtldCustLedgEntry.FINDLAST THEN
        NewEntryNo := DtldCustLedgEntry."Entry No." + 1
      ELSE
        NewEntryNo := 1;
    END;

    LOCAL PROCEDURE SetVendLedgEntry@37(VendLedgerEntryToAdjust@1000 : Record 25);
    BEGIN
      Vendor.GET(VendLedgerEntryToAdjust."Vendor No.");
      AddCurrency(VendLedgerEntryToAdjust."Currency Code",VendLedgerEntryToAdjust."Adjusted Currency Factor");
      DtldVendLedgEntry.LOCKTABLE;
      VendorLedgerEntry.LOCKTABLE;
      IF DtldVendLedgEntry.FINDLAST THEN
        NewEntryNo := DtldVendLedgEntry."Entry No." + 1
      ELSE
        NewEntryNo := 1;
    END;

    LOCAL PROCEDURE ShouldAdjustEntry@47(PostingDate@1000 : Date;CurCode@1001 : Code[10];RemainingAmount@1002 : Decimal;RemainingAmtLCY@1004 : Decimal;AdjCurFactor@1003 : Decimal) : Boolean;
    BEGIN
      EXIT(ROUND(CurrExchRate.ExchangeAmtFCYToLCYAdjmt(PostingDate,CurCode,RemainingAmount,AdjCurFactor)) - RemainingAmtLCY <> 0);
    END;

    LOCAL PROCEDURE InitVariablesForSetLedgEntry@41(GenJournalLine@1000 : Record 81);
    BEGIN
      InitializeRequest(GenJournalLine."Posting Date",GenJournalLine."Posting Date",Text016,GenJournalLine."Posting Date");
      PostingDocNo := GenJournalLine."Document No.";
      HideUI := TRUE;
      GLSetup.GET;
      SourceCodeSetup.GET;
      IF ExchRateAdjReg.FINDLAST THEN
        ExchRateAdjReg.INIT;
    END;

    LOCAL PROCEDURE AddCurrency@38(CurrencyCode@1000 : Code[10];CurrencyFactor@1002 : Decimal);
    VAR
      CurrencyToAdd@1001 : Record 4;
    BEGIN
      //>>MAR 23-03-2020 - Issue with Codeunit 227 Line 219 (AdjustExchangeRates.AdjustExchRateVend) when unapplying Vendor Ledger Entry. Error "Currency already extists"
        //Commented following 4 lines and rewritten below with Microsoft fix taken from BC 15.2
      {
      CurrencyToAdd.GET(CurrencyCode);
        Currency2 := CurrencyToAdd;
        Currency2."Currency Factor" := CurrencyFactor;
        Currency2.INSERT;
      }
      IF Currency2.GET(CurrencyCode) THEN BEGIN
        Currency2."Currency Factor" := CurrencyFactor;
        Currency2.MODIFY;
      END ELSE BEGIN
        CurrencyToAdd.GET(CurrencyCode);
        Currency2 := CurrencyToAdd;
        Currency2."Currency Factor" := CurrencyFactor;
        Currency2.INSERT;
      END;
      //<<MAR 23-03-2020 - Issue with Codeunit 227 Line 219 (AdjustExchangeRates.AdjustExchRateVend) when unapplying Vendor Ledger Entry. Error "Currency already extists"
        //Commented following 4 lines and rewritten below with Microsoft fix taken from BC 15.2
    END;

    LOCAL PROCEDURE InitDtldCustLedgEntry@27(CustLedgEntry@1000 : Record 21;VAR DtldCustLedgEntry@1001 : Record 379);
    BEGIN
      WITH CustLedgEntry DO BEGIN
        DtldCustLedgEntry.INIT;
        DtldCustLedgEntry."Cust. Ledger Entry No." := "Entry No.";
        DtldCustLedgEntry.Amount := 0;
        DtldCustLedgEntry."Customer No." := "Customer No.";
        DtldCustLedgEntry."Currency Code" := "Currency Code";
        DtldCustLedgEntry."User ID" := USERID;
        DtldCustLedgEntry."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
        DtldCustLedgEntry."Journal Batch Name" := "Journal Batch Name";
        DtldCustLedgEntry."Reason Code" := "Reason Code";
        DtldCustLedgEntry."Initial Entry Due Date" := "Due Date";
        DtldCustLedgEntry."Initial Entry Global Dim. 1" := "Global Dimension 1 Code";
        DtldCustLedgEntry."Initial Entry Global Dim. 2" := "Global Dimension 2 Code";
        DtldCustLedgEntry."Initial Document Type" := "Document Type";
      END;

      OnAfterInitDtldCustLedgerEntry(DtldCustLedgEntry);
    END;

    LOCAL PROCEDURE InitDtldVendLedgEntry@28(VendLedgEntry@1001 : Record 25;VAR DtldVendLedgEntry@1000 : Record 380);
    BEGIN
      WITH VendLedgEntry DO BEGIN
        DtldVendLedgEntry.INIT;
        DtldVendLedgEntry."Vendor Ledger Entry No." := "Entry No.";
        DtldVendLedgEntry.Amount := 0;
        DtldVendLedgEntry."Vendor No." := "Vendor No.";
        DtldVendLedgEntry."Currency Code" := "Currency Code";
        DtldVendLedgEntry."User ID" := USERID;
        DtldVendLedgEntry."Source Code" := SourceCodeSetup."Exchange Rate Adjmt.";
        DtldVendLedgEntry."Journal Batch Name" := "Journal Batch Name";
        DtldVendLedgEntry."Reason Code" := "Reason Code";
        DtldVendLedgEntry."Initial Entry Due Date" := "Due Date";
        DtldVendLedgEntry."Initial Entry Global Dim. 1" := "Global Dimension 1 Code";
        DtldVendLedgEntry."Initial Entry Global Dim. 2" := "Global Dimension 2 Code";
        DtldVendLedgEntry."Initial Document Type" := "Document Type";
      END;

      OnAfterInitDtldVendLedgerEntry(DtldVendLedgEntry);
    END;

    LOCAL PROCEDURE SetUnrealizedGainLossFilterCust@22(VAR DtldCustLedgEntry@1000 : Record 379;EntryNo@1001 : Integer);
    BEGIN
      WITH DtldCustLedgEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type");
        SETRANGE("Cust. Ledger Entry No.",EntryNo);
        SETRANGE("Entry Type","Entry Type"::"Unrealized Loss","Entry Type"::"Unrealized Gain");
      END;
    END;

    LOCAL PROCEDURE SetUnrealizedGainLossFilterVend@26(VAR DtldVendLedgEntry@1001 : Record 380;EntryNo@1000 : Integer);
    BEGIN
      WITH DtldVendLedgEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Vendor Ledger Entry No.","Entry Type");
        SETRANGE("Vendor Ledger Entry No.",EntryNo);
        SETRANGE("Entry Type","Entry Type"::"Unrealized Loss","Entry Type"::"Unrealized Gain");
      END;
    END;

    LOCAL PROCEDURE InsertTempDtldCustomerLedgerEntry@30();
    BEGIN
      TempDtldCustLedgEntry.INSERT;
      TempDtldCustLedgEntrySums := TempDtldCustLedgEntry;
      TempDtldCustLedgEntrySums.INSERT;
    END;

    LOCAL PROCEDURE InsertTempDtldVendorLedgerEntry@29();
    BEGIN
      TempDtldVendLedgEntry.INSERT;
      TempDtldVendLedgEntrySums := TempDtldVendLedgEntry;
      TempDtldVendLedgEntrySums.INSERT;
    END;

    LOCAL PROCEDURE ModifyTempDtldCustomerLedgerEntry@33();
    BEGIN
      TempDtldCustLedgEntry.MODIFY;
      TempDtldCustLedgEntrySums := TempDtldCustLedgEntry;
      TempDtldCustLedgEntrySums.MODIFY;
    END;

    LOCAL PROCEDURE ModifyTempDtldVendorLedgerEntry@32();
    BEGIN
      TempDtldVendLedgEntry.MODIFY;
      TempDtldVendLedgEntrySums := TempDtldVendLedgEntry;
      TempDtldVendLedgEntrySums.MODIFY;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitDtldCustLedgerEntry@35(VAR DetailedCustLedgEntry@1000 : Record 379);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitDtldVendLedgerEntry@34(VAR DetailedVendorLedgEntry@1000 : Record 380);
    BEGIN
    END;

    BEGIN
    {
      MAR 23-03-2020 - Issue with Codeunit 227 Line 219 (AdjustExchangeRates.AdjustExchRateVend) when unapplying Vendor Ledger Entry. Error "Currency already extists"
                        Commented following 4 lines and rewritten below with Microsoft fix taken from BC 15.2
    }
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Codeunit 1206 Pmt Export Mgt Gen. Jnl Line
{
  OBJECT-PROPERTIES
  {
    Date=19/11/19;
    Time=11:07:56;
    Modified=Yes;
    Version List=NAVW111.00.00.26893;
  }
  PROPERTIES
  {
    TableNo=81;
    Permissions=TableData 25=rm,
                TableData 81=rm,
                TableData 1226=rimd;
    OnRun=BEGIN
            ExportJournalPaymentFile(Rec);
          END;

  }
  CODE
  {
    VAR
      ExportAgainQst@1002 : TextConst 'ENU=One or more of the selected lines has already been exported. Do you want to export it again?;ENG=One or more of the selected lines has already been exported. Do you want to export it again?';
      ProgressMsg@1001 : TextConst 'ENU=Processing line no. #1######.;ENG=Processing line no. #1######.';
      HasErrorsErr@1008 : TextConst 'ENU=The file export has one or more errors.\\For each line to be exported, resolve the errors displayed to the right and then try to export again.;ENG=The file export has one or more errors.\\For each line to be exported, resolve the errors displayed to the right and then try to export again.';
      PaymentExportMgt@1003 : Codeunit 1210;

    [Internal]
    PROCEDURE ExportJournalPaymentFileYN@2(VAR GenJnlLine@1001 : Record 81);
    BEGIN
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      IF GenJnlLine.IsExportedToPaymentFile THEN
        IF NOT CONFIRM(ExportAgainQst) THEN
          EXIT;
      ExportJournalPaymentFile(GenJnlLine);
    END;

    [Internal]
    PROCEDURE ExportJournalPaymentFile@118(VAR GenJnlLine@1001 : Record 81);
    VAR
      BankAccount@1000 : Record 270;
      CreditTransferRegister@1004 : Record 1205;
      DataExchDef@1002 : Record 1222;
    BEGIN
      BankAccount.GET(GenJnlLine."Bal. Account No.");
      BankAccount.GetDataExchDefPaymentExport(DataExchDef);
      CreditTransferRegister.CreateNew(DataExchDef.Code,GenJnlLine."Bal. Account No.");
      COMMIT;

      CheckGenJnlLine(GenJnlLine);
      ExportGenJnlLine(GenJnlLine,CreditTransferRegister);
    END;

    LOCAL PROCEDURE CheckGenJnlLine@9(VAR GenJnlLine@1000 : Record 81);
    VAR
      GenJnlLine2@1001 : Record 81;
    BEGIN
      GenJnlLine.DeletePaymentFileBatchErrors;
      GenJnlLine2.COPYFILTERS(GenJnlLine);
      IF GenJnlLine2.FINDSET THEN
        REPEAT
          CODEUNIT.RUN(CODEUNIT::"Payment Export Gen. Jnl Check",GenJnlLine2);
          OnCheckGenJnlLine(GenJnlLine2);
        UNTIL GenJnlLine2.NEXT = 0;

      IF GenJnlLine2.HasPaymentFileErrorsInBatch THEN BEGIN
        COMMIT;
        ERROR(HasErrorsErr);
      END;
    END;

    [Internal]
    PROCEDURE ExportGenJnlLine@15(VAR GenJnlLine@1000 : Record 81;VAR CreditTransferRegister@1007 : Record 1205);
    VAR
      GenJnlLine2@1004 : Record 81;
      DataExch@1001 : Record 1220;
      CreditTransferEntry@1006 : Record 1206;
      Window@1002 : Dialog;
      LineNo@1003 : Integer;
      LineAmount@1216 : Decimal;
      TransferDate@1217 : Date;
      TotalAmount@1218 : Decimal;
      HandledGenJnlDataExchLine@1213 : Boolean;
      HandledPaymentExport@1214 : Boolean;
    BEGIN
      GenJnlLine2.COPYFILTERS(GenJnlLine);
      GenJnlLine2.FINDSET;

      PaymentExportMgt.CreateDataExch(DataExch,GenJnlLine2."Bal. Account No.");
      GenJnlLine2.MODIFYALL("Data Exch. Entry No.",DataExch."Entry No.");

      Window.OPEN(ProgressMsg);
      REPEAT
        LineNo += 1;
        Window.UPDATE(1,LineNo);

        OnBeforeCreateGenJnlDataExchLine(DataExch,GenJnlLine2,LineNo,LineAmount,TotalAmount,TransferDate,HandledGenJnlDataExchLine);
        IF NOT HandledGenJnlDataExchLine THEN
          CreateGenJnlDataExchLine(DataExch."Entry No.",GenJnlLine2,LineNo);

        CreditTransferEntry.CreateNew(CreditTransferRegister."No.",LineNo,
          GenJnlLine2."Account Type",GenJnlLine2."Account No.",GenJnlLine2.GetAppliesToDocEntryNo,
          GenJnlLine2."Posting Date",GenJnlLine2."Currency Code",GenJnlLine2.Amount,'',
          GenJnlLine2."Recipient Bank Account",GenJnlLine2."Message to Recipient");
      UNTIL GenJnlLine2.NEXT = 0;
      Window.CLOSE;

      OnBeforePaymentExport(GenJnlLine."Bal. Account No.",DataExch."Entry No.",LineNo,TotalAmount,TransferDate,HandledPaymentExport);
      IF NOT HandledPaymentExport THEN
        PaymentExportMgt.ExportToFile(DataExch."Entry No.");

      CODEUNIT.RUN(CODEUNIT::"Exp. User Feedback Gen. Jnl.",DataExch);
    END;

    LOCAL PROCEDURE CreateGenJnlDataExchLine@16(DataExchEntryNo@1000 : Integer;GenJnlLine@1001 : Record 81;LineNo@1002 : Integer);
    VAR
      TempPaymentExportData@1004 : TEMPORARY Record 1226;
    BEGIN
      WITH GenJnlLine DO BEGIN
        PreparePaymentExportDataJnl(TempPaymentExportData,GenJnlLine,DataExchEntryNo,LineNo);
        PaymentExportMgt.CreatePaymentLines(TempPaymentExportData);
      END;
    END;

    [External]
    PROCEDURE PreparePaymentExportDataJnl@12(VAR TempPaymentExportData@1000 : TEMPORARY Record 1226;GenJnlLine@1001 : Record 81;DataExchEntryNo@1003 : Integer;LineNo@1007 : Integer);
    VAR
      GeneralLedgerSetup@1009 : Record 98;
      Vendor@1006 : Record 23;
      VendorBankAccount@1008 : Record 288;
      PaymentMethod@1010 : Record 289;
      BankAccount@1002 : Record 270;
      BankExportImportSetup@1004 : Record 1200;
    BEGIN
      GeneralLedgerSetup.GET;
      Vendor.GET(GenJnlLine."Account No.");

      WITH TempPaymentExportData DO BEGIN
        BankAccount.GET(GenJnlLine."Bal. Account No.");
        BankAccount.GetBankExportImportSetup(BankExportImportSetup);
        SetPreserveNonLatinCharacters(BankExportImportSetup."Preserve Non-Latin Characters");

        INIT;
        "Data Exch Entry No." := DataExchEntryNo;
        "Sender Bank Account Code" := GenJnlLine."Bal. Account No.";

        IF VendorBankAccount.GET(GenJnlLine."Account No.",GenJnlLine."Recipient Bank Account") THEN BEGIN
          IF BankAccount."Country/Region Code" = VendorBankAccount."Country/Region Code" THEN BEGIN
            //ABSXXX KNH 19/11/19 --> Temporary fix until it can be included in Extension
            //Amount := GenJnlLine."Amount (LCY)";
            Amount := GenJnlLine.Amount;
            //ABSXXX KNH 19/11/19 <-- Temporary fix until it can be included in Extension
            "Currency Code" := GeneralLedgerSetup."LCY Code";
          END ELSE BEGIN
            Amount := GenJnlLine.Amount;
            "Currency Code" := GeneralLedgerSetup.GetCurrencyCode(GenJnlLine."Currency Code");
          END;

          "Recipient Bank Acc. No." :=
            COPYSTR(VendorBankAccount.GetBankAccountNo,1,MAXSTRLEN("Recipient Bank Acc. No."));
          "Recipient Reg. No." := VendorBankAccount."Bank Branch No.";
          "Recipient Acc. No." := VendorBankAccount."Bank Account No.";
          "Recipient Bank Country/Region" := VendorBankAccount."Country/Region Code";
          "Recipient Bank Name" := COPYSTR(VendorBankAccount.Name,1,35);
          "Recipient Bank Address" := COPYSTR(VendorBankAccount.Address,1,35);
          "Recipient Bank City" := COPYSTR(VendorBankAccount."Post Code" + VendorBankAccount.City,1,35);
          "Recipient Bank BIC" := VendorBankAccount."SWIFT Code";
        END ELSE
          IF GenJnlLine."Creditor No." <> '' THEN BEGIN
            Amount := GenJnlLine."Amount (LCY)";
            "Currency Code" := GeneralLedgerSetup."LCY Code";
          END;

        "Recipient Name" := COPYSTR(Vendor.Name,1,35);
        "Recipient Address" := COPYSTR(Vendor.Address,1,35);
        "Recipient City" := COPYSTR(Vendor."Post Code" + ' ' + Vendor.City,1,35);
        "Transfer Date" := GenJnlLine."Posting Date";
        "Message to Recipient 1" := COPYSTR(GenJnlLine."Message to Recipient",1,35);
        "Message to Recipient 2" := COPYSTR(GenJnlLine."Message to Recipient",36,70);
        "Document No." := GenJnlLine."Document No.";
        "Applies-to Ext. Doc. No." := GenJnlLine."Applies-to Ext. Doc. No.";
        "Short Advice" := GenJnlLine."Applies-to Ext. Doc. No.";
        "Line No." := LineNo;
        "Payment Reference" := GenJnlLine."Payment Reference";
        IF PaymentMethod.GET(GenJnlLine."Payment Method Code") THEN
          "Data Exch. Line Def Code" := PaymentMethod."Pmt. Export Line Definition";
        "Recipient Creditor No." := GenJnlLine."Creditor No.";
        OnBeforeInsertPmtExportDataJnlFromGenJnlLine(TempPaymentExportData,GenJnlLine,GeneralLedgerSetup);
        INSERT(TRUE);
      END;
    END;

    [External]
    PROCEDURE EnableExportToServerTempFile@27(SilentServerMode@1000 : Boolean;ServerFileExtension@1001 : Text[3]);
    BEGIN
      PaymentExportMgt.EnableExportToServerTempFile(SilentServerMode,ServerFileExtension);
    END;

    [External]
    PROCEDURE GetServerTempFileName@29() : Text[1024];
    BEGIN
      EXIT(PaymentExportMgt.GetServerTempFileName);
    END;

    [Integration]
    PROCEDURE OnBeforeInsertPmtExportDataJnlFromGenJnlLine@67(VAR PaymentExportData@1000 : Record 1226;GenJournalLine@1001 : Record 81;GeneralLedgerSetup@1002 : Record 98);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforeCreateGenJnlDataExchLine@213(DataExch@1219 : Record 1220;GenJournalLine@1218 : Record 81;LineNo@1217 : Integer;VAR LineAmount@1216 : Decimal;VAR TotalAmount@1215 : Decimal;VAR TransferDate@1214 : Date;VAR Handled@1213 : Boolean);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforePaymentExport@214(BalAccountNo@1213 : Code[20];DataExchEntryNo@1214 : Integer;LineCount@1215 : Integer;TotalAmount@1216 : Decimal;TransferDate@1217 : Date;VAR Handled@1218 : Boolean);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnCheckGenJnlLine@215(GenJournalLine@1213 : Record 81);
    BEGIN
    END;

    BEGIN
    {
      ABSXXX KNH 19/11/19 --> Temporary fix until it can be included in Extension
    }
    END.
  }
}

OBJECT Codeunit 5775 Whse. Management
{
  OBJECT-PROPERTIES
  {
    Date=07/07/20;
    Time=12:24:54;
    Modified=Yes;
    Version List=NAVW111.00.00.27667,MSHF,ABS001;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The Source Document is not defined.;ENG=The Source Document is not defined.';

    [External]
    PROCEDURE GetSourceDocument@2(SourceType@1001 : Integer;SourceSubtype@1002 : Integer) : Integer;
    VAR
      SourceDocument@1000 : ',S. Order,S. Invoice,S. Credit Memo,S. Return Order,P. Order,P. Invoice,P. Credit Memo,P. Return Order,Inb. Transfer,Outb. Transfer,Prod. Consumption,Item Jnl.,Phys. Invt. Jnl.,Reclass. Jnl.,Consumption Jnl.,Output Jnl.,BOM Jnl.,Serv. Order,Job Jnl.,Assembly Consumption,Assembly Order';
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          CASE SourceSubtype OF
            1:
              EXIT(SourceDocument::"S. Order");
            2:
              EXIT(SourceDocument::"S. Invoice");
            3:
              EXIT(SourceDocument::"S. Credit Memo");
            5:
              EXIT(SourceDocument::"S. Return Order");
          END;
        DATABASE::"Purchase Line":
          CASE SourceSubtype OF
            1:
              EXIT(SourceDocument::"P. Order");
            2:
              EXIT(SourceDocument::"P. Invoice");
            3:
              EXIT(SourceDocument::"P. Credit Memo");
            5:
              EXIT(SourceDocument::"P. Return Order");
          END;
        DATABASE::"Service Line":
          EXIT(SourceDocument::"Serv. Order");
        DATABASE::"Prod. Order Component":
          EXIT(SourceDocument::"Prod. Consumption");
        DATABASE::"Assembly Line":
          EXIT(SourceDocument::"Assembly Consumption");
        DATABASE::"Assembly Header":
          EXIT(SourceDocument::"Assembly Order");
        DATABASE::"Transfer Line":
          CASE SourceSubtype OF
            0:
              EXIT(SourceDocument::"Outb. Transfer");
            1:
              EXIT(SourceDocument::"Inb. Transfer");
          END;
        DATABASE::"Item Journal Line":
          CASE SourceSubtype OF
            0:
              EXIT(SourceDocument::"Item Jnl.");
            1:
              EXIT(SourceDocument::"Reclass. Jnl.");
            2:
              EXIT(SourceDocument::"Phys. Invt. Jnl.");
            4:
              EXIT(SourceDocument::"Consumption Jnl.");
            5:
              EXIT(SourceDocument::"Output Jnl.");
          END;
        DATABASE::"Job Journal Line":
          EXIT(SourceDocument::"Job Jnl.");
      END;
      ERROR(Text000);
    END;

    [External]
    PROCEDURE GetSourceType@1(WhseWkshLine@1000 : Record 7326) SourceType : Integer;
    BEGIN
      WITH WhseWkshLine DO
        CASE "Whse. Document Type" OF
          "Whse. Document Type"::Receipt:
            SourceType := DATABASE::"Posted Whse. Receipt Line";
          "Whse. Document Type"::Shipment:
            SourceType := DATABASE::"Warehouse Shipment Line";
          "Whse. Document Type"::Production:
            SourceType := DATABASE::"Prod. Order Component";
          "Whse. Document Type"::Assembly:
            SourceType := DATABASE::"Assembly Line";
          "Whse. Document Type"::"Internal Put-away":
            SourceType := DATABASE::"Whse. Internal Put-away Line";
          "Whse. Document Type"::"Internal Pick":
            SourceType := DATABASE::"Whse. Internal Pick Line";
        END;
    END;

    [External]
    PROCEDURE GetOutboundDocLineQtyOtsdg@3(SourceType@1006 : Integer;SourceSubType@1005 : Integer;SourceNo@1004 : Code[20];SourceLineNo@1003 : Integer;SourceSubLineNo@1002 : Integer;VAR QtyOutstanding@1000 : Decimal;VAR QtyBaseOutstanding@1001 : Decimal);
    VAR
      WhseShptLine@1009 : Record 7321;
    BEGIN
      WITH WhseShptLine DO BEGIN
        SETCURRENTKEY("Source Type");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubType);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Source Line No.",SourceLineNo);
        IF FINDFIRST THEN BEGIN
          CALCFIELDS("Pick Qty. (Base)","Pick Qty.");
          CALCSUMS(Quantity,"Qty. (Base)");
          QtyOutstanding := Quantity - "Pick Qty." - "Qty. Picked";
          QtyBaseOutstanding := "Qty. (Base)" - "Pick Qty. (Base)" - "Qty. Picked (Base)";
        END ELSE
          GetSrcDocLineQtyOutstanding(SourceType,SourceSubType,SourceNo,
            SourceLineNo,SourceSubLineNo,QtyOutstanding,QtyBaseOutstanding);
      END;
    END;

    LOCAL PROCEDURE GetSrcDocLineQtyOutstanding@7(SourceType@1006 : Integer;SourceSubType@1005 : Integer;SourceNo@1004 : Code[20];SourceLineNo@1003 : Integer;SourceSubLineNo@1002 : Integer;VAR QtyOutstanding@1001 : Decimal;VAR QtyBaseOutstanding@1000 : Decimal);
    VAR
      SalesLine@1008 : Record 37;
      PurchaseLine@1009 : Record 39;
      TransferLine@1010 : Record 5741;
      ServiceLine@1013 : Record 5902;
      ProdOrderComp@1011 : Record 5407;
      AssemblyLine@1007 : Record 901;
      ProdOrderLine@1012 : Record 5406;
    BEGIN
      CASE SourceType OF
        DATABASE::"Sales Line":
          IF SalesLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := SalesLine."Outstanding Quantity";
            QtyBaseOutstanding := SalesLine."Outstanding Qty. (Base)";
          END;
        DATABASE::"Purchase Line":
          IF PurchaseLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := PurchaseLine."Outstanding Quantity";
            QtyBaseOutstanding := PurchaseLine."Outstanding Qty. (Base)";
          END;
        DATABASE::"Transfer Line":
          IF TransferLine.GET(SourceNo,SourceLineNo) THEN
            CASE SourceSubType OF
              0: // Direction = Outbound
                BEGIN
                  QtyOutstanding :=
                    ROUND(TransferLine."Whse Outbnd. Otsdg. Qty (Base)" / (QtyOutstanding / QtyBaseOutstanding),0.00001);
                  QtyBaseOutstanding := TransferLine."Whse Outbnd. Otsdg. Qty (Base)";
                END;
              1: // Direction = Inbound
                BEGIN
                  QtyOutstanding :=
                    ROUND(TransferLine."Whse. Inbnd. Otsdg. Qty (Base)" / (QtyOutstanding / QtyBaseOutstanding),0.00001);
                  QtyBaseOutstanding := TransferLine."Whse. Inbnd. Otsdg. Qty (Base)";
                END;
            END;
        DATABASE::"Service Line":
          IF ServiceLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := ServiceLine."Outstanding Quantity";
            QtyBaseOutstanding := ServiceLine."Outstanding Qty. (Base)";
          END;
        DATABASE::"Prod. Order Component":
          IF ProdOrderComp.GET(SourceSubType,SourceNo,SourceLineNo,SourceSubLineNo) THEN BEGIN
            QtyOutstanding := ProdOrderComp."Remaining Quantity";
            QtyBaseOutstanding := ProdOrderComp."Remaining Qty. (Base)";
          END;
        DATABASE::"Assembly Line":
          IF AssemblyLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := AssemblyLine."Remaining Quantity";
            QtyBaseOutstanding := AssemblyLine."Remaining Quantity (Base)";
          END;
        DATABASE::"Prod. Order Line":
          IF ProdOrderLine.GET(SourceSubType,SourceNo,SourceLineNo) THEN BEGIN
            QtyOutstanding := ProdOrderLine."Remaining Quantity";
            QtyBaseOutstanding := ProdOrderLine."Remaining Qty. (Base)";
          END;
        ELSE BEGIN
          QtyOutstanding := 0;
          QtyBaseOutstanding := 0;
        END;
      END;
    END;

    [External]
    PROCEDURE SetSourceFilterForWhseRcptLine@5(VAR WarehouseReceiptLine@1000 : Record 7317;SourceType@1004 : Integer;SourceSubType@1003 : Option;SourceNo@1002 : Code[20];SourceLineNo@1001 : Integer;SetKey@1005 : Boolean);
    BEGIN
      WITH WarehouseReceiptLine DO BEGIN
        IF SetKey THEN
          SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
        SETRANGE("Source Type",SourceType);
        IF SourceSubType >= 0 THEN
          SETRANGE("Source Subtype",SourceSubType);
        SETRANGE("Source No.",SourceNo);
        IF SourceLineNo >= 0 THEN
          SETRANGE("Source Line No.",SourceLineNo);
      END;
    END;

    [External]
    PROCEDURE SetSourceFilterForPostedWhseRcptLine@100000000(PostedWhseReceiptLine@100000000 : Record 7319;SourceType@100000001 : Integer;SourceSubType@100000002 : Option;SourceNo@100000003 : Code[20];SourceLineNo@100000004 : Integer;SetKey@100000005 : Boolean);
    BEGIN
      //ABS001 KNH 07/07/20 -->
      BEGIN
        WITH PostedWhseReceiptLine DO BEGIN
          IF SetKey THEN
            SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
            SETRANGE("Source Type",SourceType);
            IF SourceSubType >= 0 THEN
              SETRANGE("Source Subtype",SourceSubType);
            SETRANGE("Source No.",SourceNo);
            IF SourceLineNo >= 0 THEN
              SETRANGE("Source Line No.",SourceLineNo);
          END;
        END;
      //ABS001 KNH 07/07/20 <--
    END;

    [External]
    PROCEDURE SetSourceFilterForPostedWhseShptLine@100000001(PostedWhseShipmentLine@100000000 : Record 7323;SourceType@100000001 : Integer;SourceSubType@100000002 : Option;SourceNo@100000003 : Code[20];SourceLineNo@100000004 : Integer;SetKey@100000005 : Boolean);
    BEGIN
      //ABS001 KNH 07/07/20 -->
      BEGIN
        WITH PostedWhseShipmentLine DO BEGIN
          IF SetKey THEN
            SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
          SETRANGE("Source Type",SourceType);
          IF SourceSubType >= 0 THEN
            SETRANGE("Source Subtype",SourceSubType);
          SETRANGE("Source No.",SourceNo);
          IF SourceLineNo >= 0 THEN
            SETRANGE("Source Line No.",SourceLineNo);
        END;
      END;
      //ABS001 KNH 07/07/20 <--
    END;

    BEGIN
    {
      ABS001  INC0125522 KNH 07/07/20 - 2 new functions SetSourceFilterForPostedWhseRcptLine, SetSourceFilterForPostedWhseRcptLine for Undo Rcpt/Shpt
    }
    END.
  }
}

OBJECT Codeunit 7320 Whse. Undo Quantity
{
  OBJECT-PROPERTIES
  {
    Date=07/07/20;
    Time=12:23:22;
    Modified=Yes;
    Version List=NAVW111.00.00.27667,MSHF,ABS001;
  }
  PROPERTIES
  {
    TableNo=83;
    Permissions=TableData 6509=md,
                TableData 7323=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WMSMgmt@1001 : Codeunit 7302;
      Text000@1000 : TextConst 'ENU=Assertion failed, %1.;ENG=Assertion failed, %1.';
      Text001@1002 : TextConst 'ENU=There is not enough space to insert correction lines.;ENG=There is not enough space to insert correction lines.';
      WhseJnlRegisterLine@1003 : Codeunit 7301;

    [External]
    PROCEDURE InsertTempWhseJnlLine@7302(ItemJnlLine@1000 : Record 83;SourceType@1001 : Integer;SourceSubType@1002 : Integer;SourceNo@1007 : Code[20];SourceLineNo@1005 : Integer;RefDoc@1006 : Integer;VAR TempWhseJnlLine@1008 : TEMPORARY Record 7311;VAR NextLineNo@1004 : Integer);
    VAR
      WhseEntry@1009 : Record 7312;
      WhseMgt@1003 : Codeunit 5775;
    BEGIN
      WITH ItemJnlLine DO BEGIN
        WhseEntry.RESET;
        WhseEntry.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,TRUE);
        WhseEntry.SETRANGE("Reference No.","Document No.");
        WhseEntry.SETRANGE("Item No.","Item No.");
        IF WhseEntry.FIND('+') THEN
          REPEAT
            TempWhseJnlLine.INIT;
            IF WhseEntry."Entry Type" = WhseEntry."Entry Type"::"Positive Adjmt." THEN
              "Entry Type" := "Entry Type"::"Negative Adjmt."
            ELSE
              "Entry Type" := "Entry Type"::"Positive Adjmt.";
            Quantity := ABS(WhseEntry.Quantity);
            "Quantity (Base)" := ABS(WhseEntry."Qty. (Base)");
            "Qty. per Unit of Measure" := WhseEntry."Qty. per Unit of Measure";
            WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,TempWhseJnlLine,FALSE);
            TempWhseJnlLine.SetSource(SourceType,SourceSubType,SourceNo,SourceLineNo,0);
            TempWhseJnlLine."Source Document" :=
              WhseMgt.GetSourceDocument(TempWhseJnlLine."Source Type",TempWhseJnlLine."Source Subtype");
            TempWhseJnlLine."Reference Document" := RefDoc;
            TempWhseJnlLine."Reference No." := "Document No.";
            TempWhseJnlLine."Location Code" := "Location Code";
            TempWhseJnlLine."Zone Code" := WhseEntry."Zone Code";
            TempWhseJnlLine."Bin Code" := WhseEntry."Bin Code";
            TempWhseJnlLine.SetWhseDoc(WhseEntry."Whse. Document Type",WhseEntry."Whse. Document No.",0);
            TempWhseJnlLine."Unit of Measure Code" := WhseEntry."Unit of Measure Code";
            TempWhseJnlLine."Line No." := NextLineNo;
            TempWhseJnlLine."Serial No." := WhseEntry."Serial No.";
            TempWhseJnlLine."Lot No." := WhseEntry."Lot No.";
            TempWhseJnlLine."Expiration Date" := WhseEntry."Expiration Date";
            IF  "Entry Type" = "Entry Type"::"Negative Adjmt." THEN BEGIN
              TempWhseJnlLine."From Zone Code" := TempWhseJnlLine."Zone Code";
              TempWhseJnlLine."From Bin Code" := TempWhseJnlLine."Bin Code";
            END ELSE BEGIN
              TempWhseJnlLine."To Zone Code" := TempWhseJnlLine."Zone Code";
              TempWhseJnlLine."To Bin Code" := TempWhseJnlLine."Bin Code";
            END;
            TempWhseJnlLine.INSERT;
            NextLineNo := TempWhseJnlLine."Line No." + 10000;
          UNTIL WhseEntry.NEXT(-1) = 0;
      END;
    END;

    [External]
    PROCEDURE PostTempWhseJnlLine@5(VAR TempWhseJnlLine@1000 : TEMPORARY Record 7311);
    BEGIN
      PostTempWhseJnlLineCache(TempWhseJnlLine,WhseJnlRegisterLine);
    END;

    [External]
    PROCEDURE PostTempWhseJnlLineCache@21(VAR TempWhseJnlLine@1000 : TEMPORARY Record 7311;VAR WhseJnlRegLine@1002 : Codeunit 7301);
    BEGIN
      OnBeforePostTempWhseJnlLine(TempWhseJnlLine);
      IF TempWhseJnlLine.FIND('-') THEN
        REPEAT
          WhseJnlRegLine.RegisterWhseJnlLine(TempWhseJnlLine);
        UNTIL TempWhseJnlLine.NEXT = 0;
    END;

    [External]
    PROCEDURE UndoPostedWhseRcptLine@10(VAR PostedWhseRcptLine@1000 : Record 7319);
    BEGIN
      PostedWhseRcptLine.TESTFIELD("Source Type");
      InsertPostedWhseRcptLine(PostedWhseRcptLine);
      DeleteWhsePutAwayRequest(PostedWhseRcptLine);
      DeleteWhseItemEntryRelationRcpt(PostedWhseRcptLine);
    END;

    [External]
    PROCEDURE UndoPostedWhseShptLine@3(VAR PostedWhseShptLine@1000 : Record 7323);
    BEGIN
      PostedWhseShptLine.TESTFIELD("Source Type");
      InsertPostedWhseShptLine(PostedWhseShptLine);
      DeleteWhsePickRequest(PostedWhseShptLine);
      DeleteWhseItemEntryRelationShpt(PostedWhseShptLine);
    END;

    [External]
    PROCEDURE UpdateRcptSourceDocLines@1(VAR PostedWhseRcptLine@1000 : Record 7319);
    BEGIN
      UpdateWhseRcptLine(PostedWhseRcptLine);
      UpdateWhseRequestRcpt(PostedWhseRcptLine);
    END;

    [External]
    PROCEDURE UpdateShptSourceDocLines@6(VAR PostedWhseShptLine@1000 : Record 7323);
    BEGIN
      UpdateWhseShptLine(PostedWhseShptLine);
      UpdateWhseRequestShpt(PostedWhseShptLine);
    END;

    [External]
    PROCEDURE FindPostedWhseRcptLine@11(VAR PostedWhseRcptLine@1000 : Record 7319;UndoType@1006 : Integer;UndoID@1005 : Code[20];SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1001 : Integer) Ok : Boolean;
    VAR
      WhseManagement@100000000 : Codeunit 5775;
    BEGIN
      IF NOT PostedWhseRcptLine.READPERMISSION THEN
        EXIT;
      WITH PostedWhseRcptLine DO BEGIN
        RESET;
        CASE UndoType OF
          DATABASE::"Purch. Rcpt. Line":
            SETRANGE("Posted Source Document","Posted Source Document"::"Posted Receipt");
          DATABASE::"Return Receipt Line":
            SETRANGE("Posted Source Document","Posted Source Document"::"Posted Return Receipt");
          ELSE
            EXIT;
        END;
        //SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE); //ABS001 KNH 07/07/20
        WhseManagement.SetSourceFilterForPostedWhseRcptLine(PostedWhseRcptLine,SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE); //ABS001 KNH 07/07/20
        SETRANGE("Posted Source No.",UndoID);
        IF FINDFIRST THEN BEGIN
          IF COUNT > 1 THEN
            ERROR(Text000,TABLECAPTION); // Assert: only one posted line.
          Ok := TRUE;
        END;
      END;
    END;

    [External]
    PROCEDURE FindPostedWhseShptLine@2(VAR PostedWhseShptLine@1000 : Record 7323;UndoType@1006 : Integer;UndoID@1005 : Code[20];SourceType@1004 : Integer;SourceSubtype@1003 : Integer;SourceID@1002 : Code[20];SourceRefNo@1001 : Integer) Ok : Boolean;
    VAR
      PostedWhseShptLine2@1007 : Record 7323;
      WhseManagement@100000000 : Codeunit 5775;
    BEGIN
      IF NOT PostedWhseShptLine.READPERMISSION THEN
        EXIT;
      WITH PostedWhseShptLine DO BEGIN
        RESET;
        CASE UndoType OF
          DATABASE::"Sales Shipment Line",
          DATABASE::"Service Shipment Line":
            SETRANGE("Posted Source Document","Posted Source Document"::"Posted Shipment");
          DATABASE::"Return Shipment Line":
            SETRANGE("Posted Source Document","Posted Source Document"::"Posted Return Shipment");
          ELSE
            EXIT;
        END;
        //SetSourceFilter(SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE); //ABS001 KNH 07/07/20
        WhseManagement.SetSourceFilterForPostedWhseShptLine(PostedWhseShptLine,SourceType,SourceSubtype,SourceID,SourceRefNo,TRUE); //ABS001 KNH 07/07/20
        SETRANGE("Posted Source No.",UndoID);
        IF FINDFIRST THEN BEGIN
          PostedWhseShptLine2.COPYFILTERS(PostedWhseShptLine);
          PostedWhseShptLine2.SETFILTER("No.",'<>%1',"No.");
          PostedWhseShptLine2.SETFILTER("Line No.",'<>%1',"Line No.");
          IF NOT PostedWhseShptLine2.ISEMPTY AND NOT IsATO(UndoType,UndoID,SourceRefNo) THEN
            ERROR(Text000,TABLECAPTION); // Assert: only one posted line.
          Ok := TRUE;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertPostedWhseRcptLine@14(OldPostedWhseRcptLine@1000 : Record 7319);
    VAR
      NewPostedWhseRcptLine@1001 : Record 7319;
      LineSpacing@1002 : Integer;
    BEGIN
      WITH OldPostedWhseRcptLine DO BEGIN
        "Qty. Put Away" := Quantity;
        "Qty. Put Away (Base)" := "Qty. (Base)";
        MODIFY;

        NewPostedWhseRcptLine.SETRANGE("No.","No.");
        NewPostedWhseRcptLine."No." := "No.";
        NewPostedWhseRcptLine."Line No." := "Line No.";
        NewPostedWhseRcptLine.FIND('=');

        IF NewPostedWhseRcptLine.FIND('>') THEN BEGIN
          LineSpacing := (NewPostedWhseRcptLine."Line No." - "Line No.") DIV 2;
          IF LineSpacing = 0 THEN
            ERROR(Text001);
        END ELSE
          LineSpacing := 10000;

        NewPostedWhseRcptLine.RESET;
        NewPostedWhseRcptLine.INIT;
        NewPostedWhseRcptLine.COPY(OldPostedWhseRcptLine);
        NewPostedWhseRcptLine."Line No." := "Line No." + LineSpacing;
        NewPostedWhseRcptLine.Quantity := -Quantity;
        NewPostedWhseRcptLine."Qty. (Base)" := -"Qty. (Base)";
        NewPostedWhseRcptLine."Qty. Put Away" := -"Qty. Put Away";
        NewPostedWhseRcptLine."Qty. Put Away (Base)" := -"Qty. Put Away (Base)";
        NewPostedWhseRcptLine.Status := NewPostedWhseRcptLine.Status::"Completely Put Away";
        NewPostedWhseRcptLine.INSERT;

        Status := Status::"Completely Put Away";
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE InsertPostedWhseShptLine@7(OldPostedWhseShptLine@1000 : Record 7323);
    VAR
      NewPostedWhseShptLine@1001 : Record 7323;
      LineSpacing@1002 : Integer;
    BEGIN
      WITH OldPostedWhseShptLine DO BEGIN
        NewPostedWhseShptLine.SETRANGE("No.","No.");
        NewPostedWhseShptLine."No." := "No.";
        NewPostedWhseShptLine."Line No." := "Line No.";
        NewPostedWhseShptLine.FIND('=');

        IF NewPostedWhseShptLine.FIND('>') THEN BEGIN
          LineSpacing := (NewPostedWhseShptLine."Line No." - "Line No.") DIV 2;
          IF LineSpacing = 0 THEN
            ERROR(Text001);
        END ELSE
          LineSpacing := 10000;

        NewPostedWhseShptLine.RESET;
        NewPostedWhseShptLine.INIT;
        NewPostedWhseShptLine.COPY(OldPostedWhseShptLine);
        NewPostedWhseShptLine."Line No." := "Line No." + LineSpacing;
        NewPostedWhseShptLine.Quantity := -Quantity;
        NewPostedWhseShptLine."Qty. (Base)" := -"Qty. (Base)";
        NewPostedWhseShptLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE DeleteWhsePutAwayRequest@16(VAR PostedWhseRcptLine@1003 : Record 7319);
    VAR
      PostedWhseRcptLine2@1000 : Record 7319;
      WhsePutAwayRequest@1002 : Record 7324;
      Sum@1001 : Decimal;
    BEGIN
      PostedWhseRcptLine2.SETRANGE("No.",PostedWhseRcptLine."No.");
      IF PostedWhseRcptLine2.FIND('-') THEN BEGIN
        REPEAT
          Sum := Sum + PostedWhseRcptLine2."Qty. (Base)";
        UNTIL PostedWhseRcptLine2.NEXT = 0;

        IF Sum = 0 THEN BEGIN
          WhsePutAwayRequest.SETRANGE("Document Type",WhsePutAwayRequest."Document Type"::Receipt);
          WhsePutAwayRequest.SETRANGE("Document No.",PostedWhseRcptLine."No.");
          WhsePutAwayRequest.DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteWhsePickRequest@4(VAR PostedWhseShptLine@1003 : Record 7323);
    VAR
      PostedWhseShptLine2@1000 : Record 7323;
      WhsePickRequest@1002 : Record 7325;
      Sum@1001 : Decimal;
    BEGIN
      PostedWhseShptLine2.SETRANGE("No.",PostedWhseShptLine."No.");
      IF PostedWhseShptLine2.FIND('-') THEN BEGIN
        REPEAT
          Sum := Sum + PostedWhseShptLine2."Qty. (Base)";
        UNTIL PostedWhseShptLine2.NEXT = 0;

        IF Sum = 0 THEN BEGIN
          WhsePickRequest.SETRANGE("Document Type",WhsePickRequest."Document Type"::Shipment);
          WhsePickRequest.SETRANGE("Document No.",PostedWhseShptLine."No.");
          IF NOT WhsePickRequest.ISEMPTY THEN
            WhsePickRequest.DELETEALL;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateWhseRcptLine@15(VAR PostedWhseRcptLine@1002 : Record 7319);
    VAR
      WhseRcptHeader@1001 : Record 7316;
      WhseRcptLine@1000 : Record 7317;
      WhseManagement@1003 : Codeunit 5775;
    BEGIN
      WITH PostedWhseRcptLine DO BEGIN
        //>>MS HF
        //WhseRcptLine.SetSourceFilter("Source Type","Source Subtype","Source No.","Source Line No.",TRUE);
        WhseManagement.SetSourceFilterForWhseRcptLine(WhseRcptLine,"Source Type","Source Subtype","Source No.","Source Line No.",TRUE);
        //<<MS HF
        IF WhseRcptLine.FINDFIRST THEN BEGIN
          WhseRcptLine.VALIDATE("Qty. Outstanding",WhseRcptLine."Qty. Outstanding" + Quantity);
          WhseRcptLine.VALIDATE("Qty. Received",WhseRcptLine."Qty. Received" - Quantity);
          IF WhseRcptLine."Qty. Received" = 0 THEN BEGIN
            WhseRcptLine.Status := WhseRcptLine.Status::" ";
            WhseRcptHeader.GET(WhseRcptLine."No.");
            WhseRcptHeader."Document Status" := WhseRcptHeader."Document Status"::" ";
            WhseRcptHeader.MODIFY;
          END;
          WhseRcptLine.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateWhseShptLine@9(VAR PostedWhseShptLine@1002 : Record 7323);
    VAR
      WhseShptHeader@1001 : Record 7320;
      WhseShptLine@1000 : Record 7321;
    BEGIN
      WITH PostedWhseShptLine DO BEGIN
        WhseShptLine.SetSourceFilter("Source Type","Source Subtype","Source No.","Source Line No.",TRUE);
        IF WhseShptLine.FINDFIRST THEN BEGIN
          WhseShptLine.VALIDATE("Qty. Shipped",WhseShptLine."Qty. Shipped" - Quantity);
          WhseShptLine.VALIDATE("Qty. Outstanding",WhseShptLine."Qty. Outstanding" + Quantity);
          IF WhseShptLine."Qty. Shipped" = 0 THEN BEGIN
            WhseShptLine.Status := WhseShptLine.Status::" ";
            WhseShptHeader.GET(WhseShptLine."No.");
            WhseShptHeader."Document Status" := WhseShptHeader."Document Status"::" ";
            WhseShptHeader.MODIFY;
          END;
          WhseShptLine.MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE DeleteWhseItemEntryRelationRcpt@18(NewPostedWhseRcptLine@1002 : Record 7319);
    BEGIN
      WITH NewPostedWhseRcptLine DO
        DeleteWhseItemEntryRelation(DATABASE::"Posted Whse. Receipt Line","No.","Line No.");
    END;

    LOCAL PROCEDURE DeleteWhseItemEntryRelationShpt@17(NewPostedWhseShptLine@1002 : Record 7323);
    BEGIN
      WITH NewPostedWhseShptLine DO
        DeleteWhseItemEntryRelation(DATABASE::"Posted Whse. Shipment Line","No.","Line No.");
    END;

    LOCAL PROCEDURE DeleteWhseItemEntryRelation@20(SourceType@1004 : Integer;SourceNo@1002 : Code[20];SourceLineNo@1000 : Integer);
    VAR
      WhseItemEntryRelation@1001 : Record 6509;
    BEGIN
      WhseItemEntryRelation.SetSourceFilter(SourceType,0,SourceNo,SourceLineNo,TRUE);
      WhseItemEntryRelation.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateWhseRequestRcpt@12(VAR PostedWhseRcptLine@1002 : Record 7319);
    VAR
      PurchLine@1000 : Record 39;
      SalesLine@1003 : Record 37;
    BEGIN
      WITH PostedWhseRcptLine DO BEGIN
        CASE "Source Type" OF
          DATABASE::"Purchase Line":
            BEGIN
              PurchLine.GET("Source Subtype","Source No.","Source Line No.");
              IF NOT (PurchLine."Quantity Received" < PurchLine.Quantity) THEN
                EXIT;
            END;
          DATABASE::"Sales Line":
            BEGIN
              SalesLine.GET("Source Subtype","Source No.","Source Line No.");
              IF NOT (SalesLine."Return Qty. Received" < SalesLine.Quantity) THEN
                EXIT;
            END;
        END;
        UpdateWhseRequest("Source Type","Source Subtype","Source No.","Location Code");
      END;
    END;

    LOCAL PROCEDURE UpdateWhseRequestShpt@8(VAR PostedWhseShptLine@1002 : Record 7323);
    VAR
      PurchLine@1000 : Record 39;
      SalesLine@1003 : Record 37;
    BEGIN
      WITH PostedWhseShptLine DO BEGIN
        CASE "Source Type" OF
          DATABASE::"Sales Line":
            BEGIN
              SalesLine.GET("Source Subtype","Source No.","Source Line No.");
              IF NOT (SalesLine."Quantity Shipped" < SalesLine.Quantity) THEN
                EXIT;
            END;
          DATABASE::"Purchase Line":
            BEGIN
              PurchLine.GET("Source Subtype","Source No.","Source Line No.");
              IF NOT (PurchLine."Return Qty. Shipped" < PurchLine.Quantity) THEN
                EXIT;
            END;
        END;
        UpdateWhseRequest("Source Type","Source Subtype","Source No.","Location Code");
      END;
    END;

    LOCAL PROCEDURE UpdateWhseRequest@26(SourceType@1006 : Integer;SourceSubType@1005 : Integer;SourceNo@1004 : Code[20];LocationCode@1000 : Code[10]);
    VAR
      WhseRequest@1001 : Record 5765;
    BEGIN
      WITH WhseRequest DO BEGIN
        SETCURRENTKEY("Source Type","Source Subtype","Source No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubType);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Location Code",LocationCode);
        IF FINDFIRST AND "Completely Handled" THEN BEGIN
          "Completely Handled" := FALSE;
          MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE IsATO@13(UndoType@1005 : Integer;UndoID@1004 : Code[20];SourceRefNo@1000 : Integer) : Boolean;
    VAR
      PostedATOLink@1001 : Record 914;
    BEGIN
      IF UndoType = DATABASE::"Sales Shipment Line" THEN BEGIN
        PostedATOLink.SETRANGE("Document Type",PostedATOLink."Document Type"::"Sales Shipment");
        PostedATOLink.SETRANGE("Document No.",UndoID);
        PostedATOLink.SETRANGE("Document Line No.",SourceRefNo);
        EXIT(NOT PostedATOLink.ISEMPTY);
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostTempWhseJnlLine@19(VAR TempWhseJnlLine@1000 : TEMPORARY Record 7311);
    BEGIN
    END;

    BEGIN
    {
      ABS001 INC0125522 KNH 07/07/20 - Amend 2 func FindPostedWhseRcptLine, FindPostedWhseShptLine for Undo Shpt/Rcpt
    }
    END.
  }
}

OBJECT Page 20 General Ledger Entries
{
  OBJECT-PROPERTIES
  {
    Date=19/11/19;
    Time=14:53:54;
    Modified=Yes;
    Version List=NAVW111.00.00.26893;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=General Ledger Entries;
               ENG=General Ledger Entries];
    SourceTable=Table17;
    DataCaptionExpr=GetCaption;
    SourceTableView=SORTING(G/L Account No.,Posting Date)
                    ORDER(Descending);
    PageType=List;
    OnInit=BEGIN
             AmountVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 SetConrolVisibility;

                 IF GETFILTERS <> '' THEN
                   IF FINDFIRST THEN;

                 // Contextual Power BI FactBox: filtering available reports, setting context, loading Power BI related user settings
                 CurrPage."Power BI Report FactBox".PAGE.SetNameFilter(CurrPage.CAPTION);
                 CurrPage."Power BI Report FactBox".PAGE.SetContext(CurrPage.OBJECTID(FALSE));
                 CurrPage."Power BI Report FactBox".PAGE.SetCurrentListSelection("G/L Account No.",FALSE);
               END;

    OnAfterGetCurrRecord=VAR
                           IncomingDocument@1000 : Record 130;
                         BEGIN
                           HasIncomingDocument := IncomingDocument.PostedDocExists("Document No.","Posting Date");
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);

                           // Contextual Power BI FactBox: send data to filter the report in the FactBox
                           CurrPage."Power BI Report FactBox".PAGE.SetCurrentListSelection(FORMAT("Entry No."),TRUE);
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 48      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ENG=Ent&ry];
                      Image=Entry }
      { 49      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ShowDimensions;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 27      ;2   ;Action    ;
                      Name=SetDimensionFilter;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Set Dimension Filter;
                                 ENG=Set Dimension Filter];
                      ToolTipML=[ENU=Limit the entries according to the dimension filters that you specify. NOTE: If you use a high number of dimension combinations, this function may not work and can result in a message that the SQL server only supports a maximum of 2100 parameters.;
                                 ENG=Limit the entries according to the dimension filters that you specify. NOTE: If you use a high number of dimension combinations, this function may not work and can result in a message that the SQL server only supports a maximum of 2100 parameters.];
                      ApplicationArea=#Suite;
                      Image=Filter;
                      OnAction=BEGIN
                                 SETFILTER("Dimension Set ID",DimensionSetIDFilter.LookupFilter);
                               END;
                                }
      { 50      ;2   ;Action    ;
                      Name=GLDimensionOverview;
                      AccessByPermission=TableData 348=R;
                      CaptionML=[ENU=G/L Dimension Overview;
                                 ENG=G/L Dimension Overview];
                      ToolTipML=[ENU=View an overview of general ledger entries and dimensions.;
                                 ENG=View an overview of general ledger entries and dimensions.];
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      OnAction=VAR
                                 GLEntriesDimensionOverview@1000 : Page 563;
                               BEGIN
                                 IF ISTEMPORARY THEN BEGIN
                                   GLEntriesDimensionOverview.SetTempGLEntry(Rec);
                                   GLEntriesDimensionOverview.RUN;
                                 END ELSE
                                   PAGE.RUN(PAGE::"G/L Entries Dimension Overview",Rec);
                               END;
                                }
      { 65      ;2   ;Action    ;
                      AccessByPermission=TableData 27=R;
                      CaptionML=[ENU=Value Entries;
                                 ENG=Value Entries];
                      ToolTipML=[ENU=View all amounts relating to an item.;
                                 ENG=View all amounts relating to an item.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ValueLedger;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ShowValueEntries;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 57      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 63      ;2   ;Action    ;
                      Name=ReverseTransaction;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Reverse Transaction;
                                 ENG=Reverse Transaction];
                      ToolTipML=[ENU=Reverse a posted general ledger entry.;
                                 ENG=Reverse a posted general ledger entry.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ReverseRegister;
                      Scope=Repeater;
                      OnAction=VAR
                                 ReversalEntry@1000 : Record 179;
                               BEGIN
                                 CLEAR(ReversalEntry);
                                 IF Reversed THEN
                                   ReversalEntry.AlreadyReversedEntry(TABLECAPTION,"Entry No.");
                                 IF "Journal Batch Name" = '' THEN
                                   ReversalEntry.TestFieldError;
                                 TESTFIELD("Transaction No.");
                                 ReversalEntry.ReverseTransaction("Transaction No.")
                               END;
                                }
      { 15      ;2   ;ActionGroup;
                      Name=IncomingDocument;
                      CaptionML=[ENU=Incoming Document;
                                 ENG=Incoming Document];
                      ActionContainerType=NewDocumentItems;
                      Image=Documents }
      { 13      ;3   ;Action    ;
                      Name=IncomingDocCard;
                      CaptionML=[ENU=View Incoming Document;
                                 ENG=View Incoming Document];
                      ToolTipML=[ENU=View any incoming document records and file attachments that exist for the entry or document.;
                                 ENG=View any incoming document records and file attachments that exist for the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasIncomingDocument;
                      Image=ViewOrder;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.ShowCard("Document No.","Posting Date");
                               END;
                                }
      { 9       ;3   ;Action    ;
                      Name=SelectIncomingDoc;
                      AccessByPermission=TableData 130=R;
                      CaptionML=[ENU=Select Incoming Document;
                                 ENG=Select Incoming Document];
                      ToolTipML=[ENU=Select an incoming document record and file attachment that you want to link to the entry or document.;
                                 ENG=Select an incoming document record and file attachment that you want to link to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT HasIncomingDocument;
                      Image=SelectLineToApply;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.SelectIncomingDocumentForPostedDocument("Document No.","Posting Date",RECORDID);
                               END;
                                }
      { 3       ;3   ;Action    ;
                      Name=IncomingDocAttachFile;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Create Incoming Document from File;
                                 ENG=Create Incoming Document from File];
                      ToolTipML=[ENU=Create an incoming document record by selecting a file to attach, and then link the incoming document record to the entry or document.;
                                 ENG=Create an incoming document record by selecting a file to attach, and then link the incoming document record to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT HasIncomingDocument;
                      Image=Attach;
                      OnAction=VAR
                                 IncomingDocumentAttachment@1000 : Record 133;
                               BEGIN
                                 IncomingDocumentAttachment.NewAttachmentFromPostedDocument("Document No.","Posting Date");
                               END;
                                }
      { 24      ;1   ;Action    ;
                      CaptionML=[ENU=&Navigate;
                                 ENG=&Navigate];
                      ToolTipML=[ENU=Find all entries and documents that exist for the document number and posting date on the selected entry or document.;
                                 ENG=Find all entries and documents that exist for the document number and posting date on the selected entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Navigate;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Navigate@1000 : Page 344;
                               BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
      { 11      ;1   ;Action    ;
                      Name=DocsWithoutIC;
                      CaptionML=[ENU=Posted Documents without Incoming Document;
                                 ENG=Posted Documents without Incoming Document];
                      ToolTipML=[ENU=View posted purchase and sales documents under the G/L account that do not have related incoming document records.;
                                 ENG=View posted purchase and sales documents under the G/L account that do not have related incoming document records.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Documents;
                      OnAction=VAR
                                 PostedDocsWithNoIncBuf@1001 : Record 134;
                               BEGIN
                                 COPYFILTER("G/L Account No.",PostedDocsWithNoIncBuf."G/L Account No. Filter");
                                 PAGE.RUN(PAGE::"Posted Docs. With No Inc. Doc.",PostedDocsWithNoIncBuf);
                               END;
                                }
      { 23      ;1   ;ActionGroup;
                      CaptionML=[ENU=Display;
                                 ENG=Display] }
      { 22      ;2   ;Action    ;
                      Name=ReportFactBoxVisibility;
                      CaptionML=[ENU=Show/Hide Power BI Reports;
                                 ENG=Show/Hide Power BI Reports];
                      ToolTipML=[ENU=Select if the Power BI FactBox is visible or not.;
                                 ENG=Select if the Power BI FactBox is visible or not.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Report;
                      OnAction=BEGIN
                                 IF PowerBIVisible THEN
                                   PowerBIVisible := FALSE
                                 ELSE
                                   PowerBIVisible := TRUE;
                                 // save visibility value into the table
                                 CurrPage."Power BI Report FactBox".PAGE.SetFactBoxVisibility(PowerBIVisible);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the entry's posting date.;
                           ENG=Specifies the entry's posting date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date" }

    { 1000000000;2;Field  ;
                SourceExpr="Document Date" }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the Document Type that the entry belongs to.;
                           ENG=Specifies the Document Type that the entry belongs to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type" }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the entry's Document No.;
                           ENG=Specifies the entry's Document No.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No." }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the account that the entry has been posted to.;
                           ENG=Specifies the number of the account that the entry has been posted to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="G/L Account No." }

    { 40  ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the name of the account that the entry has been posted to.;
                           ENG=Specifies the name of the account that the entry has been posted to.];
                ApplicationArea=#Advanced;
                SourceExpr="G/L Account Name";
                Visible=FALSE }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the entry.;
                           ENG=Specifies a description of the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the related job.;
                           ENG=Specifies the number of the related job.];
                ApplicationArea=#Jobs;
                SourceExpr="Job No.";
                Visible=FALSE }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 1 Code";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 2 Code";
                Visible=FALSE }

    { 51  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the intercompany partner that the transaction is related to if the entry was created from an intercompany transaction.;
                           ENG=Specifies the code of the intercompany partner that the transaction is related to if the entry was created from an intercompany transaction.];
                ApplicationArea=#Intercompany;
                SourceExpr="IC Partner Code";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of transaction.;
                           ENG=Specifies the type of transaction.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Gen. Posting Type" }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor's or customer's trade type to link transactions made for this business partner with the appropriate general ledger account according to the general posting setup.;
                           ENG=Specifies the vendor's or customer's trade type to link transactions made for this business partner with the appropriate general ledger account according to the general posting setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Gen. Bus. Posting Group" }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the item's product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.;
                           ENG=Specifies the item's product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Gen. Prod. Posting Group" }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity that was posted on the entry.;
                           ENG=Specifies the quantity that was posted on the entry.];
                ApplicationArea=#Advanced;
                SourceExpr=Quantity;
                Visible=False }

    { 16  ;2   ;Field     ;
                Name=<Amount>;
                CaptionML=[ENU=Amount LCY;
                           ENG=Amount];
                ToolTipML=[ENU=Specifies the Amount of the entry.;
                           ENG=Specifies the Amount of the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Visible=AmountVisible }

    { 17  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits.;
                           ENG=Specifies the total of the ledger entries that represent debits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=DebitCreditVisible }

    { 19  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits.;
                           ENG=Specifies the total of the ledger entries that represent credits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=DebitCreditVisible }

    { 54  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the general ledger entry that is posted if you post in an additional reporting currency.;
                           ENG=Specifies the general ledger entry that is posted if you post in an additional reporting currency.];
                ApplicationArea=#Advanced;
                SourceExpr="Additional-Currency Amount";
                Visible=FALSE }

    { 36  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of VAT that is included in the total amount.;
                           ENG=Specifies the amount of VAT that is included in the total amount.];
                ApplicationArea=#Advanced;
                SourceExpr="VAT Amount";
                Visible=FALSE }

    { 52  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of account that a balancing entry is posted to, such as BANK for a cash account.;
                           ENG=Specifies the type of account that a balancing entry is posted to, such as BANK for a cash account.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. Account Type" }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the general ledger, customer, vendor, or bank account that the balancing entry is posted to, such as a cash account for cash purchases.;
                           ENG=Specifies the number of the general ledger, customer, vendor, or bank account that the balancing entry is posted to, such as a cash account for cash purchases.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. Account No." }

    { 46  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.;
                           ENG=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.];
                ApplicationArea=#Advanced;
                SourceExpr="User ID";
                Visible=FALSE }

    { 42  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the source code that specifies where the entry was created.;
                           ENG=Specifies the source code that specifies where the entry was created.];
                ApplicationArea=#Advanced;
                SourceExpr="Source Code";
                Visible=FALSE }

    { 44  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the reason code, a supplementary source code that enables you to trace the entry.;
                           ENG=Specifies the reason code, a supplementary source code that enables you to trace the entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Reason Code";
                Visible=FALSE }

    { 58  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the entry has been part of a reverse transaction (correction) made by the Reverse function.;
                           ENG=Specifies if the entry has been part of a reverse transaction (correction) made by the Reverse function.];
                ApplicationArea=#Advanced;
                SourceExpr=Reversed;
                Visible=FALSE }

    { 60  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the correcting entry. If the field Specifies a number, the entry cannot be reversed again.;
                           ENG=Specifies the number of the correcting entry. If the field Specifies a number, the entry cannot be reversed again.];
                ApplicationArea=#Advanced;
                SourceExpr="Reversed by Entry No.";
                Visible=FALSE }

    { 62  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the original entry that was undone by the reverse transaction.;
                           ENG=Specifies the number of the original entry that was undone by the reverse transaction.];
                ApplicationArea=#Advanced;
                SourceExpr="Reversed Entry No.";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the fixed asset entry.;
                           ENG=Specifies the number of the fixed asset entry.];
                ApplicationArea=#Advanced;
                SourceExpr="FA Entry Type";
                Visible=FALSE }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the fixed asset entry.;
                           ENG=Specifies the number of the fixed asset entry.];
                ApplicationArea=#Advanced;
                SourceExpr="FA Entry No.";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the entry, as assigned from the specified number series when the entry was created.;
                           ENG=Specifies the number of the entry, as assigned from the specified number series when the entry was created.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No." }

    { 25  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a reference to a combination of dimension values. The actual values are stored in the Dimension Set Entry table.;
                           ENG=Specifies a reference to a combination of dimension values. The actual values are stored in the Dimension Set Entry table.];
                ApplicationArea=#Suite;
                SourceExpr="Dimension Set ID";
                Visible=FALSE }

    { 1000000002;2;Field  ;
                SourceExpr="VAT Prod. Posting Group" }

    { 1000000001;2;Field  ;
                SourceExpr="VAT Bus. Posting Group" }

    { 29  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the entry's external document number, such as a vendor's invoice number.;
                           ENG=Specifies the entry's external document number, such as a vendor's invoice number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="External Document No." }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 21  ;1   ;Part      ;
                Name=Power BI Report FactBox;
                CaptionML=[ENU=Power BI Reports;
                           ENG=Power BI Reports];
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page6306;
                Visible=PowerBIVisible;
                PartType=Page }

    { 7   ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page193;
                PartType=Page;
                ShowFilter=No }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      GLAcc@1000 : Record 15;
      DimensionSetIDFilter@1005 : Page 481;
      PowerBIVisible@1002 : Boolean;
      HasIncomingDocument@1001 : Boolean;
      AmountVisible@1004 : Boolean;
      DebitCreditVisible@1003 : Boolean;

    LOCAL PROCEDURE GetCaption@2() : Text[250];
    BEGIN
      IF GLAcc."No." <> "G/L Account No." THEN
        IF NOT GLAcc.GET("G/L Account No.") THEN
          IF GETFILTER("G/L Account No.") <> '' THEN
            IF GLAcc.GET(GETRANGEMIN("G/L Account No.")) THEN;
      EXIT(STRSUBSTNO('%1 %2',GLAcc."No.",GLAcc.Name))
    END;

    LOCAL PROCEDURE SetConrolVisibility@8();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      AmountVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Debit/Credit Only");
      DebitCreditVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Amount Only");
    END;

    BEGIN
    END.
  }
}

OBJECT Page 22 Customer List
{
  OBJECT-PROPERTIES
  {
    Date=30/04/20;
    Time=10:29:37;
    Modified=Yes;
    Version List=NAVW111.00.00.23019;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Customers;
               ENG=Customers];
    SourceTable=Table18;
    PageType=List;
    CardPageID=Customer Card;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Approve,New Document,Request Approval,Customer;
                                ENG=New,Process,Report,Approve,New Document,Request Approval,Customer];
    OnInit=BEGIN
             SetCustomerNoVisibilityOnFactBoxes;

             CaptionTxt := CurrPage.CAPTION;
             SetCaption(CaptionTxt);
             CurrPage.CAPTION(CaptionTxt);
           END;

    OnOpenPage=VAR
                 CRMIntegrationManagement@1000 : Codeunit 5330;
               BEGIN
                 CRMIntegrationEnabled := CRMIntegrationManagement.IsCRMIntegrationEnabled;

                 SetWorkflowManagementEnabledState;
                 SETFILTER("Date Filter",'..%1',WORKDATE);

                 // Contextual Power BI FactBox: filtering available reports, setting context, loading Power BI related user settings
                 CurrPage."Power BI Report FactBox".PAGE.SetNameFilter(CurrPage.CAPTION);
                 CurrPage."Power BI Report FactBox".PAGE.SetContext(CurrPage.OBJECTID(FALSE));
                 PowerBIVisible := SetPowerBIUserConfig.SetUserConfig(PowerBIUserConfiguration,CurrPage.OBJECTID(FALSE));
               END;

    OnAfterGetCurrRecord=VAR
                           CRMCouplingManagement@1001 : Codeunit 5331;
                           WorkflowWebhookManagement@1000 : Codeunit 1543;
                         BEGIN
                           SetSocialListeningFactboxVisibility;

                           CRMIsCoupledToRecord :=
                             CRMCouplingManagement.IsRecordCoupledToCRM(RECORDID) AND CRMIntegrationEnabled;
                           OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);

                           CanCancelApprovalForRecord := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);

                           WorkflowWebhookManagement.GetCanRequestAndCanCancel(RECORDID,CanRequestApprovalForFlow,CanCancelApprovalForFlow);

                           // Contextual Power BI FactBox: send data to filter the report in the FactBox
                           CurrPage."Power BI Report FactBox".PAGE.SetCurrentListSelection("No.",FALSE);

                           SetWorkflowManagementEnabledState;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 16      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Customer;
                                 ENG=&Customer];
                      Image=Customer }
      { 20      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ENG=Co&mments];
                      ToolTipML=[ENU=View or add comments for the record.;
                                 ENG=View or add comments for the record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Customer),
                                  No.=FIELD(No.);
                      Image=ViewComments }
      { 66      ;2   ;ActionGroup;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      Image=Dimensions }
      { 84      ;3   ;Action    ;
                      Name=DimensionsSingle;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions-Single;
                                 ENG=Dimensions-Single];
                      ToolTipML=[ENU=View or edit the single set of dimensions that are set up for the selected record.;
                                 ENG=View or edit the single set of dimensions that are set up for the selected record.];
                      ApplicationArea=#Suite;
                      RunObject=Page 540;
                      RunPageLink=Table ID=CONST(18),
                                  No.=FIELD(No.);
                      Image=Dimensions }
      { 42      ;3   ;Action    ;
                      Name=DimensionsMultiple;
                      AccessByPermission=TableData 348=R;
                      CaptionML=[ENU=Dimensions-&Multiple;
                                 ENG=Dimensions-&Multiple];
                      ToolTipML=[ENU=View or edit dimensions for a group of records. You can assign dimension codes to transactions to distribute costs and analyze historical information.;
                                 ENG=View or edit dimensions for a group of records. You can assign dimension codes to transactions to distribute costs and analyse historical information.];
                      ApplicationArea=#Suite;
                      Image=DimensionSets;
                      OnAction=VAR
                                 Cust@1001 : Record 18;
                                 DefaultDimMultiple@1002 : Page 542;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Cust);
                                 DefaultDimMultiple.SetMultiCust(Cust);
                                 DefaultDimMultiple.RUNMODAL;
                               END;
                                }
      { 58      ;2   ;Action    ;
                      CaptionML=[ENU=Bank Accounts;
                                 ENG=Bank Accounts];
                      ToolTipML=[ENU=View or set up the customer's bank accounts. You can set up any number of bank accounts for each customer.;
                                 ENG=View or set up the customer's bank accounts. You can set up any number of bank accounts for each customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 424;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=BankAccount }
      { 29      ;2   ;Action    ;
                      CaptionML=[ENU=Direct Debit Mandates;
                                 ENG=Direct Debit Mandates];
                      ToolTipML=[ENU=View the direct-debit mandates that reflect agreements with customers to collect invoice payments from their bank account.;
                                 ENG=View the direct-debit mandates that reflect agreements with customers to collect invoice payments from their bank account.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 1230;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=MakeAgreement }
      { 23      ;2   ;Action    ;
                      Name=ShipToAddresses;
                      CaptionML=[ENU=Ship-&to Addresses;
                                 ENG=Ship-&to Addresses];
                      ToolTipML=[ENU=View or edit alternate shipping addresses where the customer wants items delivered if different from the regular address.;
                                 ENG=View or edit alternate shipping addresses where the customer wants items delivered if different from the regular address.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 301;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ShipAddress }
      { 60      ;2   ;Action    ;
                      AccessByPermission=TableData 5050=R;
                      CaptionML=[ENU=C&ontact;
                                 ENG=C&ontact];
                      ToolTipML=[ENU=View or edit detailed information about the contact person at the customer.;
                                 ENG=View or edit detailed information about the contact person at the customer.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ContactPerson;
                      PromotedCategory=Category7;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 ShowContact;
                               END;
                                }
      { 45      ;2   ;Action    ;
                      CaptionML=[ENU=Cross Re&ferences;
                                 ENG=Cross Re&ferences];
                      ToolTipML=[ENU=Set up the customer's own identification of items that you sell to the customer. Cross-references to the customer's item number means that the item number is automatically shown on sales documents instead of the number that you use.;
                                 ENG=Set up the customer's own identification of items that you sell to the customer. Cross-references to the customer's item number means that the item number is automatically shown on sales documents instead of the number that you use.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 5723;
                      RunPageView=SORTING(Cross-Reference Type,Cross-Reference Type No.);
                      RunPageLink=Cross-Reference Type=CONST(Customer),
                                  Cross-Reference Type No.=FIELD(No.);
                      Image=Change }
      { 64      ;2   ;Action    ;
                      Name=OnlineMap;
                      CaptionML=[ENU=Online Map;
                                 ENG=Online Map];
                      ToolTipML=[ENU=View the address on an online map.;
                                 ENG=View the address on an online map.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=FALSE;
                      PromotedIsBig=Yes;
                      Image=Map;
                      PromotedCategory=Category5;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 DisplayMap;
                               END;
                                }
      { 67      ;2   ;Action    ;
                      Name=ApprovalEntries;
                      AccessByPermission=TableData 454=R;
                      CaptionML=[ENU=Approvals;
                                 ENG=Approvals];
                      ToolTipML=[ENU=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.;
                                 ENG=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Image=Approvals;
                      PromotedCategory=Category7;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 ApprovalsMgmt.OpenApprovalEntriesPage(RECORDID);
                               END;
                                }
      { 44      ;1   ;ActionGroup;
                      Name=ActionGroupCRM;
                      CaptionML=[ENU=Dynamics 365 for Sales;
                                 ENG=Dynamics 365 for Sales];
                      Visible=CRMIntegrationEnabled }
      { 41      ;2   ;Action    ;
                      Name=CRMGotoAccount;
                      CaptionML=[ENU=Account;
                                 ENG=Account];
                      ToolTipML=[ENU=Open the coupled Dynamics 365 for Sales account.;
                                 ENG=Open the coupled Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Image=CoupledCustomer;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.ShowCRMEntityFromRecordID(RECORDID);
                               END;
                                }
      { 37      ;2   ;Action    ;
                      Name=CRMSynchronizeNow;
                      AccessByPermission=TableData 5331=IM;
                      CaptionML=[ENU=Synchronize Now;
                                 ENG=Synchronise Now];
                      ToolTipML=[ENU=Send or get updated data to or from Dynamics 365 for Sales.;
                                 ENG=Send or get updated data to or from Dynamics 365 for Sales.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Visible=CRMIntegrationEnabled;
                      Image=Refresh;
                      PromotedCategory=Category7;
                      OnAction=VAR
                                 Customer@1000 : Record 18;
                                 CRMIntegrationManagement@1001 : Codeunit 5330;
                                 CustomerRecordRef@1003 : RecordRef;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Customer);
                                 Customer.NEXT;

                                 IF Customer.COUNT = 1 THEN
                                   CRMIntegrationManagement.UpdateOneNow(Customer.RECORDID)
                                 ELSE BEGIN
                                   CustomerRecordRef.GETTABLE(Customer);
                                   CRMIntegrationManagement.UpdateMultipleNow(CustomerRecordRef);
                                 END
                               END;
                                }
      { 97      ;2   ;Action    ;
                      Name=UpdateStatisticsInCRM;
                      CaptionML=[ENU=Update Account Statistics;
                                 ENG=Update Account Statistics];
                      ToolTipML=[ENU=Send customer statistics data to Dynamics 365 for Sales to update the Account Statistics FactBox.;
                                 ENG=Send customer statistics data to Dynamics 365 for Sales to update the Account Statistics FactBox.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Enabled=CRMIsCoupledToRecord;
                      Image=UpdateXML;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.CreateOrUpdateCRMAccountStatistics(Rec);
                               END;
                                }
      { 31      ;2   ;ActionGroup;
                      Name=Coupling;
                      CaptionML=[@@@=Coupling is a noun;
                                 ENU=Coupling;
                                 ENG=Coupling];
                      ToolTipML=[ENU=Create, change, or delete a coupling between the Microsoft Dynamics NAV record and a Dynamics 365 for Sales record.;
                                 ENG=Create, change, or delete a coupling between the Microsoft Dynamics NAV record and a Dynamics 365 for Sales record.];
                      Image=LinkAccount }
      { 49      ;3   ;Action    ;
                      Name=ManageCRMCoupling;
                      AccessByPermission=TableData 5331=IM;
                      CaptionML=[ENU=Set Up Coupling;
                                 ENG=Set Up Coupling];
                      ToolTipML=[ENU=Create or modify the coupling to a Dynamics 365 for Sales account.;
                                 ENG=Create or modify the coupling to a Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Visible=CRMIntegrationEnabled;
                      Image=LinkAccount;
                      PromotedCategory=Category7;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.DefineCoupling(RECORDID);
                               END;
                                }
      { 47      ;3   ;Action    ;
                      Name=DeleteCRMCoupling;
                      AccessByPermission=TableData 5331=IM;
                      CaptionML=[ENU=Delete Coupling;
                                 ENG=Delete Coupling];
                      ToolTipML=[ENU=Delete the coupling to a Dynamics 365 for Sales account.;
                                 ENG=Delete the coupling to a Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Enabled=CRMIsCoupledToRecord;
                      Image=UnLinkAccount;
                      OnAction=VAR
                                 CRMCouplingManagement@1000 : Codeunit 5331;
                               BEGIN
                                 CRMCouplingManagement.RemoveCoupling(RECORDID);
                               END;
                                }
      { 53      ;2   ;ActionGroup;
                      Name=Create;
                      CaptionML=[ENU=Create;
                                 ENG=Create];
                      Image=NewCustomer }
      { 57      ;3   ;Action    ;
                      Name=CreateInCRM;
                      CaptionML=[ENU=Create Account in Dynamics 365 for Sales;
                                 ENG=Create Account in Dynamics 365 for Sales];
                      ToolTipML=[ENU=Generate the account in the coupled Dynamics 365 for Sales account.;
                                 ENG=Generate the account in the coupled Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Image=NewCustomer;
                      OnAction=VAR
                                 Customer@1001 : Record 18;
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Customer);
                                 CRMIntegrationManagement.CreateNewRecordsInCRM(Customer);
                               END;
                                }
      { 17      ;3   ;Action    ;
                      Name=CreateFromCRM;
                      CaptionML=[ENU=Create Customer in Dynamics NAV;
                                 ENG=Create Customer in Dynamics NAV];
                      ToolTipML=[ENU=Generate the customer in the coupled Dynamics 365 for Sales account.;
                                 ENG=Generate the customer in the coupled Dynamics 365 for Sales account.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Image=NewCustomer;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.CreateNewCustomerFromCRM;
                               END;
                                }
      { 86      ;2   ;Action    ;
                      Name=ShowLog;
                      CaptionML=[ENU=Synchronization Log;
                                 ENG=Synchronisation Log];
                      ToolTipML=[ENU=View integration synchronization jobs for the customer table.;
                                 ENG=View integration synchronisation jobs for the customer table.];
                      ApplicationArea=#Suite;
                      Visible=CRMIntegrationEnabled;
                      Image=Log;
                      OnAction=VAR
                                 CRMIntegrationManagement@1000 : Codeunit 5330;
                               BEGIN
                                 CRMIntegrationManagement.ShowLog(RECORDID);
                               END;
                                }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=History;
                                 ENG=History];
                      Image=History }
      { 22      ;2   ;Action    ;
                      Name=CustomerLedgerEntries;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Ledger E&ntries;
                                 ENG=Ledger E&ntries];
                      ToolTipML=[ENU=View the history of transactions that have been posted for the selected record.;
                                 ENG=View the history of transactions that have been posted for the selected record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 25;
                      RunPageView=SORTING(Customer No.)
                                  ORDER(Descending);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CustomerLedger }
      { 18      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 ENG=Statistics];
                      ToolTipML=[ENU=View statistical information, such as the value of posted entries, for the record.;
                                 ENG=View statistical information, such as the value of posted entries, for the record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 151;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 21      ;2   ;Action    ;
                      CaptionML=[ENU=S&ales;
                                 ENG=S&ales];
                      ToolTipML=[ENU=Shows a summary of customer ledger entries. You select the time interval in the View by field. The Period column on the left contains a series of dates that are determined by the time interval you have selected.;
                                 ENG=Shows a summary of customer ledger entries. You select the time interval in the View by field. The Period column on the left contains a series of dates that are determined by the time interval you have selected.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 155;
                      RunPageLink=No.=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=Sales }
      { 19      ;2   ;Action    ;
                      CaptionML=[ENU=Entry Statistics;
                                 ENG=Entry Statistics];
                      ToolTipML=[ENU=View entry statistics for the record.;
                                 ENG=View entry statistics for the record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 302;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=EntryStatistics }
      { 63      ;2   ;Action    ;
                      CaptionML=[ENU=Statistics by C&urrencies;
                                 ENG=Statistics by C&urrencies];
                      ToolTipML=[ENU=View statistics for customers that use multiple currencies.;
                                 ENG=View statistics for customers that use multiple currencies.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 486;
                      RunPageLink=Customer Filter=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter),
                                  Date Filter=FIELD(Date Filter);
                      Image=Currencies }
      { 6500    ;2   ;Action    ;
                      CaptionML=[ENU=Item &Tracking Entries;
                                 ENG=Item &Tracking Entries];
                      ToolTipML=[ENU=View serial or lot numbers that are assigned to items.;
                                 ENG=View serial or lot numbers that are assigned to items.];
                      ApplicationArea=#ItemTracking;
                      Image=ItemTrackingLedger;
                      OnAction=VAR
                                 ItemTrackingDocMgt@1001 : Codeunit 6503;
                               BEGIN
                                 ItemTrackingDocMgt.ShowItemTrackingForMasterData(1,"No.",'','','','','');
                               END;
                                }
      { 24      ;1   ;ActionGroup;
                      CaptionML=[ENU=S&ales;
                                 ENG=S&ales];
                      Image=Sales }
      { 25      ;2   ;Action    ;
                      Name=Sales_InvoiceDiscounts;
                      CaptionML=[ENU=Invoice &Discounts;
                                 ENG=Invoice &Discounts];
                      ToolTipML=[ENU=Set up different discounts that are applied to invoices for the customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.;
                                 ENG=Set up different discounts that are applied to invoices for the customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 23;
                      RunPageLink=Code=FIELD(Invoice Disc. Code);
                      Image=CalculateInvoiceDiscount }
      { 26      ;2   ;Action    ;
                      Name=Sales_Prices;
                      CaptionML=[ENU=Prices;
                                 ENG=Prices];
                      ToolTipML=[ENU=View or set up different prices for items that you sell to the customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                                 ENG=View or set up different prices for items that you sell to the customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7002;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=Price }
      { 71      ;2   ;Action    ;
                      Name=Sales_LineDiscounts;
                      CaptionML=[ENU=Line Discounts;
                                 ENG=Line Discounts];
                      ToolTipML=[ENU=View or set up different discounts for items that you sell to the customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                                 ENG=View or set up different discounts for items that you sell to the customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7004;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=LineDiscount }
      { 82      ;2   ;Action    ;
                      CaptionML=[ENU=Prepa&yment Percentages;
                                 ENG=Prepa&yment Percentages];
                      ToolTipML=[ENU="View or edit the percentages of the price that can be paid as a prepayment. ";
                                 ENG="View or edit the percentages of the price that can be paid as a prepayment. "];
                      ApplicationArea=#Prepayments;
                      RunObject=Page 664;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=PrepaymentPercentages }
      { 75      ;2   ;Action    ;
                      CaptionML=[ENU=S&td. Cust. Sales Codes;
                                 ENG=S&td. Cust. Sales Codes];
                      ToolTipML=[ENU=View or edit recurring sales lines for the customer.;
                                 ENG=View or edit recurring sales lines for the customer.];
                      ApplicationArea=#Suite;
                      RunObject=Page 173;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CodesList }
      { 11      ;1   ;ActionGroup;
                      CaptionML=[ENU=Documents;
                                 ENG=Documents];
                      Image=Documents }
      { 27      ;2   ;Action    ;
                      CaptionML=[ENU=Quotes;
                                 ENG=Quotes];
                      ToolTipML=[ENU=View a list of ongoing sales quotes.;
                                 ENG=View a list of ongoing sales quotes.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 9300;
                      RunPageView=SORTING(Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=Quote }
      { 28      ;2   ;Action    ;
                      CaptionML=[ENU=Orders;
                                 ENG=Orders];
                      ToolTipML=[ENU=View a list of ongoing sales orders for the customer.;
                                 ENG=View a list of ongoing sales orders for the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 9305;
                      RunPageView=SORTING(Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=Document }
      { 70      ;2   ;Action    ;
                      CaptionML=[ENU=Return Orders;
                                 ENG=Return Orders];
                      ToolTipML=[ENU=Open the list of ongoing return orders.;
                                 ENG=Open the list of ongoing return orders.];
                      ApplicationArea=#SalesReturnOrder;
                      RunObject=Page 9304;
                      RunPageView=SORTING(Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=ReturnOrder }
      { 76      ;2   ;ActionGroup;
                      CaptionML=[ENU=Issued Documents;
                                 ENG=Issued Documents];
                      Image=Documents }
      { 77      ;3   ;Action    ;
                      CaptionML=[ENU=Issued &Reminders;
                                 ENG=Issued &Reminders];
                      ToolTipML=[ENU=View the reminders that you have sent to the customer.;
                                 ENG=View the reminders that you have sent to the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 440;
                      RunPageView=SORTING(Customer No.,Posting Date);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=OrderReminder }
      { 78      ;3   ;Action    ;
                      CaptionML=[ENU=Issued &Finance Charge Memos;
                                 ENG=Issued &Finance Charge Memos];
                      ToolTipML=[ENU=View the finance charge memos that you have sent to the customer.;
                                 ENG=View the finance charge memos that you have sent to the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 452;
                      RunPageView=SORTING(Customer No.,Posting Date);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=FinChargeMemo }
      { 65      ;2   ;Action    ;
                      CaptionML=[ENU=Blanket Orders;
                                 ENG=Blanket Orders];
                      ToolTipML=[ENU=Open the list of ongoing blanket orders.;
                                 ENG=Open the list of ongoing blanket orders.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 9303;
                      RunPageView=SORTING(Document Type,Sell-to Customer No.);
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=BlanketOrder }
      { 14      ;1   ;ActionGroup;
                      CaptionML=[ENU=Service;
                                 ENG=Service];
                      Image=ServiceItem }
      { 81      ;2   ;Action    ;
                      CaptionML=[ENU=Service Orders;
                                 ENG=Service Orders];
                      ToolTipML=[ENU=Open the list of ongoing service orders.;
                                 ENG=Open the list of ongoing service orders.];
                      ApplicationArea=#Service;
                      RunObject=Page 9318;
                      RunPageView=SORTING(Document Type,Customer No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Document }
      { 68      ;2   ;Action    ;
                      CaptionML=[ENU=Ser&vice Contracts;
                                 ENG=Ser&vice Contracts];
                      ToolTipML=[ENU=Open the list of ongoing service contracts.;
                                 ENG=Open the list of ongoing service contracts.];
                      ApplicationArea=#Service;
                      RunObject=Page 6065;
                      RunPageView=SORTING(Customer No.,Ship-to Code);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ServiceAgreement }
      { 69      ;2   ;Action    ;
                      CaptionML=[ENU=Service &Items;
                                 ENG=Service &Items];
                      ToolTipML=[ENU=View or edit the service items that are registered for the customer.;
                                 ENG=View or edit the service items that are registered for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5988;
                      RunPageView=SORTING(Customer No.,Ship-to Code,Item No.,Serial No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=ServiceItem }
      { 1900000005;0 ;ActionContainer;
                      ActionContainerType=NewDocumentItems }
      { 1902575205;1 ;Action    ;
                      Name=NewSalesBlanketOrder;
                      CaptionML=[ENU=Blanket Sales Order;
                                 ENG=Blanket Sales Order];
                      ToolTipML=[ENU=Create a blanket sales order for the customer.;
                                 ENG=Create a blanket sales order for the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 507;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=BlanketOrder;
                      RunPageMode=Create }
      { 1900246505;1 ;Action    ;
                      Name=NewSalesQuote;
                      CaptionML=[ENU=Sales Quote;
                                 ENG=Sales Quote];
                      ToolTipML=[ENU=Offer items or services to a customer.;
                                 ENG=Offer items or services to a customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 41;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NewSalesQuote;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1906384905;1 ;Action    ;
                      Name=NewSalesInvoice;
                      CaptionML=[ENU=Sales Invoice;
                                 ENG=Sales Invoice];
                      ToolTipML=[ENU=Create a sales invoice for the customer.;
                                 ENG=Create a sales invoice for the customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 43;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NewSalesInvoice;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1904747105;1 ;Action    ;
                      Name=NewSalesOrder;
                      CaptionML=[ENU=Sales Order;
                                 ENG=Sales Order];
                      ToolTipML=[ENU=Create a sales order for the customer.;
                                 ENG=Create a sales order for the customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 42;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1902583505;1 ;Action    ;
                      Name=NewSalesCrMemo;
                      CaptionML=[ENU=Sales Credit Memo;
                                 ENG=Sales Credit Memo];
                      ToolTipML=[ENU=Create a new sales credit memo to revert a posted sales invoice.;
                                 ENG=Create a new sales credit memo to revert a posted sales invoice.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 44;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CreditMemo;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1905163705;1 ;Action    ;
                      Name=NewSalesReturnOrder;
                      CaptionML=[ENU=Sales Return Order;
                                 ENG=Sales Return Order];
                      ToolTipML=[ENU=Create a new sales return order for items or services.;
                                 ENG=Create a new sales return order for items or services.];
                      ApplicationArea=#SalesReturnOrder;
                      RunObject=Page 6630;
                      RunPageLink=Sell-to Customer No.=FIELD(No.);
                      Image=ReturnOrder;
                      RunPageMode=Create }
      { 1905185205;1 ;Action    ;
                      Name=NewServiceQuote;
                      CaptionML=[ENU=Service Quote;
                                 ENG=Service Quote];
                      ToolTipML=[ENU=Create a new service quote for the customer.;
                                 ENG=Create a new service quote for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5964;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Quote;
                      RunPageMode=Create }
      { 1902079405;1 ;Action    ;
                      Name=NewServiceInvoice;
                      CaptionML=[ENU=Service Invoice;
                                 ENG=Service Invoice];
                      ToolTipML=[ENU=Create a new service invoice for the customer.;
                                 ENG=Create a new service invoice for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5933;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Invoice;
                      RunPageMode=Create }
      { 1907102005;1 ;Action    ;
                      Name=NewServiceOrder;
                      CaptionML=[ENU=Service Order;
                                 ENG=Service Order];
                      ToolTipML=[ENU=Create a new service order for the customer.;
                                 ENG=Create a new service order for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5900;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=Document;
                      RunPageMode=Create }
      { 1901662105;1 ;Action    ;
                      Name=NewServiceCrMemo;
                      CaptionML=[ENU=Service Credit Memo;
                                 ENG=Service Credit Memo];
                      ToolTipML=[ENU=Create a new service credit memo for the customer.;
                                 ENG=Create a new service credit memo for the customer.];
                      ApplicationArea=#Service;
                      RunObject=Page 5935;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CreditMemo;
                      RunPageMode=Create }
      { 1903839805;1 ;Action    ;
                      Name=NewReminder;
                      CaptionML=[ENU=Reminder;
                                 ENG=Reminder];
                      ToolTipML=[ENU=Create a new reminder for the customer.;
                                 ENG=Create a new reminder for the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 434;
                      RunPageLink=Customer No.=FIELD(No.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Reminder;
                      PromotedCategory=Category5;
                      RunPageMode=Create }
      { 1901102005;1 ;Action    ;
                      Name=NewFinChargeMemo;
                      CaptionML=[ENU=Finance Charge Memo;
                                 ENG=Finance Charge Memo];
                      ToolTipML=[ENU=Create a new finance charge memo.;
                                 ENG=Create a new finance charge memo.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 446;
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=FinChargeMemo;
                      RunPageMode=Create }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 104     ;1   ;ActionGroup;
                      CaptionML=[ENU=History;
                                 ENG=History];
                      Image=History }
      { 103     ;2   ;Action    ;
                      Name=CustomerLedgerEntriesHistory;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Ledger E&ntries;
                                 ENG=Ledger E&ntries];
                      ToolTipML=[ENU=View the history of transactions that have been posted for the selected record.;
                                 ENG=View the history of transactions that have been posted for the selected record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 25;
                      RunPageView=SORTING(Customer No.);
                      RunPageLink=Customer No.=FIELD(No.);
                      Image=CustomerLedger;
                      Scope=Repeater }
      { 102     ;1   ;ActionGroup;
                      Name=PricesAndDiscounts;
                      CaptionML=[ENU=Prices and Discounts;
                                 ENG=Prices and Discounts] }
      { 101     ;2   ;Action    ;
                      Name=Prices_InvoiceDiscounts;
                      CaptionML=[ENU=Invoice &Discounts;
                                 ENG=Invoice &Discounts];
                      ToolTipML=[ENU=Set up different discounts applied to invoices for the selected customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.;
                                 ENG=Set up different discounts applied to invoices for the selected customer. An invoice discount is automatically granted to the customer when the total on a sales invoice exceeds a certain amount.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 23;
                      RunPageLink=Code=FIELD(Invoice Disc. Code);
                      Image=CalculateInvoiceDiscount;
                      Scope=Repeater }
      { 100     ;2   ;Action    ;
                      Name=Prices_Prices;
                      CaptionML=[ENU=Prices;
                                 ENG=Prices];
                      ToolTipML=[ENU=View or set up different prices for items that you sell to the selected customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                                 ENG=View or set up different prices for items that you sell to the selected customer. An item price is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7002;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=Price;
                      Scope=Repeater }
      { 98      ;2   ;Action    ;
                      Name=Prices_LineDiscounts;
                      CaptionML=[ENU=Line Discounts;
                                 ENG=Line Discounts];
                      ToolTipML=[ENU=View or set up different discounts for items that you sell to the customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.;
                                 ENG=View or set up different discounts for items that you sell to the customer. An item discount is automatically granted on invoice lines when the specified criteria are met, such as customer, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7004;
                      RunPageView=SORTING(Sales Type,Sales Code);
                      RunPageLink=Sales Type=CONST(Customer),
                                  Sales Code=FIELD(No.);
                      Image=LineDiscount;
                      Scope=Repeater }
      { 55      ;1   ;ActionGroup;
                      CaptionML=[ENU=Request Approval;
                                 ENG=Request Approval];
                      Image=SendApprovalRequest }
      { 51      ;2   ;Action    ;
                      Name=SendApprovalRequest;
                      CaptionML=[ENU=Send A&pproval Request;
                                 ENG=Send A&pproval Request];
                      ToolTipML=[ENU=Request approval to change the record.;
                                 ENG=Request approval to change the record.];
                      ApplicationArea=#Advanced;
                      Enabled=(NOT OpenApprovalEntriesExist) AND EnabledApprovalWorkflowsExist AND CanRequestApprovalForFlow;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 IF ApprovalsMgmt.CheckCustomerApprovalsWorkflowEnabled(Rec) THEN
                                   ApprovalsMgmt.OnSendCustomerForApproval(Rec);
                               END;
                                }
      { 39      ;2   ;Action    ;
                      Name=CancelApprovalRequest;
                      CaptionML=[ENU=Cancel Approval Re&quest;
                                 ENG=Cancel Approval Re&quest];
                      ToolTipML=[ENU=Cancel the approval request.;
                                 ENG=Cancel the approval request.];
                      ApplicationArea=#Advanced;
                      Enabled=CanCancelApprovalForRecord OR CanCancelApprovalForFlow;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                                 WorkflowWebhookManagement@1000 : Codeunit 1543;
                               BEGIN
                                 ApprovalsMgmt.OnCancelCustomerApprovalRequest(Rec);
                                 WorkflowWebhookManagement.FindAndCancel(RECORDID);
                               END;
                                }
      { 85      ;1   ;ActionGroup;
                      CaptionML=[ENU=Workflow;
                                 ENG=Workflow] }
      { 15      ;2   ;Action    ;
                      Name=CreateApprovalWorkflow;
                      CaptionML=[ENU=Create Approval Workflow;
                                 ENG=Create Approval Workflow];
                      ToolTipML=[ENU=Set up an approval workflow for creating or changing customers, by going through a few pages that will guide you.;
                                 ENG=Set up an approval workflow for creating or changing customers, by going through a few pages that will guide you.];
                      ApplicationArea=#Suite;
                      Enabled=NOT EnabledApprovalWorkflowsExist;
                      Image=CreateWorkflow;
                      OnAction=BEGIN
                                 PAGE.RUNMODAL(PAGE::"Cust. Approval WF Setup Wizard");
                                 SetWorkflowManagementEnabledState;
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=ManageApprovalWorkflows;
                      CaptionML=[ENU=Manage Approval Workflows;
                                 ENG=Manage Approval Workflows];
                      ToolTipML=[ENU=View or edit existing approval workflows for creating or changing customers.;
                                 ENG=View or edit existing approval workflows for creating or changing customers.];
                      ApplicationArea=#Suite;
                      Enabled=EnabledApprovalWorkflowsExist;
                      Image=WorkflowSetup;
                      OnAction=VAR
                                 WorkflowManagement@1000 : Codeunit 1501;
                               BEGIN
                                 WorkflowManagement.NavigateToWorkflows(DATABASE::Customer,EventFilter);
                                 SetWorkflowManagementEnabledState;
                               END;
                                }
      { 1900839804;1 ;Action    ;
                      CaptionML=[ENU=Cash Receipt Journal;
                                 ENG=Cash Receipt Journal];
                      ToolTipML=[ENU=Open the cash receipt journal to post incoming payments.;
                                 ENG=Open the cash receipt journal to post incoming payments.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 255;
                      Promoted=Yes;
                      Image=CashReceiptJournal;
                      PromotedCategory=Process }
      { 1905171704;1 ;Action    ;
                      CaptionML=[ENU=Sales Journal;
                                 ENG=Sales Journal];
                      ToolTipML=[ENU=Post any sales transaction for the customer.;
                                 ENG=Post any sales transaction for the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 253;
                      Promoted=Yes;
                      Image=Journals;
                      PromotedCategory=Process }
      { 108     ;1   ;Action    ;
                      Name=ApplyTemplate;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Apply Template;
                                 ENG=Apply Template];
                      ToolTipML=[ENU=Apply a template to update one or more entities with your standard settings for a certain type of entity.;
                                 ENG=Apply a template to update one or more entities with your standard settings for a certain type of entity.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ApplyTemplate;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Customer@1001 : Record 18;
                                 MiniCustomerTemplate@1000 : Record 1300;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Customer);
                                 MiniCustomerTemplate.UpdateCustomersFromTemplate(Customer);
                               END;
                                }
      { 105     ;1   ;ActionGroup;
                      CaptionML=[ENU=Display;
                                 ENG=Display] }
      { 106     ;2   ;Action    ;
                      Name=ReportFactBoxVisibility;
                      CaptionML=[ENU=Show/Hide Power BI Reports;
                                 ENG=Show/Hide Power BI Reports];
                      ToolTipML=[ENU=Select if the Power BI FactBox is visible or not.;
                                 ENG=Select if the Power BI FactBox is visible or not.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Report;
                      OnAction=BEGIN
                                 IF PowerBIVisible THEN
                                   PowerBIVisible := FALSE
                                 ELSE
                                   PowerBIVisible := TRUE;
                                 // save visibility value into the table
                                 CurrPage."Power BI Report FactBox".PAGE.SetFactBoxVisibility(PowerBIVisible);
                               END;
                                }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 96      ;1   ;ActionGroup;
                      Name=Reports;
                      CaptionML=[ENU=Reports;
                                 ENG=Reports] }
      { 95      ;2   ;ActionGroup;
                      Name=SalesReports;
                      CaptionML=[ENU=Sales Reports;
                                 ENG=Sales Reports];
                      Image=Report }
      { 94      ;3   ;Action    ;
                      Name=ReportCustomerTop10List;
                      CaptionML=[ENU=Customer - Top 10 List;
                                 ENG=Customer - Top 10 List];
                      ToolTipML=[ENU=View which customers purchase the most or owe the most in a selected period. Only customers that have either purchases during the period or a balance at the end of the period will be included.;
                                 ENG=View which customers purchase the most or owe the most in a selected period. Only customers that have either purchases during the period or a balance at the end of the period will be included.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 111;
                      Image=Report }
      { 93      ;3   ;Action    ;
                      Name=ReportCustomerSalesList;
                      CaptionML=[ENU=Customer - Sales List;
                                 ENG=Customer - Sales List];
                      ToolTipML=[ENU=View customer sales for a period, for example, to report sales activity to customs and tax authorities. You can choose to include only customers with total sales that exceed a minimum amount. You can also specify whether you want the report to show address details for each customer.;
                                 ENG=View customer sales for a period, for example, to report sales activity to customs and tax authorities. You can choose to include only customers with total sales that exceed a minimum amount. You can also specify whether you want the report to show address details for each customer.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 119;
                      Image=Report }
      { 92      ;3   ;Action    ;
                      Name=ReportSalesStatistics;
                      CaptionML=[ENU=Sales Statistics;
                                 ENG=Sales Statistics];
                      ToolTipML=[ENU=View customers' total costs, sales, and profits over time, for example, to analyze earnings trends. The report shows amounts for original and adjusted costs, sales, profits, invoice discounts, payment discounts, and profit percentage in three adjustable periods.;
                                 ENG=View customers' total costs, sales, and profits over time, for example, to analyse earnings trends. The report shows amounts for original and adjusted costs, sales, profits, invoice discounts, payment discounts, and profit percentage in three adjustable periods.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 112;
                      Image=Report }
      { 91      ;2   ;ActionGroup;
                      Name=FinanceReports;
                      CaptionML=[ENU=Finance Reports;
                                 ENG=Finance Reports];
                      Image=Report }
      { 90      ;3   ;Action    ;
                      CaptionML=[ENU=Statement;
                                 ENG=Statement];
                      ToolTipML=[ENU=View a list of a customer's transactions for a selected period, for example, to send to the customer at the close of an accounting period. You can choose to have all overdue balances displayed regardless of the period specified, or you can choose to include an aging band.;
                                 ENG=View a list of a customer's transactions for a selected period, for example, to send to the customer at the close of an accounting period. You can choose to have all overdue balances displayed regardless of the period specified, or you can choose to include an ageing band.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 8810;
                      Image=Report }
      { 89      ;3   ;Action    ;
                      Name=ReportCustomerBalanceToDate;
                      CaptionML=[ENU=Customer - Balance to Date;
                                 ENG=Customer - Balance to Date];
                      ToolTipML=[ENU=View a list with customers' payment history up until a certain date. You can use the report to extract your total sales income at the close of an accounting period or fiscal year.;
                                 ENG=View a list with customers' payment history up until a certain date. You can use the report to extract your total sales income at the close of an accounting period or fiscal year.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 121;
                      Image=Report }
      { 88      ;3   ;Action    ;
                      Name=ReportCustomerTrialBalance;
                      CaptionML=[ENU=Customer - Trial Balance;
                                 ENG=Customer - Trial Balance];
                      ToolTipML=[ENU=View the beginning and ending balance for customers with entries within a specified period. The report can be used to verify that the balance for a customer posting group is equal to the balance on the corresponding general ledger account on a certain date.;
                                 ENG=View the beginning and ending balance for customers with entries within a specified period. The report can be used to verify that the balance for a customer posting group is equal to the balance on the corresponding general ledger account on a certain date.];
                      ApplicationArea=#Suite;
                      RunObject=Report 129;
                      Image=Report }
      { 87      ;3   ;Action    ;
                      Name=ReportCustomerDetailTrial;
                      CaptionML=[ENU=Customer - Detail Trial Bal.;
                                 ENG=Customer - Detail Trial Bal.];
                      ToolTipML=[ENU=View the balance for customers with balances on a specified date. The report can be used at the close of an accounting period, for example, or for an audit.;
                                 ENG=View the balance for customers with balances on a specified date. The report can be used at the close of an accounting period, for example, or for an audit.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 104;
                      Image=Report }
      { 83      ;3   ;Action    ;
                      Name=ReportCustomerSummaryAging;
                      CaptionML=[ENU=Customer - Summary Aging;
                                 ENG=Customer - Summary Ageing];
                      ToolTipML=[ENU=View, print, or save a summary of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.;
                                 ENG=View, print, or save a summary of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 105;
                      Image=Report }
      { 80      ;3   ;Action    ;
                      Name=ReportCustomerDetailedAging;
                      CaptionML=[ENU=Customer - Detailed Aging;
                                 ENG=Customer - Detailed Ageing];
                      ToolTipML=[ENU=View, print, or save a detailed list of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.;
                                 ENG=View, print, or save a detailed list of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 106;
                      Image=Report }
      { 74      ;3   ;Action    ;
                      Name=ReportAgedAccountsReceivable;
                      CaptionML=[ENU=Aged Accounts Receivable;
                                 ENG=Aged Accounts Receivable];
                      ToolTipML=[ENU=View an overview of when customer payments are due or overdue, divided into four periods. You must specify the date you want aging calculated from and the length of the period that each column will contain data for.;
                                 ENG=View an overview of when customer payments are due or overdue, divided into four periods. You must specify the date you want ageing calculated from and the length of the period that each column will contain data for.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 120;
                      Image=Report }
      { 73      ;3   ;Action    ;
                      Name=ReportCustomerPaymentReceipt;
                      CaptionML=[ENU=Customer - Payment Receipt;
                                 ENG=Customer - Payment Receipt];
                      ToolTipML=[ENU=View a document showing which customer ledger entries that a payment has been applied to. This report can be used as a payment receipt that you send to the customer.;
                                 ENG=View a document showing which customer ledger entries that a payment has been applied to. This report can be used as a payment receipt that you send to the customer.];
                      ApplicationArea=#Suite;
                      RunObject=Report 211;
                      Image=Report }
      { 3       ;1   ;ActionGroup;
                      CaptionML=[ENU=General;
                                 ENG=General] }
      { 1905562606;2 ;Action    ;
                      CaptionML=[ENU=Customer List;
                                 ENG=Customer List];
                      ToolTipML=[ENU=View various kinds of basic information for customers, such as customer posting group, discount group, finance charge and payment information, salesperson, the customer's default currency and credit limit (in LCY), and the customer's current balance (in LCY).;
                                 ENG=View various kinds of basic information for customers, such as customer posting group, discount group, finance charge and payment information, salesperson, the customer's default currency and credit limit (in LCY), and the customer's current balance (in LCY).];
                      ApplicationArea=#Advanced;
                      RunObject=Report 101;
                      Image=Report }
      { 1901007206;2 ;Action    ;
                      CaptionML=[ENU=Customer Register;
                                 ENG=Customer Register];
                      ToolTipML=[ENU=View posted customer ledger entries divided into, and sorted according to, registers. By using a filter, you can select exactly the entries in the registers that you need to see. If you have created many entries and you do not set a filter, the report will print a large amount of information.;
                                 ENG=View posted customer ledger entries divided into, and sorted according to, registers. By using a filter, you can select exactly the entries in the registers that you need to see. If you have created many entries and you do not set a filter, the report will print a large amount of information.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 103;
                      Image=Report }
      { 1907152806;2 ;Action    ;
                      CaptionML=[ENU=Customer - Top 10 List;
                                 ENG=Customer - Top 10 List];
                      ToolTipML=[ENU=View which customers purchase the most or owe the most in a selected period. Only customers that have either purchases during the period or a balance at the end of the period will be included.;
                                 ENG=View which customers purchase the most or owe the most in a selected period. Only customers that have either purchases during the period or a balance at the end of the period will be included.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 111;
                      Image=Report }
      { 5       ;1   ;ActionGroup;
                      CaptionML=[ENU=Sales;
                                 ENG=Sales];
                      Image=Sales }
      { 1905727106;2 ;Action    ;
                      CaptionML=[ENU=Customer - Order Summary;
                                 ENG=Customer - Order Summary];
                      ToolTipML=[ENU=View the order detail (the quantity not yet shipped) for each customer in three periods of 30 days each, starting from a selected date. There are also columns with orders to be shipped before and after the three periods and a column with the total order detail for each customer. The report can be used to analyze a company's expected sales volume.;
                                 ENG=View the order detail (the quantity not yet shipped) for each customer in three periods of 30 days each, starting from a selected date. There are also columns with orders to be shipped before and after the three periods and a column with the total order detail for each customer. The report can be used to analyse a company's expected sales volume.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 107;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1900172506;2 ;Action    ;
                      CaptionML=[ENU=Customer - Order Detail;
                                 ENG=Customer - Order Detail];
                      ToolTipML=[ENU=View a list of orders divided by customer. The order amounts are totaled for each customer and for the entire list. The report can be used, for example, to obtain an overview of sales over the short term or to analyze possible shipment problems.;
                                 ENG=View a list of orders divided by customer. The order amounts are totalled for each customer and for the entire list. The report can be used, for example, to obtain an overview of sales over the short term or to analyse possible shipment problems.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 108;
                      Image=Report }
      { 1906073506;2 ;Action    ;
                      CaptionML=[ENU=Customer - Sales List;
                                 ENG=Customer - Sales List];
                      ToolTipML=[ENU=View customer sales for a period, for example, to report sales activity to customs and tax authorities. You can choose to include only customers with total sales that exceed a minimum amount. You can also specify whether you want the report to show address details for each customer.;
                                 ENG=View customer sales for a period, for example, to report sales activity to customs and tax authorities. You can choose to include only customers with total sales that exceed a minimum amount. You can also specify whether you want the report to show address details for each customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 119;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1904190506;2 ;Action    ;
                      CaptionML=[ENU=Sales Statistics;
                                 ENG=Sales Statistics];
                      ToolTipML=[ENU=View customers' total costs, sales, and profits over time, for example, to analyze earnings trends. The report shows amounts for original and adjusted costs, sales, profits, invoice discounts, payment discounts, and profit percentage in three adjustable periods.;
                                 ENG=View customers' total costs, sales, and profits over time, for example, to analyse earnings trends. The report shows amounts for original and adjusted costs, sales, profits, invoice discounts, payment discounts, and profit percentage in three adjustable periods.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 112;
                      Image=Report }
      { 1900760706;2 ;Action    ;
                      CaptionML=[ENU=Customer/Item Sales;
                                 ENG=Customer/Item Sales];
                      ToolTipML=[ENU=View a list of item sales for each customer during a selected time period. The report contains information on quantity, sales amount, profit, and possible discounts. It can be used, for example, to analyze a company's customer groups.;
                                 ENG=View a list of item sales for each customer during a selected time period. The report contains information on quantity, sales amount, profit, and possible discounts. It can be used, for example, to analyse a company's customer groups.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 113;
                      Image=Report }
      { 7       ;1   ;ActionGroup;
                      CaptionML=[ENU=Finance;
                                 ENG=Finance];
                      Image=Report }
      { 1906871306;2 ;Action    ;
                      CaptionML=[ENU=Customer - Detail Trial Bal.;
                                 ENG=Customer - Detail Trial Bal.];
                      ToolTipML=[ENU=View the balance for customers with balances on a specified date. The report can be used at the close of an accounting period, for example, or for an audit.;
                                 ENG=View the balance for customers with balances on a specified date. The report can be used at the close of an accounting period, for example, or for an audit.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 104;
                      Image=Report }
      { 1907944606;2 ;Action    ;
                      CaptionML=[ENU=Customer - Summary Aging;
                                 ENG=Customer - Summary Ageing];
                      ToolTipML=[ENU=View, print, or save a summary of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.;
                                 ENG=View, print, or save a summary of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 105;
                      Image=Report }
      { 1906813206;2 ;Action    ;
                      CaptionML=[ENU=Customer Detailed Aging;
                                 ENG=Customer Detailed Ageing];
                      ToolTipML=[ENU=View a detailed list of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.;
                                 ENG=View a detailed list of each customer's total payments due, divided into three time periods. The report can be used to decide when to issue reminders, to evaluate a customer's creditworthiness, or to prepare liquidity analyses.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 106;
                      Image=Report }
      { 1055    ;2   ;Action    ;
                      Name=Statement;
                      CaptionML=[ENU=Statement;
                                 ENG=Statement];
                      ToolTipML=[ENU=View a list of a customer's transactions for a selected period, for example, to send to the customer at the close of an accounting period. You can choose to have all overdue balances displayed regardless of the period specified, or you can choose to include an aging band.;
                                 ENG=View a list of a customer's transactions for a selected period, for example, to send to the customer at the close of an accounting period. You can choose to have all overdue balances displayed regardless of the period specified, or you can choose to include an ageing band.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 8810;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1903839806;2 ;Action    ;
                      CaptionML=[ENU=Reminder;
                                 ENG=Reminder];
                      ToolTipML=[ENU=Create a new reminder for the customer.;
                                 ENG=Create a new reminder for the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 117;
                      Image=Reminder }
      { 1900711606;2 ;Action    ;
                      CaptionML=[ENU=Aged Accounts Receivable;
                                 ENG=Aged Accounts Receivable];
                      ToolTipML=[ENU=View an overview of when customer payments are due or overdue, divided into four periods. You must specify the date you want aging calculated from and the length of the period that each column will contain data for.;
                                 ENG=View an overview of when customer payments are due or overdue, divided into four periods. You must specify the date you want ageing calculated from and the length of the period that each column will contain data for.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 120;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1902299006;2 ;Action    ;
                      CaptionML=[ENU=Customer - Balance to Date;
                                 ENG=Customer - Balance to Date];
                      ToolTipML=[ENU=View a list with customers' payment history up until a certain date. You can use the report to extract your total sales income at the close of an accounting period or fiscal year.;
                                 ENG=View a list with customers' payment history up until a certain date. You can use the report to extract your total sales income at the close of an accounting period or fiscal year.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 121;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1906359306;2 ;Action    ;
                      CaptionML=[ENU=Customer - Trial Balance;
                                 ENG=Customer - Trial Balance];
                      ToolTipML=[ENU=View the beginning and ending balance for customers with entries within a specified period. The report can be used to verify that the balance for a customer posting group is equal to the balance on the corresponding general ledger account on a certain date.;
                                 ENG=View the beginning and ending balance for customers with entries within a specified period. The report can be used to verify that the balance for a customer posting group is equal to the balance on the corresponding general ledger account on a certain date.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 129;
                      Image=Report }
      { 1904039606;2 ;Action    ;
                      CaptionML=[ENU=Customer - Payment Receipt;
                                 ENG=Customer - Payment Receipt];
                      ToolTipML=[ENU=View a document showing which customer ledger entries that a payment has been applied to. This report can be used as a payment receipt that you send to the customer.;
                                 ENG=View a document showing which customer ledger entries that a payment has been applied to. This report can be used as a payment receipt that you send to the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 211;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the involved entry or record, according to the specified number series.;
                           ENG=Specifies the number of the involved entry or record, according to the specified number series.];
                ApplicationArea=#All;
                SourceExpr="No." }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's name. This name will appear on all sales documents for the customer. You can enter a maximum of 50 characters, both numbers and letters.;
                           ENG=Specifies the customer's name. This name will appear on all sales documents for the customer. You can enter a maximum of 50 characters, both numbers and letters.];
                ApplicationArea=#All;
                SourceExpr=Name }

    { 40  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the responsibility center, such as a distribution hub, that is associated with the involved user, company, customer, or vendor.;
                           ENG=Specifies the code of the responsibility centre, such as a distribution hub, that is associated with the involved user, company, customer, or vendor.];
                ApplicationArea=#Advanced;
                SourceExpr="Responsibility Center" }

    { 43  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies from which location sales to this customer will be processed by default.;
                           ENG=Specifies from which location sales to this customer will be processed by default.];
                ApplicationArea=#Location;
                SourceExpr="Location Code" }

    { 54  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the postal code.;
                           ENG=Specifies the postcode.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Post Code";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the country/region of the address.;
                           ENG=Specifies the country/region of the address.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Country/Region Code";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's telephone number.;
                           ENG=Specifies the customer's telephone number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Phone No." }

    { 79  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's intercompany partner code.;
                           ENG=Specifies the customer's intercompany partner code.];
                ApplicationArea=#Intercompany;
                SourceExpr="IC Partner Code";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the person you regularly contact when you do business with this customer.;
                           ENG=Specifies the name of the person you regularly contact when you do business with this customer.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Contact }

    { 36  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a code for the salesperson who normally handles this customer's account.;
                           ENG=Specifies a code for the salesperson who normally handles this customer's account.];
                ApplicationArea=#Suite;
                SourceExpr="Salesperson Code";
                Visible=FALSE }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's market type to link business transactions to.;
                           ENG=Specifies the customer's market type to link business transactions to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Posting Group";
                Visible=FALSE }

    { 56  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's trade type to link transactions made for this customer with the appropriate general ledger account according to the general posting setup.;
                           ENG=Specifies the customer's trade type to link transactions made for this customer with the appropriate general ledger account according to the general posting setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Gen. Bus. Posting Group";
                Visible=FALSE }

    { 52  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.;
                           ENG=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Bus. Posting Group";
                Visible=FALSE }

    { 46  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer price group code, which you can use to set up special sales prices in the Sales Prices window.;
                           ENG=Specifies the customer price group code, which you can use to set up special sales prices in the Sales Prices window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Price Group";
                Visible=FALSE }

    { 72  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer discount group code, which you can use as a criterion to set up special discounts in the Sales Line Discounts window.;
                           ENG=Specifies the customer discount group code, which you can use as a criterion to set up special discounts in the Sales Line Discounts window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer Disc. Group";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount.;
                           ENG=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Terms Code";
                Visible=FALSE }

    { 61  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how reminders about late payments are handled for this customer.;
                           ENG=Specifies how reminders about late payments are handled for this customer.];
                ApplicationArea=#Advanced;
                SourceExpr="Reminder Terms Code";
                Visible=FALSE }

    { 48  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the involved finance charges in case of late payment.;
                           ENG=Specifies the code for the involved finance charges in case of late payment.];
                ApplicationArea=#Advanced;
                SourceExpr="Fin. Charge Terms Code";
                Visible=FALSE }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the default currency for the customer.;
                           ENG=Specifies the default currency for the customer.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 50  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the language that is used when translating specified text on documents to foreign business partner, such as an item description on an order confirmation.;
                           ENG=Specifies the language that is used when translating specified text on documents to foreign business partner, such as an item description on an order confirmation.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Language Code";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies an alternate name that you can use to search for the record in question when you cannot remember the value in the Name field.;
                           ENG=Specifies an alternate name that you can use to search for the record in question when you cannot remember the value in the Name field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Search Name";
                Visible=FALSE }

    { 1102601000;2;Field  ;
                ToolTipML=[ENU=Specifies the maximum amount you allow the customer to exceed the payment balance before warnings are issued.;
                           ENG=Specifies the maximum amount you allow the customer to exceed the payment balance before warnings are issued.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Limit (LCY)";
                Visible=FALSE }

    { 1102601002;2;Field  ;
                ToolTipML=[ENU=Specifies that the related record is blocked from being posted in transactions, for example a customer that is declared insolvent or an item that is placed in quarantine.;
                           ENG=Specifies that the related record is blocked from being posted in transactions, for example a customer that is declared insolvent or an item that is placed in quarantine.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Blocked;
                Visible=FALSE }

    { 200 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether to limit access to data for the data subject during daily operations. This is useful, for example, when protecting data from changes while it is under privacy review.;
                           ENG=Specifies whether to limit access to data for the data subject during daily operations. This is useful, for example, when protecting data from changes while it is under privacy review.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Privacy Blocked";
                Visible=FALSE }

    { 1102601004;2;Field  ;
                ToolTipML=[ENU=Specifies when the customer card was last modified.;
                           ENG=Specifies when the customer card was last modified.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Last Date Modified";
                Visible=FALSE }

    { 1102601006;2;Field  ;
                ToolTipML=[ENU=Specifies how to apply payments to entries for this customer.;
                           ENG=Specifies how to apply payments to entries for this customer.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Application Method";
                Visible=FALSE }

    { 1102601008;2;Field  ;
                ToolTipML=[ENU=Specifies if several orders delivered to the customer can appear on the same sales invoice.;
                           ENG=Specifies if several orders delivered to the customer can appear on the same sales invoice.];
                ApplicationArea=#Advanced;
                SourceExpr="Combine Shipments";
                Visible=FALSE }

    { 1102601010;2;Field  ;
                ToolTipML=[ENU=Specifies whether items will never, automatically (Always), or optionally be reserved for this customer. Optional means that you must manually reserve items for this customer.;
                           ENG=Specifies whether items will never, automatically (Always), or optionally be reserved for this customer. Optional means that you must manually reserve items for this customer.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Reserve;
                Visible=FALSE }

    { 1102601012;2;Field  ;
                ToolTipML=[ENU=Specifies if the customer accepts partial shipment of orders.;
                           ENG=Specifies if the customer accepts partial shipment of orders.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Shipping Advice";
                Visible=FALSE }

    { 1102601014;2;Field  ;
                ToolTipML=[ENU=Specifies the code for the shipping agent who is transporting the items.;
                           ENG=Specifies the code for the shipping agent who is transporting the items.];
                ApplicationArea=#Suite;
                SourceExpr="Shipping Agent Code";
                Visible=FALSE }

    { 1102601016;2;Field  ;
                ToolTipML=[ENU=Specifies a customizable calendar for shipment planning that holds the customer's working days and holidays.;
                           ENG=Specifies a customisable calendar for shipment planning that holds the customer's working days and holidays.];
                ApplicationArea=#Advanced;
                SourceExpr="Base Calendar Code";
                Visible=FALSE }

    { 62  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment amount that the customer owes for completed sales. This value is also known as the customer's balance.;
                           ENG=Specifies the payment amount that the customer owes for completed sales. This value is also known as the customer's balance.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Balance (LCY)";
                OnDrillDown=BEGIN
                              OpenCustomerLedgerEntries(FALSE);
                            END;
                             }

    { 59  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies payments from the customer that are overdue per today's date.;
                           ENG=Specifies payments from the customer that are overdue per today's date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Balance Due (LCY)";
                OnDrillDown=BEGIN
                              OpenCustomerLedgerEntries(TRUE);
                            END;
                             }

    { 1000000000;2;Field  ;
                SourceExpr="Home Page" }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total net amount of sales to the customer in LCY.;
                           ENG=Specifies the total net amount of sales to the customer in LCY.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sales (LCY)" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 861 ;1   ;Part      ;
                Name=Power BI Report FactBox;
                CaptionML=[ENU=Power BI Reports;
                           ENG=Power BI Reports];
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page6306;
                Visible=PowerBIVisible;
                PartType=Page }

    { 99  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page5360;
                Visible=CRMIsCoupledToRecord;
                PartType=Page }

    { 35  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Source Type=CONST(Customer),
                            Source No.=FIELD(No.);
                PagePartID=Page875;
                Visible=SocialListeningVisible;
                PartType=Page }

    { 33  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Source Type=CONST(Customer),
                            Source No.=FIELD(No.);
                PagePartID=Page876;
                Visible=SocialListeningSetupVisible;
                PartType=Page;
                UpdatePropagation=Both }

    { 1903720907;1;Part   ;
                Name=SalesHistSelltoFactBox;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9080;
                PartType=Page }

    { 1907234507;1;Part   ;
                Name=SalesHistBilltoFactBox;
                ApplicationArea=#All;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9081;
                Visible=FALSE;
                PartType=Page }

    { 1902018507;1;Part   ;
                Name=CustomerStatisticsFactBox;
                ApplicationArea=#Advanced;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9082;
                PartType=Page }

    { 1900316107;1;Part   ;
                Name=CustomerDetailsFactBox;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9084;
                Visible=FALSE;
                PartType=Page }

    { 1907829707;1;Part   ;
                ApplicationArea=#Advanced;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9085;
                Visible=FALSE;
                PartType=Page }

    { 1902613707;1;Part   ;
                ApplicationArea=#Advanced;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9086;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      PowerBIUserConfiguration@1011 : Record 6304;
      ApprovalsMgmt@1010 : Codeunit 1535;
      SetPowerBIUserConfig@1000 : Codeunit 6305;
      SocialListeningSetupVisible@1009 : Boolean;
      SocialListeningVisible@1008 : Boolean;
      CRMIntegrationEnabled@1007 : Boolean;
      CRMIsCoupledToRecord@1006 : Boolean;
      OpenApprovalEntriesExist@1005 : Boolean;
      CanCancelApprovalForRecord@1004 : Boolean;
      EnabledApprovalWorkflowsExist@1003 : Boolean;
      PowerBIVisible@1002 : Boolean;
      CanRequestApprovalForFlow@1013 : Boolean;
      CanCancelApprovalForFlow@1014 : Boolean;
      EventFilter@1001 : Text;
      CaptionTxt@1012 : Text;

    [External]
    PROCEDURE GetSelectionFilter@2() : Text;
    VAR
      Cust@1001 : Record 18;
      SelectionFilterManagement@1002 : Codeunit 46;
    BEGIN
      CurrPage.SETSELECTIONFILTER(Cust);
      EXIT(SelectionFilterManagement.GetSelectionFilterForCustomer(Cust));
    END;

    [External]
    PROCEDURE SetSelection@1(VAR Cust@1000 : Record 18);
    BEGIN
      CurrPage.SETSELECTIONFILTER(Cust);
    END;

    LOCAL PROCEDURE SetSocialListeningFactboxVisibility@3();
    VAR
      SocialListeningMgt@1000 : Codeunit 871;
    BEGIN
      SocialListeningMgt.GetCustFactboxVisibility(Rec,SocialListeningSetupVisible,SocialListeningVisible);
    END;

    LOCAL PROCEDURE SetCustomerNoVisibilityOnFactBoxes@5();
    BEGIN
      CurrPage.SalesHistSelltoFactBox.PAGE.SetCustomerNoVisibility(FALSE);
      CurrPage.SalesHistBilltoFactBox.PAGE.SetCustomerNoVisibility(FALSE);
      CurrPage.CustomerDetailsFactBox.PAGE.SetCustomerNoVisibility(FALSE);
      CurrPage.CustomerStatisticsFactBox.PAGE.SetCustomerNoVisibility(FALSE);
    END;

    LOCAL PROCEDURE SetWorkflowManagementEnabledState@4();
    VAR
      WorkflowManagement@1001 : Codeunit 1501;
      WorkflowEventHandling@1000 : Codeunit 1520;
    BEGIN
      EventFilter := WorkflowEventHandling.RunWorkflowOnSendCustomerForApprovalCode + '|' +
        WorkflowEventHandling.RunWorkflowOnCustomerChangedCode;

      EnabledApprovalWorkflowsExist := WorkflowManagement.EnabledWorkflowExist(DATABASE::Customer,EventFilter);
    END;

    [Integration]
    PROCEDURE SetCaption@17(VAR InText@1000 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Page 25 Customer Ledger Entries
{
  OBJECT-PROPERTIES
  {
    Date=07/11/19;
    Time=17:23:44;
    Modified=Yes;
    Version List=NAVW111.00.00.26893;
  }
  PROPERTIES
  {
    Permissions=TableData 21=m;
    CaptionML=[ENU=Customer Ledger Entries;
               ENG=Customer Ledger Entries];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table21;
    SourceTableView=SORTING(Entry No.)
                    ORDER(Descending);
    DataCaptionFields=Customer No.;
    PageType=List;
    OnInit=BEGIN
             AmountVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 SetConrolVisibility;

                 IF GETFILTERS <> '' THEN
                   IF FINDFIRST THEN;
               END;

    OnAfterGetRecord=BEGIN
                       StyleTxt := SetStyle;
                       Cust.GET("Customer No.");
                     END;

    OnModifyRecord=BEGIN
                     CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",Rec);
                     EXIT(FALSE);
                   END;

    OnAfterGetCurrRecord=VAR
                           IncomingDocument@1000 : Record 130;
                         BEGIN
                           HasIncomingDocument := IncomingDocument.PostedDocExists("Document No.","Posting Date");
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 24      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ENG=Ent&ry];
                      Image=Entry }
      { 25      ;2   ;Action    ;
                      CaptionML=[ENU=Reminder/Fin. Charge Entries;
                                 ENG=Reminder/Fin. Charge Entries];
                      ToolTipML=[ENU=View the reminders and finance charge entries that you have entered for the customer.;
                                 ENG=View the reminders and finance charge entries that you have entered for the customer.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 444;
                      RunPageView=SORTING(Customer Entry No.);
                      RunPageLink=Customer Entry No.=FIELD(Entry No.);
                      Image=Reminder;
                      Scope=Repeater }
      { 69      ;2   ;Action    ;
                      CaptionML=[ENU=Applied E&ntries;
                                 ENG=Applied E&ntries];
                      ToolTipML=[ENU=View the ledger entries that have been applied to this record.;
                                 ENG=View the ledger entries that have been applied to this record.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 61;
                      RunPageOnRec=Yes;
                      Image=Approve;
                      Scope=Repeater }
      { 51      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 32      ;2   ;Action    ;
                      Name=SetDimensionFilter;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Set Dimension Filter;
                                 ENG=Set Dimension Filter];
                      ToolTipML=[ENU=Limit the entries according to the dimension filters that you specify. NOTE: If you use a high number of dimension combinations, this function may not work and can result in a message that the SQL server only supports a maximum of 2100 parameters.;
                                 ENG=Limit the entries according to the dimension filters that you specify. NOTE: If you use a high number of dimension combinations, this function may not work and can result in a message that the SQL server only supports a maximum of 2100 parameters.];
                      ApplicationArea=#Suite;
                      Image=Filter;
                      OnAction=BEGIN
                                 SETFILTER("Dimension Set ID",DimensionSetIDFilter.LookupFilter);
                               END;
                                }
      { 52      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Detailed &Ledger Entries;
                                 ENG=Detailed &Ledger Entries];
                      ToolTipML=[ENU=View a summary of the all posted entries and adjustments related to a specific customer ledger entry.;
                                 ENG=View a summary of the all posted entries and adjustments related to a specific customer ledger entry.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 573;
                      RunPageView=SORTING(Cust. Ledger Entry No.,Posting Date);
                      RunPageLink=Cust. Ledger Entry No.=FIELD(Entry No.),
                                  Customer No.=FIELD(Customer No.);
                      Image=View;
                      Scope=Repeater }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 34      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 36      ;2   ;Action    ;
                      Name=Apply Entries;
                      ShortCutKey=Shift+F11;
                      CaptionML=[ENU=Apply Entries;
                                 ENG=Apply Entries];
                      ToolTipML=[ENU=Select one or more ledger entries that you want to apply this record to so that the related posted documents are closed as paid or refunded.;
                                 ENG=Select one or more ledger entries that you want to apply this record to so that the related posted documents are closed as paid or refunded.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ApplyEntries;
                      Scope=Repeater;
                      OnAction=VAR
                                 CustLedgEntry@1000 : Record 21;
                                 CustEntryApplyPostEntries@1001 : Codeunit 226;
                               BEGIN
                                 CustLedgEntry.COPY(Rec);
                                 CustEntryApplyPostEntries.ApplyCustEntryFormEntry(CustLedgEntry);
                                 CustLedgEntry.GET(CustLedgEntry."Entry No.");
                                 Rec := CustLedgEntry;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 63      ;2   ;Separator  }
      { 64      ;2   ;Action    ;
                      Name=UnapplyEntries;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Unapply Entries;
                                 ENG=Unapply Entries];
                      ToolTipML=[ENU=Unselect one or more ledger entries that you want to unapply this record.;
                                 ENG=Unselect one or more ledger entries that you want to unapply this record.];
                      ApplicationArea=#Basic,#Suite;
                      Image=UnApply;
                      Scope=Repeater;
                      OnAction=VAR
                                 CustEntryApplyPostedEntries@1000 : Codeunit 226;
                               BEGIN
                                 CustEntryApplyPostedEntries.UnApplyCustLedgEntry("Entry No.");
                               END;
                                }
      { 65      ;2   ;Separator  }
      { 66      ;2   ;Action    ;
                      Name=ReverseTransaction;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Reverse Transaction;
                                 ENG=Reverse Transaction];
                      ToolTipML=[ENU=Reverse an erroneous customer ledger entry.;
                                 ENG=Reverse an erroneous customer ledger entry.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ReverseRegister;
                      Scope=Repeater;
                      OnAction=VAR
                                 ReversalEntry@1000 : Record 179;
                               BEGIN
                                 CLEAR(ReversalEntry);
                                 IF Reversed THEN
                                   ReversalEntry.AlreadyReversedEntry(TABLECAPTION,"Entry No.");
                                 IF "Journal Batch Name" = '' THEN
                                   ReversalEntry.TestFieldError;
                                 TESTFIELD("Transaction No.");
                                 ReversalEntry.ReverseTransaction("Transaction No.");
                               END;
                                }
      { 19      ;2   ;ActionGroup;
                      Name=IncomingDocument;
                      CaptionML=[ENU=Incoming Document;
                                 ENG=Incoming Document];
                      ActionContainerType=NewDocumentItems;
                      Image=Documents }
      { 17      ;3   ;Action    ;
                      Name=IncomingDocCard;
                      CaptionML=[ENU=View Incoming Document;
                                 ENG=View Incoming Document];
                      ToolTipML=[ENU=View any incoming document records and file attachments that exist for the entry or document.;
                                 ENG=View any incoming document records and file attachments that exist for the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasIncomingDocument;
                      Image=ViewOrder;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.ShowCard("Document No.","Posting Date");
                               END;
                                }
      { 15      ;3   ;Action    ;
                      Name=SelectIncomingDoc;
                      AccessByPermission=TableData 130=R;
                      CaptionML=[ENU=Select Incoming Document;
                                 ENG=Select Incoming Document];
                      ToolTipML=[ENU=Select an incoming document record and file attachment that you want to link to the entry or document.;
                                 ENG=Select an incoming document record and file attachment that you want to link to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT HasIncomingDocument;
                      Image=SelectLineToApply;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.SelectIncomingDocumentForPostedDocument("Document No.","Posting Date",RECORDID);
                               END;
                                }
      { 11      ;3   ;Action    ;
                      Name=IncomingDocAttachFile;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Create Incoming Document from File;
                                 ENG=Create Incoming Document from File];
                      ToolTipML=[ENU=Create an incoming document record by selecting a file to attach, and then link the incoming document record to the entry or document.;
                                 ENG=Create an incoming document record by selecting a file to attach, and then link the incoming document record to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT HasIncomingDocument;
                      Image=Attach;
                      OnAction=VAR
                                 IncomingDocumentAttachment@1000 : Record 133;
                               BEGIN
                                 IncomingDocumentAttachment.NewAttachmentFromPostedDocument("Document No.","Posting Date");
                               END;
                                }
      { 37      ;1   ;Action    ;
                      CaptionML=[ENU=&Navigate;
                                 ENG=&Navigate];
                      ToolTipML=[ENU=Find all entries and documents that exist for the document number and posting date on the selected entry or document.;
                                 ENG=Find all entries and documents that exist for the document number and posting date on the selected entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Navigate;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
      { 13      ;1   ;Action    ;
                      ShortCutKey=Return;
                      CaptionML=[ENU=Show Posted Document;
                                 ENG=Show Posted Document];
                      ToolTipML=[ENU=Show details for the posted payment, invoice, or credit memo.;
                                 ENG=Show details for the posted payment, invoice, or credit memo.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowDoc
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer entry's posting date.;
                           ENG=Specifies the customer entry's posting date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date";
                Editable=FALSE }

    { 1000000000;2;Field  ;
                SourceExpr="Document Date" }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the document type that the customer entry belongs to.;
                           ENG=Specifies the document type that the customer entry belongs to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the entry's document number.;
                           ENG=Specifies the entry's document number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No.";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 1000000001;2;Field  ;
                SourceExpr="External Document No." }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer account number that the entry is linked to.;
                           ENG=Specifies the customer account number that the entry is linked to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer No.";
                Editable=FALSE }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the message exported to the payment file when you use the Export Payments to File function in the Payment Journal window.;
                           ENG=Specifies the message exported to the payment file when you use the Export Payments to File function in the Payment Journal window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Message to Recipient" }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the customer entry.;
                           ENG=Specifies a description of the customer entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Editable=FALSE }

    { 39  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 1 Code";
                Visible=FALSE;
                Editable=FALSE }

    { 41  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 2 Code";
                Visible=FALSE;
                Editable=FALSE }

    { 67  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the intercompany partner that the transaction is related to if the entry was created from an intercompany transaction.;
                           ENG=Specifies the code of the intercompany partner that the transaction is related to if the entry was created from an intercompany transaction.];
                ApplicationArea=#Intercompany;
                SourceExpr="IC Partner Code";
                Visible=FALSE;
                Editable=FALSE }

    { 43  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the salesperson whom the entry is linked to.;
                           ENG=Specifies the code for the salesperson whom the entry is linked to.];
                ApplicationArea=#Suite;
                SourceExpr="Salesperson Code";
                Visible=FALSE;
                Editable=FALSE }

    { 45  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code for the amount on the line.;
                           ENG=Specifies the currency code for the amount on the line.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                Editable=FALSE }

    { 55  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the original entry.;
                           ENG=Specifies the amount of the original entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Original Amount";
                Editable=FALSE }

    { 53  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that the entry originally consisted of, in LCY.;
                           ENG=Specifies the amount that the entry originally consisted of, in LCY.];
                ApplicationArea=#Advanced;
                SourceExpr="Original Amt. (LCY)";
                Visible=FALSE;
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the entry.;
                           ENG=Specifies the amount of the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Visible=AmountVisible;
                Editable=FALSE }

    { 47  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the entry in LCY.;
                           ENG=Specifies the amount of the entry in LCY.];
                ApplicationArea=#Advanced;
                SourceExpr="Amount (LCY)";
                Visible=AmountVisible;
                Editable=FALSE }

    { 7   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits.;
                           ENG=Specifies the total of the ledger entries that represent debits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=DebitCreditVisible }

    { 23  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits, expressed in LCY.;
                           ENG=Specifies the total of the ledger entries that represent debits, expressed in LCY.];
                ApplicationArea=#Advanced;
                SourceExpr="Debit Amount (LCY)";
                Visible=DebitCreditVisible }

    { 21  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits.;
                           ENG=Specifies the total of the ledger entries that represent credits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=DebitCreditVisible }

    { 27  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits, expressed in LCY.;
                           ENG=Specifies the total of the ledger entries that represent credits, expressed in LCY.];
                ApplicationArea=#Advanced;
                SourceExpr="Credit Amount (LCY)";
                Visible=DebitCreditVisible }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that remains to be applied to before the entry has been completely applied.;
                           ENG=Specifies the amount that remains to be applied to before the entry has been completely applied.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Amount";
                Editable=FALSE }

    { 49  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that remains to be applied to before the entry is totally applied to.;
                           ENG=Specifies the amount that remains to be applied to before the entry is totally applied to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Amt. (LCY)";
                Editable=FALSE }

    { 29  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total net amount of sales to the customer in LCY.;
                           ENG=Specifies the total net amount of sales to the customer in LCY.];
                ApplicationArea=#Suite;
                SourceExpr="Sales (LCY)";
                Visible=FALSE;
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of account that a balancing entry is posted to, such as BANK for a cash account.;
                           ENG=Specifies the type of account that a balancing entry is posted to, such as BANK for a cash account.];
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Account Type";
                Visible=FALSE;
                Editable=FALSE }

    { 73  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the general ledger, customer, vendor, or bank account that the balancing entry is posted to, such as a cash account for cash purchases.;
                           ENG=Specifies the number of the general ledger, customer, vendor, or bank account that the balancing entry is posted to, such as a cash account for cash purchases.];
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Account No.";
                Visible=FALSE;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the due date on the entry.;
                           ENG=Specifies the due date on the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Due Date";
                StyleExpr=StyleTxt }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.;
                           ENG=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pmt. Discount Date" }

    { 59  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the last date the amount in the entry must be paid in order for a payment discount tolerance to be granted.;
                           ENG=Specifies the last date the amount in the entry must be paid in order for a payment discount tolerance to be granted.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pmt. Disc. Tolerance Date" }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the discount that the customer can obtain if the entry is applied to before the payment discount date.;
                           ENG=Specifies the discount that the customer can obtain if the entry is applied to before the payment discount date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Original Pmt. Disc. Possible" }

    { 57  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the remaining payment discount which can be received if the payment is made before the payment discount date.;
                           ENG=Specifies the remaining payment discount which can be received if the payment is made before the payment discount date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Pmt. Disc. Possible" }

    { 61  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the maximum tolerated amount the entry can differ from the amount on the invoice or credit memo.;
                           ENG=Specifies the maximum tolerated amount the entry can differ from the amount on the invoice or credit memo.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Max. Payment Tolerance" }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how to make payment, such as with bank transfer, cash,  or check.;
                           ENG=Specifies how to make payment, such as with bank transfer, cash, or cheque.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Method Code" }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the amount on the entry has been fully paid or there is still a remaining amount that must be applied to.;
                           ENG=Specifies whether the amount on the entry has been fully paid or there is still a remaining amount that must be applied to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Open;
                Editable=FALSE }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that the related entry represents an unpaid invoice for which either a payment suggestion, a reminder, or a finance charge memo exists.;
                           ENG=Specifies that the related entry represents an unpaid invoice for which either a payment suggestion, a reminder, or a finance charge memo exists.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="On Hold" }

    { 83  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.;
                           ENG=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.];
                ApplicationArea=#Advanced;
                SourceExpr="User ID";
                Visible=FALSE;
                Editable=FALSE }

    { 85  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the source code that specifies where the entry was created.;
                           ENG=Specifies the source code that specifies where the entry was created.];
                ApplicationArea=#Advanced;
                SourceExpr="Source Code";
                Visible=FALSE;
                Editable=FALSE }

    { 87  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the reason code, a supplementary source code that enables you to trace the entry.;
                           ENG=Specifies the reason code, a supplementary source code that enables you to trace the entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Reason Code";
                Visible=FALSE;
                Editable=FALSE }

    { 35  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the entry has been part of a reverse transaction.;
                           ENG=Specifies if the entry has been part of a reverse transaction.];
                ApplicationArea=#Advanced;
                SourceExpr=Reversed;
                Visible=FALSE;
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the correcting entry that replaced the original entry in the reverse transaction.;
                           ENG=Specifies the number of the correcting entry that replaced the original entry in the reverse transaction.];
                ApplicationArea=#Advanced;
                SourceExpr="Reversed by Entry No.";
                Visible=FALSE;
                Editable=FALSE }

    { 75  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the original entry that was undone by the reverse transaction.;
                           ENG=Specifies the number of the original entry that was undone by the reverse transaction.];
                ApplicationArea=#Advanced;
                SourceExpr="Reversed Entry No.";
                Visible=FALSE;
                Editable=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the entry, as assigned from the specified number series when the entry was created.;
                           ENG=Specifies the number of the entry, as assigned from the specified number series when the entry was created.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No.";
                Editable=FALSE }

    { 290 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that the entry was created as a result of exporting a payment journal line.;
                           ENG=Specifies that the entry was created as a result of exporting a payment journal line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Exported to Payment File";
                Editable=TRUE }

    { 291 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the direct-debit mandate that the customer has signed to allow direct debit collection of payments.;
                           ENG=Specifies the direct-debit mandate that the customer has signed to allow direct debit collection of payments.];
                ApplicationArea=#Advanced;
                SourceExpr="Direct Debit Mandate ID";
                Visible=FALSE }

    { 1000000002;2;Field  ;
                Name=Customer Name;
                CaptionML=ENU=Customer Name;
                SourceExpr=Cust.Name }

    { 31  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a reference to a combination of dimension values. The actual values are stored in the Dimension Set Entry table.;
                           ENG=Specifies a reference to a combination of dimension values. The actual values are stored in the Dimension Set Entry table.];
                ApplicationArea=#Suite;
                SourceExpr="Dimension Set ID";
                Visible=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1903096107;1;Part   ;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=Entry No.=FIELD(Entry No.);
                PagePartID=Page9106;
                Visible=TRUE;
                PartType=Page }

    { 9   ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page193;
                PartType=Page;
                ShowFilter=No }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Navigate@1000 : Page 344;
      DimensionSetIDFilter@1002 : Page 481;
      StyleTxt@1001 : Text;
      HasIncomingDocument@1003 : Boolean;
      AmountVisible@1004 : Boolean;
      DebitCreditVisible@1005 : Boolean;
      Cust@1000000000 : Record 18;

    LOCAL PROCEDURE SetConrolVisibility@8();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      AmountVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Debit/Credit Only");
      DebitCreditVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Amount Only");
    END;

    BEGIN
    END.
  }
}

OBJECT Page 27 Vendor List
{
  OBJECT-PROPERTIES
  {
    Date=27/04/20;
    Time=11:19:40;
    Modified=Yes;
    Version List=NAVW111.00.00.27667;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Vendors;
               ENG=Vendors];
    SourceTable=Table23;
    PageType=List;
    CardPageID=Vendor Card;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,New Document,Vendor;
                                ENG=New,Process,Report,New Document,Vendor];
    OnInit=BEGIN
             SetVendorNoVisibilityOnFactBoxes;
           END;

    OnOpenPage=BEGIN
                 // Contextual Power BI FactBox: filtering available reports, setting context, loading Power BI related user settings
                 CurrPage."Power BI Report FactBox".PAGE.SetNameFilter(CurrPage.CAPTION);
                 CurrPage."Power BI Report FactBox".PAGE.SetContext(CurrPage.OBJECTID(FALSE));
                 PowerBIVisible := SetPowerBIUserConfig.SetUserConfig(PowerBIUserConfiguration,CurrPage.OBJECTID(FALSE));
                 SETFILTER("Date Filter",'..%1',WORKDATE);
                 ResyncVisible := ReadSoftOCRMasterDataSync.IsSyncEnabled;
               END;

    OnAfterGetCurrRecord=BEGIN
                           SetSocialListeningFactboxVisibility;
                           OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);

                           CanCancelApprovalForRecord := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);

                           WorkflowWebhookManagement.GetCanRequestAndCanCancel(RECORDID,CanRequestApprovalForFlow,CanCancelApprovalForFlow);

                           // Contextual Power BI FactBox: send data to filter the report in the FactBox
                           CurrPage."Power BI Report FactBox".PAGE.SetCurrentListSelection("No.",FALSE);
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 16      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ven&dor;
                                 ENG=Ven&dor];
                      Image=Vendor }
      { 44      ;2   ;ActionGroup;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      Image=Dimensions }
      { 84      ;3   ;Action    ;
                      Name=DimensionsSingle;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions-Single;
                                 ENG=Dimensions-Single];
                      ToolTipML=[ENU=View or edit the single set of dimensions that are set up for the selected record.;
                                 ENG=View or edit the single set of dimensions that are set up for the selected record.];
                      ApplicationArea=#Suite;
                      RunObject=Page 540;
                      RunPageLink=Table ID=CONST(23),
                                  No.=FIELD(No.);
                      Image=Dimensions }
      { 43      ;3   ;Action    ;
                      Name=DimensionsMultiple;
                      AccessByPermission=TableData 348=R;
                      CaptionML=[ENU=Dimensions-&Multiple;
                                 ENG=Dimensions-&Multiple];
                      ToolTipML=[ENU=View or edit dimensions for a group of records. You can assign dimension codes to transactions to distribute costs and analyze historical information.;
                                 ENG=View or edit dimensions for a group of records. You can assign dimension codes to transactions to distribute costs and analyse historical information.];
                      ApplicationArea=#Suite;
                      Image=DimensionSets;
                      OnAction=VAR
                                 Vend@1001 : Record 23;
                                 DefaultDimMultiple@1002 : Page 542;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Vend);
                                 DefaultDimMultiple.SetMultiVendor(Vend);
                                 DefaultDimMultiple.RUNMODAL;
                               END;
                                }
      { 54      ;2   ;Action    ;
                      CaptionML=[ENU=Bank Accounts;
                                 ENG=Bank Accounts];
                      ToolTipML=[ENU=Open the list of the vendor's bank accounts;
                                 ENG=Open the list of the vendor's bank accounts];
                      ApplicationArea=#Advanced;
                      RunObject=Page 426;
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=BankAccount }
      { 56      ;2   ;Action    ;
                      AccessByPermission=TableData 5050=R;
                      CaptionML=[ENU=C&ontact;
                                 ENG=C&ontact];
                      ToolTipML=[ENU=View or edit detailed information about the contact person at the vendor.;
                                 ENG=View or edit detailed information about the contact person at the vendor.];
                      ApplicationArea=#Advanced;
                      Image=ContactPerson;
                      OnAction=BEGIN
                                 ShowContact;
                               END;
                                }
      { 55      ;2   ;Separator  }
      { 53      ;2   ;Action    ;
                      Name=OrderAddresses;
                      CaptionML=[ENU=Order &Addresses;
                                 ENG=Order &Addresses];
                      ToolTipML=[ENU=View or edit alternate addresses for the vendor.;
                                 ENG=View or edit alternate addresses for the vendor.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 369;
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=Addresses }
      { 20      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ENG=Co&mments];
                      ToolTipML=[ENU=View or add comments for the record.;
                                 ENG=View or add comments for the record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 124;
                      RunPageLink=Table Name=CONST(Vendor),
                                  No.=FIELD(No.);
                      Image=ViewComments }
      { 62      ;2   ;Action    ;
                      CaptionML=[ENU=Cross Re&ferences;
                                 ENG=Cross Re&ferences];
                      ToolTipML=[ENU=Set up a customer's or vendor's own identification of the selected item. Cross-references to the customer's item number means that the item number is automatically shown on sales documents instead of the number that you use.;
                                 ENG=Set up a customer's or vendor's own identification of the selected item. Cross-references to the customer's item number means that the item number is automatically shown on sales documents instead of the number that you use.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 5723;
                      RunPageView=SORTING(Cross-Reference Type,Cross-Reference Type No.);
                      RunPageLink=Cross-Reference Type=CONST(Vendor),
                                  Cross-Reference Type No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Change;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes }
      { 36      ;2   ;Action    ;
                      Name=ApprovalEntries;
                      AccessByPermission=TableData 454=R;
                      CaptionML=[ENU=Approvals;
                                 ENG=Approvals];
                      ToolTipML=[ENU=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.;
                                 ENG=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Image=Approvals;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 ApprovalsMgmt.OpenApprovalEntriesPage(RECORDID);
                               END;
                                }
      { 23      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Purchases;
                                 ENG=&Purchases];
                      Image=Purchasing }
      { 66      ;2   ;Action    ;
                      CaptionML=[ENU=Items;
                                 ENG=Items];
                      ToolTipML=[ENU=Open the list of items that you trade in.;
                                 ENG=Open the list of items that you trade in.];
                      ApplicationArea=#Planning;
                      RunObject=Page 297;
                      RunPageView=SORTING(Vendor No.);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=Item }
      { 25      ;2   ;Action    ;
                      CaptionML=[ENU=Invoice &Discounts;
                                 ENG=Invoice &Discounts];
                      ToolTipML=[ENU=Set up different discounts that are applied to invoices for the vendor. An invoice discount is automatically granted to the vendor when the total on a sales invoice exceeds a certain amount.;
                                 ENG=Set up different discounts that are applied to invoices for the vendor. An invoice discount is automatically granted to the vendor when the total on a sales invoice exceeds a certain amount.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 28;
                      RunPageLink=Code=FIELD(Invoice Disc. Code);
                      Image=CalculateInvoiceDiscount }
      { 24      ;2   ;Action    ;
                      CaptionML=[ENU=Prices;
                                 ENG=Prices];
                      ToolTipML=[ENU=View or set up different prices for items that you buy from the vendor. An item price is automatically granted on invoice lines when the specified criteria are met, such as vendor, quantity, or ending date.;
                                 ENG=View or set up different prices for items that you buy from the vendor. An item price is automatically granted on invoice lines when the specified criteria are met, such as vendor, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7012;
                      RunPageView=SORTING(Vendor No.);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=Price }
      { 64      ;2   ;Action    ;
                      CaptionML=[ENU=Line Discounts;
                                 ENG=Line Discounts];
                      ToolTipML=[ENU=View or set up different discounts for items that you buy from the vendor. An item discount is automatically granted on invoice lines when the specified criteria are met, such as vendor, quantity, or ending date.;
                                 ENG=View or set up different discounts for items that you buy from the vendor. An item discount is automatically granted on invoice lines when the specified criteria are met, such as vendor, quantity, or ending date.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 7014;
                      RunPageView=SORTING(Vendor No.);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=LineDiscount }
      { 70      ;2   ;Action    ;
                      CaptionML=[ENU=Prepa&yment Percentages;
                                 ENG=Prepa&yment Percentages];
                      ToolTipML=[ENU="View or edit the percentages of the price that can be paid as a prepayment. ";
                                 ENG="View or edit the percentages of the price that can be paid as a prepayment. "];
                      ApplicationArea=#Prepayments;
                      RunObject=Page 665;
                      RunPageView=SORTING(Vendor No.);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=PrepaymentPercentages }
      { 67      ;2   ;Action    ;
                      CaptionML=[ENU=S&td. Vend. Purchase Codes;
                                 ENG=S&td. Vend. Purchase Codes];
                      ToolTipML=[ENU=View or edit recurring purchase lines for the vendor.;
                                 ENG=View or edit recurring purchase lines for the vendor.];
                      ApplicationArea=#Suite;
                      RunObject=Page 178;
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=CodesList }
      { 38      ;2   ;Action    ;
                      CaptionML=[ENU=Mapping Text to Account;
                                 ENG=Mapping Text to Account];
                      ToolTipML=[ENU=Page mapping text to account;
                                 ENG=Page mapping text to account];
                      ApplicationArea=#Advanced;
                      RunObject=Page 1254;
                      RunPageLink=Vendor No.=FIELD(No.);
                      Image=MapAccounts }
      { 11      ;1   ;ActionGroup;
                      CaptionML=[ENU=Documents;
                                 ENG=Documents];
                      Image=Administration }
      { 26      ;2   ;Action    ;
                      CaptionML=[ENU=Quotes;
                                 ENG=Quotes];
                      ToolTipML=[ENU=View a list of ongoing sales quotes.;
                                 ENG=View a list of ongoing sales quotes.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 9306;
                      RunPageView=SORTING(Document Type,Buy-from Vendor No.);
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=Quote }
      { 27      ;2   ;Action    ;
                      CaptionML=[ENU=Orders;
                                 ENG=Orders];
                      ToolTipML=[ENU=View a list of ongoing purchase orders for the vendor.;
                                 ENG=View a list of ongoing purchase orders for the vendor.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 9307;
                      RunPageView=SORTING(Document Type,Buy-from Vendor No.);
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=Document }
      { 63      ;2   ;Action    ;
                      CaptionML=[ENU=Return Orders;
                                 ENG=Return Orders];
                      ToolTipML=[ENU=Open the list of ongoing return orders.;
                                 ENG=Open the list of ongoing return orders.];
                      ApplicationArea=#PurchReturnOrder;
                      RunObject=Page 9311;
                      RunPageView=SORTING(Document Type,Buy-from Vendor No.);
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=ReturnOrder }
      { 58      ;2   ;Action    ;
                      CaptionML=[ENU=Blanket Orders;
                                 ENG=Blanket Orders];
                      ToolTipML=[ENU=Open the list of ongoing blanket orders.;
                                 ENG=Open the list of ongoing blanket orders.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 9310;
                      RunPageView=SORTING(Document Type,Buy-from Vendor No.);
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=BlanketOrder }
      { 13      ;1   ;ActionGroup;
                      CaptionML=[ENU=History;
                                 ENG=History];
                      Image=History }
      { 22      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Ledger E&ntries;
                                 ENG=Ledger E&ntries];
                      ToolTipML=[ENU=View the history of transactions that have been posted for the selected record.;
                                 ENG=View the history of transactions that have been posted for the selected record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 29;
                      RunPageView=SORTING(Vendor No.)
                                  ORDER(Descending);
                      RunPageLink=Vendor No.=FIELD(No.);
                      Promoted=Yes;
                      Image=VendorLedger;
                      PromotedCategory=Process }
      { 18      ;2   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 ENG=Statistics];
                      ToolTipML=[ENU=View statistical information, such as the value of posted entries, for the record.;
                                 ENG=View statistical information, such as the value of posted entries, for the record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 152;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 21      ;2   ;Action    ;
                      CaptionML=[ENU=Purchases;
                                 ENG=Purchases];
                      ToolTipML=[ENU=Shows a summary of vendor ledger entries. You select the time interval in the View by field. The Period column on the left contains a series of dates that are determined by the time interval you have selected.;
                                 ENG=Shows a summary of vendor ledger entries. You select the time interval in the View by field. The Period column on the left contains a series of dates that are determined by the time interval you have selected.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 156;
                      RunPageLink=No.=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=Purchase }
      { 19      ;2   ;Action    ;
                      CaptionML=[ENU=Entry Statistics;
                                 ENG=Entry Statistics];
                      ToolTipML=[ENU=View entry statistics for the record.;
                                 ENG=View entry statistics for the record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 303;
                      RunPageLink=No.=FIELD(No.),
                                  Date Filter=FIELD(Date Filter),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                      Image=EntryStatistics }
      { 57      ;2   ;Action    ;
                      CaptionML=[ENU=Statistics by C&urrencies;
                                 ENG=Statistics by C&urrencies];
                      ToolTipML=[ENU=View statistics for vendors that use multiple currencies.;
                                 ENG=View statistics for vendors that use multiple currencies.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 487;
                      RunPageLink=Vendor Filter=FIELD(No.),
                                  Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                                  Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter),
                                  Date Filter=FIELD(Date Filter);
                      Image=Currencies }
      { 6500    ;2   ;Action    ;
                      CaptionML=[ENU=Item &Tracking Entries;
                                 ENG=Item &Tracking Entries];
                      ToolTipML=[ENU=View serial or lot numbers that are assigned to items.;
                                 ENG=View serial or lot numbers that are assigned to items.];
                      ApplicationArea=#ItemTracking;
                      Image=ItemTrackingLedger;
                      OnAction=VAR
                                 ItemTrackingDocMgt@1001 : Codeunit 6503;
                               BEGIN
                                 ItemTrackingDocMgt.ShowItemTrackingForMasterData(2,"No.",'','','','','');
                               END;
                                }
      { 1900000005;0 ;ActionContainer;
                      ActionContainerType=NewDocumentItems }
      { 1903213705;1 ;Action    ;
                      Name=NewBlanketPurchaseOrder;
                      CaptionML=[ENU=Blanket Purchase Order;
                                 ENG=Blanket Purchase Order];
                      ToolTipML=[ENU=Create a new blanket purchase order for the vendor.;
                                 ENG=Create a new blanket purchase order for the vendor.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 509;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=BlanketOrder;
                      RunPageMode=Create }
      { 1901469405;1 ;Action    ;
                      Name=NewPurchaseQuote;
                      CaptionML=[ENU=Purchase Quote;
                                 ENG=Purchase Quote];
                      ToolTipML=[ENU=Create a new purchase quote for the vendor.;
                                 ENG=Create a new purchase quote for the vendor.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 49;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=Quote;
                      RunPageMode=Create }
      { 1907709505;1 ;Action    ;
                      Name=NewPurchaseInvoice;
                      CaptionML=[ENU=Purchase Invoice;
                                 ENG=Purchase Invoice];
                      ToolTipML=[ENU=Create a new purchase invoice for items or services.;
                                 ENG=Create a new purchase invoice for items or services.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 51;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Promoted=Yes;
                      Image=NewPurchaseInvoice;
                      PromotedCategory=Category4;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1907375405;1 ;Action    ;
                      Name=NewPurchaseOrder;
                      CaptionML=[ENU=Purchase Order;
                                 ENG=Purchase Order];
                      ToolTipML=[ENU=Create a new purchase order.;
                                 ENG=Create a new purchase order.];
                      ApplicationArea=#Suite;
                      RunObject=Page 50;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Category4;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1905024805;1 ;Action    ;
                      Name=NewPurchaseCrMemo;
                      CaptionML=[ENU=Purchase Credit Memo;
                                 ENG=Purchase Credit Memo];
                      ToolTipML=[ENU=Create a new purchase credit memo to revert a posted purchase invoice.;
                                 ENG=Create a new purchase credit memo to revert a posted purchase invoice.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 52;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Promoted=Yes;
                      Image=CreditMemo;
                      PromotedCategory=Category4;
                      PromotedOnly=Yes;
                      RunPageMode=Create }
      { 1904749705;1 ;Action    ;
                      Name=NewPurchaseReturnOrder;
                      CaptionML=[ENU=Purchase Return Order;
                                 ENG=Purchase Return Order];
                      ToolTipML=[ENU=Create a new purchase return order for the vendor.;
                                 ENG=Create a new purchase return order for the vendor.];
                      ApplicationArea=#PurchReturnOrder;
                      RunObject=Page 6640;
                      RunPageLink=Buy-from Vendor No.=FIELD(No.);
                      Image=ReturnOrder;
                      RunPageMode=Create }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 30      ;1   ;ActionGroup;
                      CaptionML=[ENU=Request Approval;
                                 ENG=Request Approval];
                      Image=SendApprovalRequest }
      { 28      ;2   ;Action    ;
                      Name=SendApprovalRequest;
                      CaptionML=[ENU=Send A&pproval Request;
                                 ENG=Send A&pproval Request];
                      ToolTipML=[ENU=Request approval to change the record.;
                                 ENG=Request approval to change the record.];
                      ApplicationArea=#Advanced;
                      Enabled=NOT OpenApprovalEntriesExist AND CanRequestApprovalForFlow;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 IF ApprovalsMgmt.CheckVendorApprovalsWorkflowEnabled(Rec) THEN
                                   ApprovalsMgmt.OnSendVendorForApproval(Rec);
                               END;
                                }
      { 17      ;2   ;Action    ;
                      Name=CancelApprovalRequest;
                      CaptionML=[ENU=Cancel Approval Re&quest;
                                 ENG=Cancel Approval Re&quest];
                      ToolTipML=[ENU=Cancel the approval request.;
                                 ENG=Cancel the approval request.];
                      ApplicationArea=#Advanced;
                      Enabled=CanCancelApprovalForRecord OR CanCancelApprovalForFlow;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1001 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.OnCancelVendorApprovalRequest(Rec);
                                 WorkflowWebhookManagement.FindAndCancel(RECORDID);
                               END;
                                }
      { 1902327104;1 ;Action    ;
                      CaptionML=[ENU=Payment Journal;
                                 ENG=Payment Journal];
                      ToolTipML=[ENU=View or edit the payment journal where you can register payments to vendors.;
                                 ENG=View or edit the payment journal where you can register payments to vendors.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 256;
                      Promoted=Yes;
                      Image=PaymentJournal;
                      PromotedCategory=Process }
      { 1906371704;1 ;Action    ;
                      CaptionML=[ENU=Purchase Journal;
                                 ENG=Purchase Journal];
                      ToolTipML=[ENU="Post any purchase transaction for the vendor. ";
                                 ENG="Post any purchase transaction for the vendor. "];
                      ApplicationArea=#Advanced;
                      RunObject=Page 254;
                      Promoted=Yes;
                      Image=Journals;
                      PromotedCategory=Process }
      { 48      ;1   ;Action    ;
                      Name=ApplyTemplate;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Apply Template;
                                 ENG=Apply Template];
                      ToolTipML=[ENU=Apply a template to update one or more entities with your standard settings for a certain type of entity.;
                                 ENG=Apply a template to update one or more entities with your standard settings for a certain type of entity.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ApplyTemplate;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Vendor@1000 : Record 23;
                                 MiniVendorTemplate@1001 : Record 1303;
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(Vendor);
                                 MiniVendorTemplate.UpdateVendorsFromTemplate(Vendor);
                               END;
                                }
      { 46      ;1   ;ActionGroup;
                      CaptionML=[ENU=Display;
                                 ENG=Display] }
      { 42      ;2   ;Action    ;
                      Name=ReportFactBoxVisibility;
                      CaptionML=[ENU=Show/Hide Power BI Reports;
                                 ENG=Show/Hide Power BI Reports];
                      ToolTipML=[ENU=Select if the Power BI FactBox is visible or not.;
                                 ENG=Select if the Power BI FactBox is visible or not.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Report;
                      OnAction=BEGIN
                                 IF PowerBIVisible THEN
                                   PowerBIVisible := FALSE
                                 ELSE
                                   PowerBIVisible := TRUE;
                                 // save visibility value into the table
                                 CurrPage."Power BI Report FactBox".PAGE.SetFactBoxVisibility(PowerBIVisible);
                               END;
                                }
      { 50      ;1   ;ActionGroup;
                      CaptionML=[ENU=OCR;
                                 ENG=OCR] }
      { 52      ;2   ;Action    ;
                      Name=Resync;
                      CaptionML=[ENU=Resync all Vendors;
                                 ENG=Resync all Vendors];
                      ToolTipML=[ENU=Synchronize vendors and vendor bank accounts with the OCR service.;
                                 ENG=Synchronise vendors and vendor bank accounts with the OCR service.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=ResyncVisible;
                      Image=CopyFromChartOfAccounts;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ReadSoftOCRMasterDataSync.SyncMasterData(TRUE,FALSE);
                               END;
                                }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 3       ;1   ;ActionGroup;
                      CaptionML=[ENU=General;
                                 ENG=General];
                      Image=Report }
      { 1900518506;2 ;Action    ;
                      CaptionML=[ENU=Vendor - List;
                                 ENG=Vendor - List];
                      ToolTipML=[ENU=View various kinds of basic information for vendors, such as vendor posting group, discount and payment information, priority level and the vendor's default currency, and the vendor's current balance (in LCY). The report can be used, for example, to maintain the information in the Vendor table.;
                                 ENG=View various kinds of basic information for vendors, such as vendor posting group, discount and payment information, priority level and the vendor's default currency, and the vendor's current balance (in LCY). The report can be used, for example, to maintain the information in the Vendor table.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 301;
                      Image=Report }
      { 1906328906;2 ;Action    ;
                      CaptionML=[ENU=Vendor Register;
                                 ENG=Vendor Register];
                      ToolTipML=[ENU=View vendor ledger entries that have been posted in connection with a general ledger register. The entries are divided into, and sorted according to, G/L registers. By using a filter, you can select exactly the entries in the registers that you need to see. The report can be used to document the contents of the various registers for internal or external audits.;
                                 ENG=View vendor ledger entries that have been posted in connection with a general ledger register. The entries are divided into, and sorted according to, G/L registers. By using a filter, you can select exactly the entries in the registers that you need to see. The report can be used to document the contents of the various registers for internal or external audits.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 303;
                      Image=Report }
      { 1906643406;2 ;Action    ;
                      CaptionML=[ENU=Vendor Item Catalog;
                                 ENG=Vendor Item Catalogue];
                      ToolTipML=[ENU=View a list of the items that your vendors supply.;
                                 ENG=View a list of the items that your vendors supply.];
                      ApplicationArea=#Suite;
                      RunObject=Report 320;
                      Image=Report }
      { 1905916106;2 ;Action    ;
                      CaptionML=[ENU=Vendor - Labels;
                                 ENG=Vendor - Labels];
                      ToolTipML=[ENU=View mailing labels with the vendors' names and addresses.;
                                 ENG=View mailing labels with the vendors' names and addresses.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 310;
                      Image=Report }
      { 1900497106;2 ;Action    ;
                      CaptionML=[ENU=Vendor - Top 10 List;
                                 ENG=Vendor - Top 10 List];
                      ToolTipML=[ENU=View a list of the vendors from whom you purchase the most or to whom you owe the most.;
                                 ENG=View a list of the vendors from whom you purchase the most or to whom you owe the most.];
                      ApplicationArea=#Suite;
                      RunObject=Report 311;
                      Image=Report }
      { 5       ;1   ;ActionGroup;
                      CaptionML=[ENU=Orders;
                                 ENG=Orders];
                      Image=Report }
      { 1906294906;2 ;Action    ;
                      CaptionML=[ENU=Vendor - Order Summary;
                                 ENG=Vendor - Order Summary];
                      ToolTipML=[ENU=View the order detail (the quantity not yet received) for each vendor in three periods of 30 days each, starting from a selected date. There are also columns with orders before and after the three periods and a column with the total order detail for each vendor. The report can be used to analyze a company's expected purchase volume.;
                                 ENG=View the order detail (the quantity not yet received) for each vendor in three periods of 30 days each, starting from a selected date. There are also columns with orders before and after the three periods and a column with the total order detail for each vendor. The report can be used to analyse a company's expected purchase volume.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 307;
                      Image=Report }
      { 1904076306;2 ;Action    ;
                      CaptionML=[ENU=Vendor - Order Detail;
                                 ENG=Vendor - Order Detail];
                      ToolTipML=[ENU=View a list of items that have been ordered, but not yet received, from each vendor. The order amounts are totaled for each vendor and for the entire list. The report can be used, for example, to obtain an overview of purchases over the short term or to analyze possible receipt problems.;
                                 ENG=View a list of items that have been ordered, but not yet received, from each vendor. The order amounts are totalled for each vendor and for the entire list. The report can be used, for example, to obtain an overview of purchases over the short term or to analyse possible receipt problems.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 308;
                      Image=Report }
      { 7       ;1   ;ActionGroup;
                      CaptionML=[ENU=Purchase;
                                 ENG=Purchase];
                      Image=Purchase }
      { 1907303206;2 ;Action    ;
                      CaptionML=[ENU=Vendor - Purchase List;
                                 ENG=Vendor - Purchase List];
                      ToolTipML=[ENU=View a list of vendor purchases for a selected period.;
                                 ENG=View a list of vendor purchases for a selected period.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 309;
                      Image=Report }
      { 1904498706;2 ;Action    ;
                      CaptionML=[ENU=Vendor/Item Purchases;
                                 ENG=Vendor/Item Purchases];
                      ToolTipML=[ENU=View a list of item entries for each vendor in a selected period.;
                                 ENG=View a list of item entries for each vendor in a selected period.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 313;
                      Image=Report }
      { 1905448306;2 ;Action    ;
                      CaptionML=[ENU=Purchase Statistics;
                                 ENG=Purchase Statistics];
                      ToolTipML=[ENU=View a list of amounts for purchases, invoice discount and payment discount in $ for each vendor.;
                                 ENG=View a list of amounts for purchases, invoice discount and payment discount in $ for each vendor.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 312;
                      Image=Report }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=Financial Management;
                                 ENG=Financial Management];
                      Image=Report }
      { 1905766406;2 ;Action    ;
                      CaptionML=[ENU=Payments on Hold;
                                 ENG=Payments on Hold];
                      ToolTipML=[ENU=View a list of all vendor ledger entries on which the On Hold field is marked.;
                                 ENG=View a list of all vendor ledger entries on which the On Hold field is marked.];
                      ApplicationArea=#Suite;
                      RunObject=Report 319;
                      Image=Report }
      { 1905685906;2 ;Action    ;
                      CaptionML=[ENU=Vendor - Summary Aging;
                                 ENG=Vendor - Summary Ageing];
                      ToolTipML=[ENU=View, print, or save a summary of the payables owed to each vendor, divided into three time periods.;
                                 ENG=View, print, or save a summary of the payables owed to each vendor, divided into three time periods.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 305;
                      Image=Report }
      { 1905388206;2 ;Action    ;
                      CaptionML=[ENU=Aged Accounts Payable;
                                 ENG=Aged Accounts Payable];
                      ToolTipML=[ENU=View a list of aged remaining balances for each vendor.;
                                 ENG=View a list of aged remaining balances for each vendor.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 322;
                      Image=Report }
      { 1904504206;2 ;Action    ;
                      CaptionML=[ENU=Vendor - Balance to Date;
                                 ENG=Vendor - Balance to Date];
                      ToolTipML=[ENU=View, print, or save a detail balance to date for selected vendors.;
                                 ENG=View, print, or save a detail balance to date for selected vendors.];
                      ApplicationArea=#Advanced;
                      RunObject=Report 321;
                      Image=Report }
      { 1906387606;2 ;Action    ;
                      CaptionML=[ENU=Vendor - Trial Balance;
                                 ENG=Vendor - Trial Balance];
                      ToolTipML=[ENU=View the beginning and ending balance for vendors with entries within a specified period. The report can be used to verify that the balance for a vendor posting group is equal to the balance on the corresponding general ledger account on a certain date.;
                                 ENG=View the beginning and ending balance for vendors with entries within a specified period. The report can be used to verify that the balance for a vendor posting group is equal to the balance on the corresponding general ledger account on a certain date.];
                      ApplicationArea=#Suite;
                      RunObject=Report 329;
                      Image=Report }
      { 1900639206;2 ;Action    ;
                      CaptionML=[ENU=Vendor - Detail Trial Balance;
                                 ENG=Vendor - Detail Trial Balance];
                      ToolTipML=[ENU=View a detail trial balance for selected vendors.;
                                 ENG=View a detail trial balance for selected vendors.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Report 304;
                      Image=Report }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the involved entry or record, according to the specified number series.;
                           ENG=Specifies the number of the involved entry or record, according to the specified number series.];
                ApplicationArea=#All;
                SourceExpr="No." }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor's name. You can enter a maximum of 30 characters, both numbers and letters.;
                           ENG=Specifies the vendor's name. You can enter a maximum of 30 characters, both numbers and letters.];
                ApplicationArea=#All;
                SourceExpr=Name }

    { 41  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the responsibility center, such as a distribution hub, that is associated with the involved user, company, customer, or vendor.;
                           ENG=Specifies the code of the responsibility centre, such as a distribution hub, that is associated with the involved user, company, customer, or vendor.];
                ApplicationArea=#Advanced;
                SourceExpr="Responsibility Center" }

    { 59  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the warehouse location where items from the vendor must be received by default.;
                           ENG=Specifies the warehouse location where items from the vendor must be received by default.];
                ApplicationArea=#Location;
                SourceExpr="Location Code" }

    { 29  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the postal code.;
                           ENG=Specifies the postcode.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Post Code";
                Visible=FALSE }

    { 31  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the country/region of the address.;
                           ENG=Specifies the country/region of the address.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Country/Region Code";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor's telephone number.;
                           ENG=Specifies the vendor's telephone number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Phone No." }

    { 33  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor's fax number.;
                           ENG=Specifies the vendor's fax number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Fax No.";
                Visible=FALSE }

    { 68  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor's intercompany partner code.;
                           ENG=Specifies the vendor's intercompany partner code.];
                ApplicationArea=#Intercompany;
                SourceExpr="IC Partner Code";
                Visible=FALSE }

    { 35  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the person you regularly contact when you do business with this vendor.;
                           ENG=Specifies the name of the person you regularly contact when you do business with this vendor.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Contact }

    { 37  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies which purchaser is assigned to the vendor.;
                           ENG=Specifies which purchaser is assigned to the vendor.];
                ApplicationArea=#Suite;
                SourceExpr="Purchaser Code";
                Visible=FALSE }

    { 39  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor's market type to link business transactions made for the vendor with the appropriate account in the general ledger.;
                           ENG=Specifies the vendor's market type to link business transactions made for the vendor with the appropriate account in the general ledger.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Vendor Posting Group";
                Visible=FALSE }

    { 51  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor's trade type to link transactions made for this vendor with the appropriate general ledger account according to the general posting setup.;
                           ENG=Specifies the vendor's trade type to link transactions made for this vendor with the appropriate general ledger account according to the general posting setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Gen. Bus. Posting Group";
                Visible=FALSE }

    { 49  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.;
                           ENG=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Bus. Posting Group";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount.;
                           ENG=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Terms Code";
                Visible=FALSE }

    { 45  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the involved finance charges in case of late payment.;
                           ENG=Specifies the code for the involved finance charges in case of late payment.];
                ApplicationArea=#Advanced;
                SourceExpr="Fin. Charge Terms Code";
                Visible=FALSE }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code that is inserted by default when you create purchase documents or journal lines for the vendor.;
                           ENG=Specifies the currency code that is inserted by default when you create purchase documents or journal lines for the vendor.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 47  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the language that is used when translating specified text on documents to foreign business partner, such as an item description on an order confirmation.;
                           ENG=Specifies the language that is used when translating specified text on documents to foreign business partner, such as an item description on an order confirmation.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Language Code";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies an alternate name that you can use to search for the record in question when you cannot remember the value in the Name field.;
                           ENG=Specifies an alternate name that you can use to search for the record in question when you cannot remember the value in the Name field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Search Name" }

    { 1102601000;2;Field  ;
                ToolTipML=[ENU=Specifies that the related record is blocked from being posted in transactions, for example a vendor that is declared insolvent or an item that is placed in quarantine.;
                           ENG=Specifies that the related record is blocked from being posted in transactions, for example a vendor that is declared insolvent or an item that is placed in quarantine.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Blocked;
                Visible=FALSE }

    { 200 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether to limit access to data for the data subject during daily operations. This is useful, for example, when protecting data from changes while it is under privacy review.;
                           ENG=Specifies whether to limit access to data for the data subject during daily operations. This is useful, for example, when protecting data from changes while it is under privacy review.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Privacy Blocked";
                Visible=FALSE }

    { 1102601002;2;Field  ;
                ToolTipML=[ENU=Specifies when the vendor card was last modified.;
                           ENG=Specifies when the vendor card was last modified.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Last Date Modified";
                Visible=FALSE }

    { 1102601004;2;Field  ;
                ToolTipML=[ENU=Specifies how to apply payments to entries for this vendor.;
                           ENG=Specifies how to apply payments to entries for this vendor.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Application Method";
                Visible=FALSE }

    { 1102601006;2;Field  ;
                Name=Location Code2;
                ToolTipML=[ENU=Specifies the warehouse location where items from the vendor must be received by default.;
                           ENG=Specifies the warehouse location where items from the vendor must be received by default.];
                ApplicationArea=#Location;
                SourceExpr="Location Code";
                Visible=FALSE }

    { 1102601008;2;Field  ;
                ToolTipML=[ENU=Specifies the delivery conditions of the related shipment, such as free on board (FOB).;
                           ENG=Specifies the delivery conditions of the related shipment, such as free on board (FOB).];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Shipment Method Code";
                Visible=FALSE }

    { 1102601010;2;Field  ;
                ToolTipML=[ENU=Specifies a date formula for the amount of time it takes to replenish the item.;
                           ENG=Specifies a date formula for the amount of time it takes to replenish the item.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Lead Time Calculation";
                Visible=FALSE }

    { 1102601012;2;Field  ;
                ToolTipML=[ENU=Specifies a customizable calendar for delivery planning that holds the vendor's working days and holidays.;
                           ENG=Specifies a customisable calendar for delivery planning that holds the vendor's working days and holidays.];
                ApplicationArea=#Advanced;
                SourceExpr="Base Calendar Code";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total value of your completed purchases from the vendor in the current fiscal year. It is calculated from amounts excluding VAT on all completed purchase invoices and credit memos.;
                           ENG=Specifies the total value of your completed purchases from the vendor in the current fiscal year. It is calculated from amounts excluding VAT on all completed purchase invoices and credit memos.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Balance (LCY)";
                OnDrillDown=BEGIN
                              OpenVendorLedgerEntries(FALSE);
                            END;
                             }

    { 1000000001;2;Field  ;
                SourceExpr="Home Page" }

    { 1000000002;2;Field  ;
                SourceExpr="Payment Method Code" }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total value of your unpaid purchases from the vendor in the current fiscal year. It is calculated from amounts excluding VAT on all open purchase invoices and credit memos.;
                           ENG=Specifies the total value of your unpaid purchases from the vendor in the current fiscal year. It is calculated from amounts excluding VAT on all open purchase invoices and credit memos.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Balance Due (LCY)";
                OnDrillDown=BEGIN
                              OpenVendorLedgerEntries(TRUE);
                            END;
                             }

    { 1000000003;2;Field  ;
                SourceExpr="Creditor No." }

    { 1000000000;2;Field  ;
                SourceExpr=Priority }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 40  ;1   ;Part      ;
                Name=Power BI Report FactBox;
                CaptionML=[ENU=Power BI Reports;
                           ENG=Power BI Reports];
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page6306;
                Visible=PowerBIVisible;
                PartType=Page }

    { 14  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Source Type=CONST(Vendor),
                            Source No.=FIELD(No.);
                PagePartID=Page875;
                Visible=SocialListeningVisible;
                PartType=Page }

    { 15  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Source Type=CONST(Vendor),
                            Source No.=FIELD(No.);
                PagePartID=Page876;
                Visible=SocialListeningSetupVisible;
                PartType=Page;
                UpdatePropagation=Both }

    { 1901138007;1;Part   ;
                Name=VendorDetailsFactBox;
                ApplicationArea=#Advanced;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9093;
                Visible=FALSE;
                PartType=Page }

    { 1904651607;1;Part   ;
                Name=VendorStatisticsFactBox;
                ApplicationArea=#Advanced;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9094;
                PartType=Page }

    { 1903435607;1;Part   ;
                Name=VendorHistBuyFromFactBox;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9095;
                PartType=Page }

    { 1906949207;1;Part   ;
                Name=VendorHistPayToFactBox;
                ApplicationArea=#All;
                SubPageLink=No.=FIELD(No.),
                            Currency Filter=FIELD(Currency Filter),
                            Date Filter=FIELD(Date Filter),
                            Global Dimension 1 Filter=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Filter=FIELD(Global Dimension 2 Filter);
                PagePartID=Page9096;
                Visible=FALSE;
                PartType=Page }

    { 1900383207;1;Part   ;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      PowerBIUserConfiguration@1005 : Record 6304;
      SetPowerBIUserConfig@1006 : Codeunit 6305;
      ApprovalsMgmt@1004 : Codeunit 1535;
      ReadSoftOCRMasterDataSync@1009 : Codeunit 884;
      WorkflowWebhookManagement@1012 : Codeunit 1543;
      SocialListeningSetupVisible@1003 : Boolean INDATASET;
      SocialListeningVisible@1002 : Boolean INDATASET;
      OpenApprovalEntriesExist@1001 : Boolean;
      CanCancelApprovalForRecord@1000 : Boolean;
      PowerBIVisible@1007 : Boolean;
      ResyncVisible@1008 : Boolean;
      CanRequestApprovalForFlow@1010 : Boolean;
      CanCancelApprovalForFlow@1011 : Boolean;

    [External]
    PROCEDURE GetSelectionFilter@3() : Text;
    VAR
      Vend@1001 : Record 23;
      SelectionFilterManagement@1002 : Codeunit 46;
    BEGIN
      CurrPage.SETSELECTIONFILTER(Vend);
      EXIT(SelectionFilterManagement.GetSelectionFilterForVendor(Vend));
    END;

    [External]
    PROCEDURE SetSelection@1(VAR Vend@1000 : Record 23);
    BEGIN
      CurrPage.SETSELECTIONFILTER(Vend);
    END;

    LOCAL PROCEDURE SetSocialListeningFactboxVisibility@2();
    VAR
      SocialListeningMgt@1000 : Codeunit 871;
    BEGIN
      SocialListeningMgt.GetVendFactboxVisibility(Rec,SocialListeningSetupVisible,SocialListeningVisible);
    END;

    LOCAL PROCEDURE SetVendorNoVisibilityOnFactBoxes@4();
    BEGIN
      CurrPage.VendorDetailsFactBox.PAGE.SetVendorNoVisibility(FALSE);
      CurrPage.VendorHistBuyFromFactBox.PAGE.SetVendorNoVisibility(FALSE);
      CurrPage.VendorHistPayToFactBox.PAGE.SetVendorNoVisibility(FALSE);
      CurrPage.VendorStatisticsFactBox.PAGE.SetVendorNoVisibility(FALSE);
    END;

    BEGIN
    END.
  }
}

OBJECT Page 29 Vendor Ledger Entries
{
  OBJECT-PROPERTIES
  {
    Date=24/05/19;
    Time=10:13:13;
    Modified=Yes;
    Version List=NAVW111.00.00.26893,NAVGB11.00.00.26893;
  }
  PROPERTIES
  {
    Permissions=TableData 25=m;
    CaptionML=[ENU=Vendor Ledger Entries;
               ENG=Vendor Ledger Entries];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table25;
    SourceTableView=SORTING(Entry No.)
                    ORDER(Descending);
    DataCaptionFields=Vendor No.;
    PageType=List;
    OnInit=BEGIN
             AmountVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 SetConrolVisibility;

                 IF GETFILTERS <> '' THEN
                   IF FINDFIRST THEN;
               END;

    OnAfterGetRecord=BEGIN
                       StyleTxt := SetStyle;
                     END;

    OnModifyRecord=BEGIN
                     CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);
                     EXIT(FALSE);
                   END;

    OnAfterGetCurrRecord=VAR
                           IncomingDocument@1000 : Record 130;
                         BEGIN
                           HasIncomingDocument := IncomingDocument.PostedDocExists("Document No.","Posting Date");
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 53      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ENG=Ent&ry];
                      Image=Entry }
      { 72      ;2   ;Action    ;
                      CaptionML=[ENU=Applied E&ntries;
                                 ENG=Applied E&ntries];
                      ToolTipML=[ENU=View the ledger entries that have been applied to this record.;
                                 ENG=View the ledger entries that have been applied to this record.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 62;
                      RunPageOnRec=Yes;
                      Image=Approve;
                      Scope=Repeater }
      { 55      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 29      ;2   ;Action    ;
                      Name=SetDimensionFilter;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Set Dimension Filter;
                                 ENG=Set Dimension Filter];
                      ToolTipML=[ENU=Limit the entries according to the dimension filters that you specify. NOTE: If you use a high number of dimension combinations, this function may not work and can result in a message that the SQL server only supports a maximum of 2100 parameters.;
                                 ENG=Limit the entries according to the dimension filters that you specify. NOTE: If you use a high number of dimension combinations, this function may not work and can result in a message that the SQL server only supports a maximum of 2100 parameters.];
                      ApplicationArea=#Suite;
                      Image=Filter;
                      OnAction=BEGIN
                                 SETFILTER("Dimension Set ID",DimensionSetIDFilter.LookupFilter);
                               END;
                                }
      { 54      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Detailed &Ledger Entries;
                                 ENG=Detailed &Ledger Entries];
                      ToolTipML=[ENU=View a summary of the all posted entries and adjustments related to a specific vendor ledger entry;
                                 ENG=View a summary of the all posted entries and adjustments related to a specific vendor ledger entry];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 574;
                      RunPageView=SORTING(Vendor Ledger Entry No.,Posting Date);
                      RunPageLink=Vendor Ledger Entry No.=FIELD(Entry No.),
                                  Vendor No.=FIELD(Vendor No.);
                      Image=View;
                      Scope=Repeater }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 34      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 36      ;2   ;Action    ;
                      Name=ActionApplyEntries;
                      ShortCutKey=Shift+F11;
                      CaptionML=[ENU=Apply Entries;
                                 ENG=Apply Entries];
                      ToolTipML=[ENU=Select one or more ledger entries that you want to apply this record to so that the related posted documents are closed as paid or refunded.;
                                 ENG=Select one or more ledger entries that you want to apply this record to so that the related posted documents are closed as paid or refunded.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ApplyEntries;
                      Scope=Repeater;
                      OnAction=VAR
                                 VendLedgEntry@1001 : Record 25;
                                 VendEntryApplyPostEntries@1000 : Codeunit 227;
                               BEGIN
                                 VendLedgEntry.COPY(Rec);
                                 VendEntryApplyPostEntries.ApplyVendEntryFormEntry(VendLedgEntry);
                                 VendLedgEntry.GET(VendLedgEntry."Entry No.");
                                 Rec := VendLedgEntry;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 66      ;2   ;Separator  }
      { 67      ;2   ;Action    ;
                      Name=UnapplyEntries;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Unapply Entries;
                                 ENG=Unapply Entries];
                      ToolTipML=[ENU=Unselect one or more ledger entries that you want to unapply this record.;
                                 ENG=Unselect one or more ledger entries that you want to unapply this record.];
                      ApplicationArea=#Basic,#Suite;
                      Image=UnApply;
                      Scope=Repeater;
                      OnAction=VAR
                                 VendEntryApplyPostedEntries@1000 : Codeunit 227;
                               BEGIN
                                 VendEntryApplyPostedEntries.UnApplyVendLedgEntry("Entry No.");
                               END;
                                }
      { 1040000 ;2   ;Action    ;
                      CaptionML=[ENU=&Rem. Advice;
                                 ENG=&Rem. Advice];
                      ToolTipML=[ENU=View which documents have been included in the payment.;
                                 ENG=View which documents have been included in the payment.];
                      ApplicationArea=#Basic,#Suite;
                      Image=Attachments;
                      OnAction=BEGIN
                                 CurrPage.SETSELECTIONFILTER(VendLedgEntry);
                                 VendLedgEntry.COPYFILTERS(Rec);
                                 VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Payment);
                                 REPORT.RUN(REPORT::"Remittance Advice - Entries",TRUE,FALSE,VendLedgEntry);
                               END;
                                }
      { 68      ;2   ;Separator  }
      { 69      ;2   ;Action    ;
                      Name=ReverseTransaction;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Reverse Transaction;
                                 ENG=Reverse Transaction];
                      ToolTipML=[ENU=Reverse an erroneous vendor ledger entry.;
                                 ENG=Reverse an erroneous vendor ledger entry.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ReverseRegister;
                      Scope=Repeater;
                      OnAction=VAR
                                 ReversalEntry@1000 : Record 179;
                               BEGIN
                                 CLEAR(ReversalEntry);
                                 IF Reversed THEN
                                   ReversalEntry.AlreadyReversedEntry(TABLECAPTION,"Entry No.");
                                 IF "Journal Batch Name" = '' THEN
                                   ReversalEntry.TestFieldError;
                                 TESTFIELD("Transaction No.");
                                 ReversalEntry.ReverseTransaction("Transaction No.");
                               END;
                                }
      { 17      ;2   ;ActionGroup;
                      Name=IncomingDocument;
                      CaptionML=[ENU=Incoming Document;
                                 ENG=Incoming Document];
                      ActionContainerType=NewDocumentItems;
                      Image=Documents }
      { 19      ;3   ;Action    ;
                      Name=IncomingDocCard;
                      CaptionML=[ENU=View Incoming Document;
                                 ENG=View Incoming Document];
                      ToolTipML=[ENU=View any incoming document records and file attachments that exist for the entry or document.;
                                 ENG=View any incoming document records and file attachments that exist for the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=HasIncomingDocument;
                      Image=ViewOrder;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.ShowCard("Document No.","Posting Date");
                               END;
                                }
      { 11      ;3   ;Action    ;
                      Name=SelectIncomingDoc;
                      AccessByPermission=TableData 130=R;
                      CaptionML=[ENU=Select Incoming Document;
                                 ENG=Select Incoming Document];
                      ToolTipML=[ENU=Select an incoming document record and file attachment that you want to link to the entry or document.;
                                 ENG=Select an incoming document record and file attachment that you want to link to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT HasIncomingDocument;
                      Image=SelectLineToApply;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.SelectIncomingDocumentForPostedDocument("Document No.","Posting Date",RECORDID);
                               END;
                                }
      { 15      ;3   ;Action    ;
                      Name=IncomingDocAttachFile;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Create Incoming Document from File;
                                 ENG=Create Incoming Document from File];
                      ToolTipML=[ENU=Create an incoming document record by selecting a file to attach, and then link the incoming document record to the entry or document.;
                                 ENG=Create an incoming document record by selecting a file to attach, and then link the incoming document record to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT HasIncomingDocument;
                      Image=Attach;
                      OnAction=VAR
                                 IncomingDocumentAttachment@1000 : Record 133;
                               BEGIN
                                 IncomingDocumentAttachment.NewAttachmentFromPostedDocument("Document No.","Posting Date");
                               END;
                                }
      { 37      ;1   ;Action    ;
                      CaptionML=[ENU=&Navigate;
                                 ENG=&Navigate];
                      ToolTipML=[ENU=Find all entries and documents that exist for the document number and posting date on the selected entry or document.;
                                 ENG=Find all entries and documents that exist for the document number and posting date on the selected entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Navigate;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
      { 13      ;1   ;Action    ;
                      ShortCutKey=Return;
                      CaptionML=[ENU=Show Posted Document;
                                 ENG=Show Posted Document];
                      ToolTipML=[ENU=Show details for the posted payment, invoice, or credit memo.;
                                 ENG=Show details for the posted payment, invoice, or credit memo.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowDoc
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor entry's posting date.;
                           ENG=Specifies the vendor entry's posting date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date";
                Editable=FALSE }

    { 1000000000;2;Field  ;
                SourceExpr="Document Date" }

    { 1040001;2;Field     ;
                ToolTipML=[ENU=Specifies the date when the document was received.;
                           ENG=Specifies the date when the document was received.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Invoice Receipt Date";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the document type that the vendor entry belongs to.;
                           ENG=Specifies the document type that the vendor entry belongs to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor entry's document number.;
                           ENG=Specifies the vendor entry's document number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No.";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 51  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a document number that refers to the customer's or vendor's numbering system.;
                           ENG=Specifies a document number that refers to the customer's or vendor's numbering system.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="External Document No.";
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the vendor account that the entry is linked to.;
                           ENG=Specifies the number of the vendor account that the entry is linked to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Vendor No.";
                Editable=FALSE }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the message exported to the payment file when you use the Export Payments to File function in the Payment Journal window.;
                           ENG=Specifies the message exported to the payment file when you use the Export Payments to File function in the Payment Journal window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Message to Recipient" }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the vendor entry.;
                           ENG=Specifies a description of the vendor entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Editable=FALSE }

    { 39  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 1 Code";
                Visible=FALSE;
                Editable=FALSE }

    { 41  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 2 Code";
                Visible=FALSE;
                Editable=FALSE }

    { 70  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the intercompany partner that the transaction is related to if the entry was created from an intercompany transaction.;
                           ENG=Specifies the code of the intercompany partner that the transaction is related to if the entry was created from an intercompany transaction.];
                ApplicationArea=#Intercompany;
                SourceExpr="IC Partner Code";
                Visible=FALSE;
                Editable=FALSE }

    { 43  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies which purchaser is assigned to the vendor.;
                           ENG=Specifies which purchaser is assigned to the vendor.];
                ApplicationArea=#Advanced;
                SourceExpr="Purchaser Code";
                Visible=FALSE;
                Editable=FALSE }

    { 45  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code for the amount on the line.;
                           ENG=Specifies the currency code for the amount on the line.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                Editable=FALSE }

    { 100 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how to make payment, such as with bank transfer, cash,  or check.;
                           ENG=Specifies how to make payment, such as with bank transfer, cash, or cheque.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Method Code" }

    { 110 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment of the purchase invoice.;
                           ENG=Specifies the payment of the purchase invoice.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Reference" }

    { 115 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor who sent the purchase invoice.;
                           ENG=Specifies the vendor who sent the purchase invoice.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Creditor No." }

    { 58  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the original entry.;
                           ENG=Specifies the amount of the original entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Original Amount";
                Editable=FALSE }

    { 56  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that the entry originally consisted of, in LCY.;
                           ENG=Specifies the amount that the entry originally consisted of, in LCY.];
                ApplicationArea=#Advanced;
                SourceExpr="Original Amt. (LCY)";
                Visible=FALSE;
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the entry.;
                           ENG=Specifies the amount of the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Visible=AmountVisible;
                Editable=FALSE }

    { 47  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the entry in LCY.;
                           ENG=Specifies the amount of the entry in LCY.];
                ApplicationArea=#Advanced;
                SourceExpr="Amount (LCY)";
                Visible=AmountVisible;
                Editable=FALSE }

    { 7   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits.;
                           ENG=Specifies the total of the ledger entries that represent debits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=DebitCreditVisible }

    { 21  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits, expressed in LCY.;
                           ENG=Specifies the total of the ledger entries that represent debits, expressed in LCY.];
                ApplicationArea=#Advanced;
                SourceExpr="Debit Amount (LCY)";
                Visible=DebitCreditVisible }

    { 9   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits.;
                           ENG=Specifies the total of the ledger entries that represent credits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=DebitCreditVisible }

    { 23  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits, expressed in LCY.;
                           ENG=Specifies the total of the ledger entries that represent credits, expressed in LCY.];
                ApplicationArea=#Advanced;
                SourceExpr="Credit Amount (LCY)";
                Visible=DebitCreditVisible }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that remains to be applied to before the entry is totally applied to.;
                           ENG=Specifies the amount that remains to be applied to before the entry is totally applied to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Amount";
                Editable=FALSE }

    { 49  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that remains to be applied to before the entry is totally applied to.;
                           ENG=Specifies the amount that remains to be applied to before the entry is totally applied to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Amt. (LCY)";
                Editable=FALSE }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of account that a balancing entry is posted to, such as BANK for a cash account.;
                           ENG=Specifies the type of account that a balancing entry is posted to, such as BANK for a cash account.];
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Account Type";
                Visible=FALSE;
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the general ledger, customer, vendor, or bank account that the balancing entry is posted to, such as a cash account for cash purchases.;
                           ENG=Specifies the number of the general ledger, customer, vendor, or bank account that the balancing entry is posted to, such as a cash account for cash purchases.];
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Account No.";
                Visible=FALSE;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the due date on the entry.;
                           ENG=Specifies the due date on the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Due Date";
                StyleExpr=StyleTxt }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.;
                           ENG=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pmt. Discount Date" }

    { 62  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the latest date the amount in the entry must be paid in order for payment discount tolerance to be granted.;
                           ENG=Specifies the latest date the amount in the entry must be paid in order for payment discount tolerance to be granted.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pmt. Disc. Tolerance Date" }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the discount that you can obtain if the entry is applied to before the payment discount date.;
                           ENG=Specifies the discount that you can obtain if the entry is applied to before the payment discount date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Original Pmt. Disc. Possible" }

    { 60  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the remaining payment discount which can be received if the payment is made before the payment discount date.;
                           ENG=Specifies the remaining payment discount which can be received if the payment is made before the payment discount date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Pmt. Disc. Possible" }

    { 64  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the maximum tolerated amount the entry can differ from the amount on the invoice or credit memo.;
                           ENG=Specifies the maximum tolerated amount the entry can differ from the amount on the invoice or credit memo.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Max. Payment Tolerance" }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the amount on the entry has been fully paid or there is still a remaining amount that must be applied to.;
                           ENG=Specifies whether the amount on the entry has been fully paid or there is still a remaining amount that must be applied to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Open;
                Editable=FALSE }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that the related entry represents an unpaid invoice for which either a payment suggestion, a reminder, or a finance charge memo exists.;
                           ENG=Specifies that the related entry represents an unpaid invoice for which either a payment suggestion, a reminder, or a finance charge memo exists.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="On Hold" }

    { 77  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.;
                           ENG=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.];
                ApplicationArea=#Advanced;
                SourceExpr="User ID";
                Visible=FALSE;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the source code that specifies where the entry was created.;
                           ENG=Specifies the source code that specifies where the entry was created.];
                ApplicationArea=#Advanced;
                SourceExpr="Source Code";
                Visible=FALSE;
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the reason code, a supplementary source code that enables you to trace the entry.;
                           ENG=Specifies the reason code, a supplementary source code that enables you to trace the entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Reason Code";
                Visible=FALSE;
                Editable=FALSE }

    { 35  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the entry has been part of a reverse transaction.;
                           ENG=Specifies if the entry has been part of a reverse transaction.];
                ApplicationArea=#Advanced;
                SourceExpr=Reversed;
                Visible=FALSE;
                Editable=FALSE }

    { 74  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the correcting entry that replaced the original entry in the reverse transaction.;
                           ENG=Specifies the number of the correcting entry that replaced the original entry in the reverse transaction.];
                ApplicationArea=#Advanced;
                SourceExpr="Reversed by Entry No.";
                Visible=FALSE;
                Editable=FALSE }

    { 76  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the original entry that was undone by the reverse transaction.;
                           ENG=Specifies the number of the original entry that was undone by the reverse transaction.];
                ApplicationArea=#Advanced;
                SourceExpr="Reversed Entry No.";
                Visible=FALSE;
                Editable=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the entry, as assigned from the specified number series when the entry was created.;
                           ENG=Specifies the number of the entry, as assigned from the specified number series when the entry was created.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No.";
                Editable=FALSE }

    { 290 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that the entry was created as a result of exporting a payment journal line.;
                           ENG=Specifies that the entry was created as a result of exporting a payment journal line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Exported to Payment File";
                Editable=TRUE }

    { 25  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a reference to a combination of dimension values. The actual values are stored in the Dimension Set Entry table.;
                           ENG=Specifies a reference to a combination of dimension values. The actual values are stored in the Dimension Set Entry table.];
                ApplicationArea=#Suite;
                SourceExpr="Dimension Set ID";
                Visible=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 3   ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page193;
                PartType=Page;
                ShowFilter=No }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      VendLedgEntry@1040001 : Record 25;
      Navigate@1000 : Page 344;
      DimensionSetIDFilter@1003 : Page 481;
      StyleTxt@1001 : Text;
      HasIncomingDocument@1002 : Boolean;
      AmountVisible@1005 : Boolean;
      DebitCreditVisible@1004 : Boolean;

    LOCAL PROCEDURE SetConrolVisibility@8();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      AmountVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Debit/Credit Only");
      DebitCreditVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Amount Only");
    END;

    BEGIN
    END.
  }
}

OBJECT Page 51 Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=08/11/19;
    Time=16:24:20;
    Modified=Yes;
    Version List=NAVW111.00.00.26893,NAVGB11.00.00.26893;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Purchase Invoice;
               ENG=Purchase Invoice];
    SourceTable=Table38;
    SourceTableView=WHERE(Document Type=FILTER(Invoice));
    PageType=Document;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Approve,Invoice,Posting,View,Request Approval,Incoming Document;
                                ENG=New,Process,Report,Approve,Invoice,Posting,View,Request Approval,Incoming Document];
    OnInit=VAR
             PurchasesPayablesSetup@1001 : Record 312;
           BEGIN
             JobQueuesUsed := PurchasesPayablesSetup.JobQueueActive;
             SetExtDocNoMandatoryCondition;
             ShowShippingOptionsWithLocation := DummyApplicationAreaSetup.IsLocationEnabled OR DummyApplicationAreaSetup.IsAllDisabled;
           END;

    OnOpenPage=VAR
                 OfficeMgt@1000 : Codeunit 1630;
                 PermissionManager@1001 : Codeunit 9002;
               BEGIN
                 SetDocNoVisible;
                 IsOfficeAddin := OfficeMgt.IsAvailable;
                 CreateIncomingDocFromEmailAttachment := OfficeMgt.OCRAvailable;
                 CreateIncomingDocumentVisible := NOT OfficeMgt.IsOutlookMobileApp;
                 IsSaaS := PermissionManager.SoftwareAsAService;

                 IF UserMgt.GetPurchasesFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetPurchasesFilter);
                   FILTERGROUP(0);
                 END;
                 IF ("No." <> '') AND ("Buy-from Vendor No." = '') THEN
                   DocumentIsPosted := (NOT GET("Document Type","No."));
               END;

    OnAfterGetRecord=BEGIN
                       CalculateCurrentShippingAndPayToOption;
                     END;

    OnNewRecord=BEGIN
                  "Responsibility Center" := UserMgt.GetPurchasesFilter;

                  IF (NOT DocNoVisible) AND ("No." = '') THEN
                    SetBuyFromVendorFromFilter;

                  CalculateCurrentShippingAndPayToOption;
                END;

    OnDeleteRecord=BEGIN
                     CurrPage.SAVERECORD;
                     EXIT(ConfirmDeletion);
                   END;

    OnQueryClosePage=BEGIN
                       IF NOT DocumentIsPosted THEN
                         EXIT(ConfirmCloseUnposted);
                     END;

    OnAfterGetCurrRecord=BEGIN
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);
                           CurrPage.ApprovalFactBox.PAGE.UpdateApprovalEntriesFromSourceRecord(RECORDID);
                           ShowWorkflowStatus := CurrPage.WorkflowStatus.PAGE.SetFilterOnWorkflowRecord(RECORDID);
                           SetControlAppearance;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;  ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 55      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Invoice;
                                 ENG=&Invoice];
                      Image=Invoice }
      { 57      ;2   ;Action    ;
                      Name=Statistics;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 ENG=Statistics];
                      ToolTipML=[ENU=View statistical information, such as the value of posted entries, for the record.;
                                 ENG=View statistical information, such as the value of posted entries, for the record.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 CalcInvDiscForHeader;
                                 COMMIT;
                                 PAGE.RUNMODAL(PAGE::"Purchase Statistics",Rec);
                                 PurchCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
                               END;
                                }
      { 58      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Vendor;
                                 ENG=Vendor];
                      ToolTipML=[ENU=View or edit detailed information about the vendor on the purchase document.;
                                 ENG=View or edit detailed information about the vendor on the purchase document.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 26;
                      RunPageLink=No.=FIELD(Buy-from Vendor No.);
                      Promoted=Yes;
                      Enabled="Buy-from Vendor No." <> '';
                      PromotedIsBig=Yes;
                      Image=Vendor;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes }
      { 59      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ENG=Co&mments];
                      ToolTipML=[ENU=View or add comments for the record.;
                                 ENG=View or add comments for the record.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 66;
                      RunPageLink=Document Type=FIELD(Document Type),
                                  No.=FIELD(No.),
                                  Document Line No.=CONST(0);
                      Image=ViewComments }
      { 113     ;2   ;Action    ;
                      Name=Dimensions;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Enabled="No." <> '';
                      PromotedIsBig=Yes;
                      Image=Dimensions;
                      PromotedCategory=Category5;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 ShowDocDim;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 41      ;1   ;ActionGroup;
                      Name=IncomingDocument;
                      CaptionML=[ENU=Incoming Document;
                                 ENG=Incoming Document];
                      Visible=FALSE }
      { 39      ;2   ;Action    ;
                      Name=IncomingDocCard;
                      CaptionML=[ENU=View;
                                 ENG=View];
                      ToolTipML=[ENU=View any incoming document records and file attachments that exist for the entry or document.;
                                 ENG=View any incoming document records and file attachments that exist for the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=HasIncomingDocument;
                      PromotedIsBig=Yes;
                      Image=ViewOrder;
                      PromotedCategory=Category9;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IncomingDocument.ShowCardFromEntryNo("Incoming Document Entry No.");
                               END;
                                }
      { 37      ;2   ;Action    ;
                      Name=SelectIncomingDoc;
                      AccessByPermission=TableData 130=R;
                      CaptionML=[ENU=Select;
                                 ENG=Select];
                      ToolTipML=[ENU=Select an incoming document record and file attachment that you want to link to the entry or document.;
                                 ENG=Select an incoming document record and file attachment that you want to link to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SelectLineToApply;
                      PromotedCategory=Category9;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 VALIDATE("Incoming Document Entry No.",IncomingDocument.SelectIncomingDocument("Incoming Document Entry No.",RECORDID));
                               END;
                                }
      { 35      ;2   ;Action    ;
                      Name=IncomingDocAttachFile;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Create from File;
                                 ENG=Create from File];
                      ToolTipML=[ENU=Create an incoming document record by selecting a file to attach, and then link the incoming document record to the entry or document.;
                                 ENG=Create an incoming document record by selecting a file to attach, and then link the incoming document record to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=CreateIncomingDocumentVisible;
                      Enabled=CreateIncomingDocumentEnabled;
                      PromotedIsBig=Yes;
                      Image=Attach;
                      PromotedCategory=Category9;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 IncomingDocumentAttachment@1000 : Record 133;
                               BEGIN
                                 IncomingDocumentAttachment.NewAttachmentFromPurchaseDocument(Rec);
                               END;
                                }
      { 16      ;2   ;Action    ;
                      Name=IncomingDocEmailAttachment;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Create from Attachment;
                                 ENG=Create from Attachment];
                      ToolTipML=[ENU=Create an incoming document record by selecting an attachment from outlook email, and then link the incoming document record to the entry or document.;
                                 ENG=Create an incoming document record by selecting an attachment from outlook email, and then link the incoming document record to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=CreateIncomingDocFromEmailAttachment;
                      Enabled=IncomingDocEmailAttachmentEnabled;
                      PromotedIsBig=Yes;
                      Image=SendElectronicDocument;
                      PromotedCategory=Category9;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 OfficeMgt@1001 : Codeunit 1630;
                               BEGIN
                                 IF NOT INSERT(TRUE) THEN
                                   MODIFY(TRUE);
                                 OfficeMgt.InitiateSendToIncomingDocumentsWithPurchaseHeaderLink(Rec,"Buy-from Vendor No.");
                               END;
                                }
      { 29      ;2   ;Action    ;
                      Name=RemoveIncomingDoc;
                      CaptionML=[ENU=Remove;
                                 ENG=Remove];
                      ToolTipML=[ENU=Remove an external document that has been recorded, manually or automatically, and attached as a file to a document or ledger entry.;
                                 ENG=Remove an external document that has been recorded, manually or automatically, and attached as a file to a document or ledger entry.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=HasIncomingDocument;
                      PromotedIsBig=Yes;
                      Image=RemoveLine;
                      PromotedCategory=Category9;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 IF IncomingDocument.GET("Incoming Document Entry No.") THEN
                                   IncomingDocument.RemoveLinkToRelatedRecord;
                                 "Incoming Document Entry No." := 0;
                                 MODIFY(TRUE);
                               END;
                                }
      { 25      ;1   ;ActionGroup;
                      CaptionML=[ENU=Approval;
                                 ENG=Approval] }
      { 23      ;2   ;Action    ;
                      Name=Approve;
                      CaptionML=[ENU=Approve;
                                 ENG=Approve];
                      ToolTipML=[ENU=Approve the requested changes.;
                                 ENG=Approve the requested changes.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.ApproveRecordApprovalRequest(RECORDID)
                               END;
                                }
      { 21      ;2   ;Action    ;
                      Name=Reject;
                      CaptionML=[ENU=Reject;
                                 ENG=Reject];
                      ToolTipML=[ENU=Reject the approval request.;
                                 ENG=Reject the approval request.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Reject;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.RejectRecordApprovalRequest(RECORDID)
                               END;
                                }
      { 19      ;2   ;Action    ;
                      Name=Delegate;
                      CaptionML=[ENU=Delegate;
                                 ENG=Delegate];
                      ToolTipML=[ENU=Delegate the approval to a substitute approver.;
                                 ENG=Delegate the approval to a substitute approver.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=Delegate;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.DelegateRecordApprovalRequest(RECORDID)
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=Comment;
                      CaptionML=[ENU=Comments;
                                 ENG=Comments];
                      ToolTipML=[ENU=View or add comments for the record.;
                                 ENG=View or add comments for the record.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=ViewComments;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.GetApprovalComment(Rec);
                               END;
                                }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=Release;
                                 ENG=Release];
                      Image=Release }
      { 120     ;2   ;Action    ;
                      ShortCutKey=Ctrl+F9;
                      CaptionML=[ENU=Re&lease;
                                 ENG=Re&lease];
                      ToolTipML=[ENU=Release the document to the next stage of processing. When a document is released, it will be included in all availability calculations from the expected receipt date of the items. You must reopen the document before you can make changes to it.;
                                 ENG=Release the document to the next stage of processing. When a document is released, it will be included in all availability calculations from the expected receipt date of the items. You must reopen the document before you can make changes to it.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Image=ReleaseDoc;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReleasePurchDoc@1000 : Codeunit 415;
                               BEGIN
                                 ReleasePurchDoc.PerformManualRelease(Rec);
                               END;
                                }
      { 121     ;2   ;Action    ;
                      Name=Reopen;
                      CaptionML=[ENU=Re&open;
                                 ENG=Re&open];
                      ToolTipML=[ENU=Reopen the document to change it after it has been approved. Approved documents have the Released status and must be opened before they can be changed.;
                                 ENG=Reopen the document to change it after it has been approved. Approved documents have the Released status and must be opened before they can be changed.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Enabled=Status <> Status::Open;
                      PromotedIsBig=Yes;
                      Image=ReOpen;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ReleasePurchDoc@1001 : Codeunit 415;
                               BEGIN
                                 ReleasePurchDoc.PerformManualReopen(Rec);
                               END;
                                }
      { 60      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 4       ;2   ;Action    ;
                      Name=GetRecurringPurchaseLines;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Get Recurring Purchase Lines;
                                 ENG=Get Recurring Purchase Lines];
                      ToolTipML=[ENU=Insert purchase document lines that you have set up for the vendor as recurring. Recurring purchase lines could be for a monthly replenishment order or a fixed freight expense.;
                                 ENG=Insert purchase document lines that you have set up for the vendor as recurring. Recurring purchase lines could be for a monthly replenishment order or a fixed freight expense.];
                      ApplicationArea=#Suite;
                      PromotedIsBig=Yes;
                      Image=VendorCode;
                      OnAction=VAR
                                 StdVendPurchCode@1000 : Record 175;
                               BEGIN
                                 StdVendPurchCode.InsertPurchLines(Rec);
                               END;
                                }
      { 63      ;2   ;Action    ;
                      Name=CopyDocument;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Copy Document;
                                 ENG=Copy Document];
                      ToolTipML=[ENU=Copy document lines and header information from another purchase document to this document. You can copy a posted purchase invoice into a new purchase invoice to quickly create a similar document.;
                                 ENG=Copy document lines and header information from another purchase document to this document. You can copy a posted purchase invoice into a new purchase invoice to quickly create a similar document.];
                      ApplicationArea=#Suite;
                      PromotedIsBig=Yes;
                      Image=CopyDocument;
                      OnAction=BEGIN
                                 CopyPurchDoc.SetPurchHeader(Rec);
                                 CopyPurchDoc.RUNMODAL;
                                 CLEAR(CopyPurchDoc);
                                 IF GET("Document Type","No.") THEN;
                               END;
                                }
      { 61      ;2   ;Action    ;
                      Name=CalculateInvoiceDiscount;
                      AccessByPermission=TableData 24=R;
                      CaptionML=[ENU=Calculate &Invoice Discount;
                                 ENG=Calculate &Invoice Discount];
                      ToolTipML=[ENU=Calculate the invoice discount for the entire purchase invoice.;
                                 ENG=Calculate the invoice discount for the entire purchase invoice.];
                      ApplicationArea=#Basic,#Suite;
                      Image=CalculateInvoiceDiscount;
                      OnAction=BEGIN
                                 ApproveCalcInvDisc;
                                 PurchCalcDiscByType.ResetRecalculateInvoiceDisc(Rec);
                               END;
                                }
      { 136     ;2   ;Separator  }
      { 137     ;2   ;Separator  }
      { 112     ;2   ;Action    ;
                      Name=MoveNegativeLines;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Move Negative Lines;
                                 ENG=Move Negative Lines];
                      ToolTipML=[ENU=Prepare to create a replacement sales order in a sales return process.;
                                 ENG=Prepare to create a replacement sales order in a sales return process.];
                      ApplicationArea=#Advanced;
                      Image=MoveNegativeLines;
                      OnAction=BEGIN
                                 CLEAR(MoveNegPurchLines);
                                 MoveNegPurchLines.SetPurchHeader(Rec);
                                 MoveNegPurchLines.RUNMODAL;
                                 MoveNegPurchLines.ShowDocument;
                               END;
                                }
      { 47      ;1   ;ActionGroup;
                      CaptionML=[ENU=Request Approval;
                                 ENG=Request Approval] }
      { 45      ;2   ;Action    ;
                      Name=Approvals;
                      AccessByPermission=TableData 454=R;
                      CaptionML=[ENU=Approvals;
                                 ENG=Approvals];
                      ToolTipML=[ENU=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.;
                                 ENG=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Approvals;
                      PromotedCategory=Category8;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 WorkflowsEntriesBuffer@1001 : Record 832;
                               BEGIN
                                 WorkflowsEntriesBuffer.RunWorkflowEntriesPage(RECORDID,DATABASE::"Purchase Header","Document Type","No.");
                               END;
                                }
      { 142     ;2   ;Action    ;
                      Name=SendApprovalRequest;
                      CaptionML=[ENU=Send A&pproval Request;
                                 ENG=Send A&pproval Request];
                      ToolTipML=[ENU=Request approval of the document.;
                                 ENG=Request approval of the document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=NOT OpenApprovalEntriesExist AND CanRequestApprovalForFlow;
                      PromotedIsBig=Yes;
                      Image=SendApprovalRequest;
                      PromotedCategory=Category8;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 IF ApprovalsMgmt.CheckPurchaseApprovalPossible(Rec) THEN
                                   ApprovalsMgmt.OnSendPurchaseDocForApproval(Rec);
                               END;
                                }
      { 143     ;2   ;Action    ;
                      Name=CancelApprovalRequest;
                      CaptionML=[ENU=Cancel Approval Re&quest;
                                 ENG=Cancel Approval Re&quest];
                      ToolTipML=[ENU=Cancel the approval request.;
                                 ENG=Cancel the approval request.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Enabled=CanCancelApprovalForRecord OR CanCancelApprovalForFlow;
                      PromotedIsBig=Yes;
                      Image=CancelApprovalRequest;
                      PromotedCategory=Category8;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                                 WorkflowWebhookMgt@1001 : Codeunit 1543;
                               BEGIN
                                 ApprovalsMgmt.OnCancelPurchaseApprovalRequest(Rec);
                                 WorkflowWebhookMgt.FindAndCancel(RECORDID);
                               END;
                                }
      { 62      ;1   ;ActionGroup;
                      CaptionML=[ENU=Flow;
                                 ENG=Flow];
                      Image=Flow }
      { 71      ;2   ;Action    ;
                      Name=CreateFlow;
                      CaptionML=[ENU=Create a Flow;
                                 ENG=Create a Flow];
                      ToolTipML=[ENU=Create a new Flow from a list of relevant Flow templates.;
                                 ENG=Create a new Flow from a list of relevant Flow templates.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=IsSaaS;
                      Image=Flow;
                      PromotedCategory=Category8;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 FlowServiceManagement@1000 : Codeunit 6400;
                                 FlowTemplateSelector@1001 : Page 6400;
                               BEGIN
                                 // Opens page 6400 where the user can use filtered templates to create new flows.
                                 FlowTemplateSelector.SetSearchText(FlowServiceManagement.GetPurchasingTemplateFilter);
                                 FlowTemplateSelector.RUN;
                               END;
                                }
      { 73      ;2   ;Action    ;
                      Name=SeeFlows;
                      CaptionML=[ENU=See my Flows;
                                 ENG=See my Flows];
                      ToolTipML=[ENU=View and configure Flows that you created.;
                                 ENG=View and configure Flows that you created.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 6401;
                      Promoted=Yes;
                      Image=Flow;
                      PromotedCategory=Category8;
                      PromotedOnly=Yes }
      { 66      ;1   ;ActionGroup;
                      CaptionML=[ENU=P&osting;
                                 ENG=P&osting];
                      Image=Post }
      { 68      ;2   ;Action    ;
                      Name=Post;
                      ShortCutKey=F9;
                      CaptionML=[ENU=P&ost;
                                 ENG=P&ost];
                      ToolTipML=[ENU=Finalize the document or journal by posting the amounts and quantities to the related accounts in your company books.;
                                 ENG=Finalise the document or journal by posting the amounts and quantities to the related accounts in your company books.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostOrder;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 VerifyTotal;
                                 Post(CODEUNIT::"Purch.-Post (Yes/No)");
                               END;
                                }
      { 33      ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=[ENU=Preview Posting;
                                 ENG=Preview Posting];
                      ToolTipML=[ENU=Review the different types of entries that will be created when you post the document or journal.;
                                 ENG=Review the different types of entries that will be created when you post the document or journal.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ViewPostedOrder;
                      OnAction=VAR
                                 PurchPostYesNo@1000 : Codeunit 91;
                               BEGIN
                                 PurchPostYesNo.Preview(Rec);
                               END;
                                }
      { 67      ;2   ;Action    ;
                      Name=TestReport;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Test Report;
                                 ENG=Test Report];
                      ToolTipML=[ENU=View a test report so that you can find and correct any errors before you perform the actual posting of the journal or document.;
                                 ENG=View a test report so that you can find and correct any errors before you perform the actual posting of the journal or document.];
                      ApplicationArea=#Advanced;
                      Image=TestReport;
                      OnAction=BEGIN
                                 ReportPrint.PrintPurchHeader(Rec);
                               END;
                                }
      { 69      ;2   ;Action    ;
                      Name=PostAndPrint;
                      ShortCutKey=Shift+F9;
                      CaptionML=[ENU=Post and &Print;
                                 ENG=Post and &Print];
                      ToolTipML=[ENU=Finalize and prepare to print the document or journal. The values and quantities are posted to the related accounts. A report request window where you can specify what to include on the print-out.;
                                 ENG=Finalise and prepare to print the document or journal. The values and quantities are posted to the related accounts. A report request window where you can specify what to include on the print-out.];
                      ApplicationArea=#Advanced;
                      Promoted=Yes;
                      Visible=NOT IsOfficeAddin;
                      PromotedIsBig=Yes;
                      Image=PostPrint;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 VerifyTotal;
                                 Post(CODEUNIT::"Purch.-Post + Print");
                               END;
                                }
      { 70      ;2   ;Action    ;
                      Name=PostBatch;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Post &Batch;
                                 ENG=Post &Batch];
                      ToolTipML=[ENU=Post several documents at once. A report request window opens where you can specify which documents to post.;
                                 ENG=Post several documents at once. A report request window opens where you can specify which documents to post.];
                      ApplicationArea=#Advanced;
                      Image=PostBatch;
                      OnAction=BEGIN
                                 VerifyTotal;
                                 REPORT.RUNMODAL(REPORT::"Batch Post Purchase Invoices",TRUE,TRUE,Rec);
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 7       ;2   ;Action    ;
                      Name=RemoveFromJobQueue;
                      CaptionML=[ENU=Remove From Job Queue;
                                 ENG=Remove From Job Queue];
                      ToolTipML=[ENU=Remove the scheduled processing of this record from the job queue.;
                                 ENG=Remove the scheduled processing of this record from the job queue.];
                      ApplicationArea=#All;
                      Visible="Job Queue Status" = "Job Queue Status"::"Scheduled For Posting";
                      Image=RemoveLine;
                      OnAction=BEGIN
                                 CancelBackgroundPosting;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the involved entry or record, according to the specified number series.;
                           ENG=Specifies the number of the involved entry or record, according to the specified number series.];
                ApplicationArea=#All;
                SourceExpr="No.";
                Importance=Additional;
                Visible=DocNoVisible;
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 64  ;2   ;Field     ;
                CaptionML=[ENU=Vendor No.;
                           ENG=Vendor No.];
                ToolTipML=[ENU=Specifies the number of the vendor who delivers the products.;
                           ENG=Specifies the number of the vendor who delivers the products.];
                ApplicationArea=#All;
                NotBlank=Yes;
                SourceExpr="Buy-from Vendor No.";
                Importance=Additional;
                OnValidate=BEGIN
                             OnAfterValidateBuyFromVendorNo(Rec,xRec);
                             CurrPage.UPDATE;
                           END;
                            }

    { 6   ;2   ;Field     ;
                CaptionML=[ENU=Vendor Name;
                           ENG=Vendor Name];
                ToolTipML=[ENU=Specifies the name of the vendor who delivers the products.;
                           ENG=Specifies the name of the vendor who delivers the products.];
                ApplicationArea=#All;
                NotBlank=Yes;
                SourceExpr="Buy-from Vendor Name";
                Importance=Promoted;
                OnValidate=VAR
                             ApplicationAreaSetup@1000 : Record 9178;
                           BEGIN
                             OnAfterValidateBuyFromVendorNo(Rec,xRec);

                             IF ApplicationAreaSetup.IsFoundationEnabled THEN
                               PurchCalcDiscByType.ApplyDefaultInvoiceDiscount(0,Rec);

                             CurrPage.UPDATE;
                           END;

                ShowMandatory=TRUE }

    { 51  ;2   ;Group     ;
                CaptionML=[ENU=Buy-from;
                           ENG=Buy-from];
                GroupType=Group }

    { 72  ;3   ;Field     ;
                CaptionML=[ENU=Address;
                           ENG=Address];
                ToolTipML=[ENU=Specifies the address of the vendor who ships the items.;
                           ENG=Specifies the address of the vendor who ships the items.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Buy-from Address";
                Importance=Additional }

    { 74  ;3   ;Field     ;
                CaptionML=[ENU=Address 2;
                           ENG=Address 2];
                ToolTipML=[ENU=Specifies additional address information.;
                           ENG=Specifies additional address information.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Buy-from Address 2";
                Importance=Additional }

    { 1040000;3;Field     ;
                CaptionML=[ENU=City;
                           ENG=City];
                ToolTipML=[ENU=Specifies the city of the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the city of the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Buy-from City" }

    { 1040002;3;Field     ;
                CaptionML=[ENU=County;
                           ENG=County];
                ToolTipML=[ENU=Specifies the county of the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the county of the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Buy-from County" }

    { 77  ;3   ;Field     ;
                CaptionML=[ENU=Post Code;
                           ENG=Postcode];
                ToolTipML=[ENU=Specifies the postal code.;
                           ENG=Specifies the postcode.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Buy-from Post Code";
                Importance=Additional }

    { 128 ;3   ;Field     ;
                CaptionML=[ENU=Contact No.;
                           ENG=Contact No.];
                ToolTipML=[ENU=Specifies the number of your contact at the vendor.;
                           ENG=Specifies the number of your contact at the vendor.];
                ApplicationArea=#Advanced;
                SourceExpr="Buy-from Contact No.";
                Importance=Additional }

    { 8   ;2   ;Field     ;
                CaptionML=[ENU=Contact;
                           ENG=Contact];
                ToolTipML=[ENU=Specifies the name of the person to contact about shipment of the item from this vendor.;
                           ENG=Specifies the name of the person to contact about shipment of the item from this vendor.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Buy-from Contact";
                Editable="Buy-from Vendor No." <> '' }

    { 43  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when the related document was created.;
                           ENG=Specifies the date when the related document was created.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Date";
                Importance=Additional }

    { 1040001;2;Field     ;
                ToolTipML=[ENU=Specifies the date when the document was received.;
                           ENG=Specifies the date when the document was received.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Invoice Receipt Date";
                Importance=Additional }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when the posting of the purchase document will be recorded.;
                           ENG=Specifies the date when the posting of the purchase document will be recorded.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date";
                Importance=Promoted;
                OnValidate=BEGIN
                             SaveInvoiceDiscountAmount;
                           END;
                            }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies when the invoice is due. The program calculates the date using the Payment Terms Code and Document Date fields.;
                           ENG=Specifies when the invoice is due. The program calculates the date using the Payment Terms Code and Document Date fields.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Due Date";
                Importance=Promoted }

    { 11  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the incoming document that this purchase document is created for.;
                           ENG=Specifies the number of the incoming document that this purchase document is created for.];
                ApplicationArea=#Advanced;
                SourceExpr="Incoming Document Entry No.";
                Importance=Additional;
                Visible=FALSE }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the document number of the original document you received from the vendor. You can require the document number for posting, or let it be optional. By default, it's required, so that this document references the original. Making document numbers optional removes a step from the posting process. For example, if you attach the original invoice as a PDF, you might not need to enter the document number. To specify whether document numbers are required, in the Purchases & Payables Setup window, select or clear the Ext. Doc. No. Mandatory field.;
                           ENG=Specifies the document number of the original document you received from the vendor. You can require the document number for posting, or let it be optional. By default, it's required, so that this document references the original. Making document numbers optional removes a step from the posting process. For example, if you attach the original invoice as a PDF, you might not need to enter the document number. To specify whether document numbers are required, in the Purchases & Payables Setup window, select or clear the Ext. Doc. No. Mandatory field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Vendor Invoice No.";
                ShowMandatory=VendorInvoiceNoMandatory }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies which purchaser is assigned to the vendor.;
                           ENG=Specifies which purchaser is assigned to the vendor.];
                ApplicationArea=#Suite;
                SourceExpr="Purchaser Code";
                Importance=Additional;
                OnValidate=BEGIN
                             PurchaserCodeOnAfterValidate;
                           END;
                            }

    { 1102601000;2;Field  ;
                ToolTipML=[ENU=Specifies the campaign number the document is linked to.;
                           ENG=Specifies the campaign number the document is linked to.];
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Campaign No.";
                Importance=Additional }

    { 84  ;2   ;Field     ;
                CaptionML=[ENU=Alternate Vendor Address Code;
                           ENG=Alternate Vendor Address Code];
                ToolTipML=[ENU=Specifies the order address of the related vendor.;
                           ENG=Specifies the order address of the related vendor.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Order Address Code";
                Importance=Additional }

    { 115 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the responsibility center, such as a distribution hub, that is associated with the involved user, company, customer, or vendor.;
                           ENG=Specifies the code of the responsibility centre, such as a distribution hub, that is associated with the involved user, company, customer, or vendor.];
                ApplicationArea=#Advanced;
                SourceExpr="Responsibility Center";
                Importance=Additional }

    { 65  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the user who is responsible for the document.;
                           ENG=Specifies the ID of the user who is responsible for the document.];
                ApplicationArea=#Advanced;
                SourceExpr="Assigned User ID";
                Importance=Additional }

    { 118 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the record is open, waiting to be approved, invoiced for prepayment, or released to the next stage of processing.;
                           ENG=Specifies whether the record is open, waiting to be approved, invoiced for prepayment, or released to the next stage of processing.];
                ApplicationArea=#Suite;
                SourceExpr=Status;
                Importance=Additional }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the status of a job queue entry that handles the posting of purchase invoices.;
                           ENG=Specifies the status of a job queue entry that handles the posting of purchase invoices.];
                ApplicationArea=#All;
                SourceExpr="Job Queue Status";
                Importance=Additional;
                Visible=JobQueuesUsed }

    { 54  ;1   ;Part      ;
                Name=PurchLines;
                ApplicationArea=#Basic,#Suite;
                SubPageLink=Document No.=FIELD(No.);
                PagePartID=Page55;
                Enabled="Buy-from Vendor No." <> '';
                Editable="Buy-from Vendor No." <> '';
                UpdatePropagation=Both }

    { 1905885101;1;Group  ;
                CaptionML=[ENU=Invoice Details;
                           ENG=Invoice Details];
                GroupType=Group }

    { 104 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code for amounts on the purchase lines.;
                           ENG=Specifies the currency code for amounts on the purchase lines.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                Importance=Promoted;
                OnValidate=BEGIN
                             CurrPage.SAVERECORD;
                             PurchCalcDiscByType.ApplyDefaultInvoiceDiscount(0,Rec);
                           END;

                OnAssistEdit=BEGIN
                               CLEAR(ChangeExchangeRate);
                               IF "Posting Date" <> 0D THEN
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor","Posting Date")
                               ELSE
                                 ChangeExchangeRate.SetParameter("Currency Code","Currency Factor",WORKDATE);
                               IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN BEGIN
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);
                                 SaveInvoiceDiscountAmount;
                               END;
                               CLEAR(ChangeExchangeRate);
                             END;
                              }

    { 48  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date you expect to receive the items on the purchase document.;
                           ENG=Specifies the date you expect to receive the items on the purchase document.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Expected Receipt Date";
                Importance=Promoted }

    { 108 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the Unit Price and Line Amount fields on document lines should be shown with or without VAT.;
                           ENG=Specifies if the Unit Price and Line Amount fields on document lines should be shown with or without VAT.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Prices Including VAT";
                OnValidate=BEGIN
                             PricesIncludingVATOnAfterValid;
                           END;
                            }

    { 138 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.;
                           ENG=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Bus. Posting Group";
                OnValidate=VAR
                             ApplicationAreaSetup@1000 : Record 9178;
                           BEGIN
                             CurrPage.SAVERECORD;

                             IF ApplicationAreaSetup.IsFoundationEnabled THEN
                               PurchCalcDiscByType.ApplyDefaultInvoiceDiscount(0,Rec);
                           END;
                            }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount.;
                           ENG=Specifies a formula that calculates the payment due date, payment discount date, and payment discount amount.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Terms Code";
                Importance=Promoted }

    { 102 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how to make payment, such as with bank transfer, cash,  or check.;
                           ENG=Specifies how to make payment, such as with bank transfer, cash, or cheque.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Method Code";
                Importance=Additional }

    { 85  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                           ENG=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.];
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 1 Code";
                OnValidate=BEGIN
                             ShortcutDimension1CodeOnAfterV;
                           END;
                            }

    { 87  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code associated with the purchase header.;
                           ENG=Specifies the dimension value code associated with the purchase header.];
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 2 Code";
                OnValidate=BEGIN
                             ShortcutDimension2CodeOnAfterV;
                           END;
                            }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment discount percent granted if payment is made on or before the date in the Pmt. Discount Date field.;
                           ENG=Specifies the payment discount percent granted if payment is made on or before the date in the Pmt. Discount Date field.];
                ApplicationArea=#Advanced;
                SourceExpr="Payment Discount %" }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.;
                           ENG=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.];
                ApplicationArea=#Advanced;
                SourceExpr="Pmt. Discount Date";
                Importance=Additional }

    { 46  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the delivery conditions of the related shipment, such as free on board (FOB).;
                           ENG=Specifies the delivery conditions of the related shipment, such as free on board (FOB).];
                ApplicationArea=#Advanced;
                SourceExpr="Shipment Method Code";
                Importance=Additional }

    { 17  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment of the purchase invoice.;
                           ENG=Specifies the payment of the purchase invoice.];
                ApplicationArea=#Advanced;
                SourceExpr="Payment Reference";
                Importance=Additional }

    { 15  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor who sent the purchase invoice.;
                           ENG=Specifies the vendor who sent the purchase invoice.];
                ApplicationArea=#Advanced;
                SourceExpr="Creditor No.";
                Importance=Additional }

    { 91  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that the related entry represents an unpaid invoice for which either a payment suggestion, a reminder, or a finance charge memo exists.;
                           ENG=Specifies that the related entry represents an unpaid invoice for which either a payment suggestion, a reminder, or a finance charge memo exists.];
                ApplicationArea=#Advanced;
                SourceExpr="On Hold";
                Importance=Additional }

    { 1906801201;1;Group  ;
                CaptionML=[ENU=Shipping and Payment;
                           ENG=Shipping and Payment];
                GroupType=Group }

    { 53  ;2   ;Group     ;
                GroupType=Group }

    { 78  ;3   ;Group     ;
                GroupType=Group }

    { 75  ;4   ;Field     ;
                Name=ShippingOptionWithLocation;
                CaptionML=[ENU=Ship-to;
                           ENG=Ship-to];
                ToolTipML=[ENU=Specifies the address that the products on the purchase document are shipped to. Default (Company Address): The same as the company address specified in the Company Information window. Location: One of the company's location addresses. Custom Address: Any ship-to address that you specify in the fields below.;
                           ENG=Specifies the address that the products on the purchase document are shipped to. Default (Company Address): The same as the company address specified in the Company Information window. Location: One of the company's location addresses. Custom Address: Any ship-to address that you specify in the fields below.];
                OptionCaptionML=[ENU=Default (Company Address),Location,Custom Address;
                                 ENG=Default (Company Address),Location,Custom Address];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShipToOptions;
                Visible=ShowShippingOptionsWithLocation;
                OnValidate=BEGIN
                             ValidateShippingOption;
                           END;
                            }

    { 80  ;4   ;Field     ;
                Name=ShippingOptionWithoutLocation;
                CaptionML=[ENU=Ship-to;
                           ENG=Ship-to];
                ToolTipML=[ENU=Specifies the address that the products on the purchase document are shipped to. Default (Company Address): The same as the company address specified in the Company Information window. Custom Address: Any ship-to address that you specify in the fields below.;
                           ENG=Specifies the address that the products on the purchase document are shipped to. Default (Company Address): The same as the company address specified in the Company Information window. Custom Address: Any ship-to address that you specify in the fields below.];
                OptionCaptionML=[ENU=Default (Company Address),,Custom Address;
                                 ENG=Default (Company Address),,Custom Address];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ShipToOptions;
                Visible=NOT ShowShippingOptionsWithLocation;
                HideValue=ShowShippingOptionsWithLocation AND (ShipToOptions = ShipToOptions::Location);
                OnValidate=BEGIN
                             ValidateShippingOption
                           END;
                            }

    { 79  ;4   ;Group     ;
                GroupType=Group }

    { 81  ;5   ;Group     ;
                Visible=ShipToOptions = ShipToOptions::Location;
                GroupType=Group }

    { 89  ;6   ;Field     ;
                ToolTipML=[ENU=Specifies a code for the location where you want the items to be placed when they are received.;
                           ENG=Specifies a code for the location where you want the items to be placed when they are received.];
                ApplicationArea=#Location;
                SourceExpr="Location Code" }

    { 36  ;5   ;Field     ;
                CaptionML=[ENU=Name;
                           ENG=Name];
                ToolTipML=[ENU=Specifies the name of the company at the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the name of the company at the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Name";
                Importance=Additional;
                Editable=ShipToOptions = ShipToOptions::"Custom Address" }

    { 38  ;5   ;Field     ;
                CaptionML=[ENU=Address;
                           ENG=Address];
                ToolTipML=[ENU=Specifies the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Address";
                Importance=Additional;
                Editable=ShipToOptions = ShipToOptions::"Custom Address" }

    { 40  ;5   ;Field     ;
                CaptionML=[ENU=Address 2;
                           ENG=Address 2];
                ToolTipML=[ENU=Specifies additional address information.;
                           ENG=Specifies additional address information.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Address 2";
                Importance=Additional;
                Editable=ShipToOptions = ShipToOptions::"Custom Address" }

    { 1040008;5;Field     ;
                CaptionML=[ENU=City;
                           ENG=City];
                ToolTipML=[ENU=Specifies the city of the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the city of the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to City";
                Editable=ShipToOptions = ShipToOptions::"Custom Address" }

    { 1040010;5;Field     ;
                CaptionML=[ENU=County;
                           ENG=County];
                ToolTipML=[ENU=Specifies the county of the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the county of the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to County";
                Editable=ShipToOptions = ShipToOptions::"Custom Address" }

    { 94  ;5   ;Field     ;
                CaptionML=[ENU=Post Code;
                           ENG=Postcode];
                ToolTipML=[ENU=Specifies the postal code of the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the postcode of the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Post Code";
                Importance=Additional;
                Editable=ShipToOptions = ShipToOptions::"Custom Address" }

    { 83  ;5   ;Field     ;
                CaptionML=[ENU=Country/Region;
                           ENG=Country/Region];
                ToolTipML=[ENU=Specifies the country/region code of the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the country/region code of the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Country/Region Code";
                Importance=Additional;
                Editable=ShipToOptions = ShipToOptions::"Custom Address" }

    { 44  ;5   ;Field     ;
                CaptionML=[ENU=Contact;
                           ENG=Contact];
                ToolTipML=[ENU=Specifies the name of a contact person for the address of the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the name of a contact person for the address of the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ship-to Contact";
                Importance=Additional;
                Editable=ShipToOptions = ShipToOptions::"Custom Address" }

    { 56  ;2   ;Group     ;
                GroupType=Group }

    { 86  ;3   ;Field     ;
                Name=PayToOptions;
                CaptionML=[ENU=Pay-to;
                           ENG=Pay-to];
                ToolTipML=[ENU=Specifies the vendor that the purchase document will be paid to. Default (Vendor): The same as the vendor on the purchase document. Another Vendor: Any vendor that you specify in the fields below.;
                           ENG=Specifies the vendor that the purchase document will be paid to. Default (Vendor): The same as the vendor on the purchase document. Another Vendor: Any vendor that you specify in the fields below.];
                OptionCaptionML=[ENU=Default (Vendor),Another Vendor;
                                 ENG=Default (Vendor),Another Vendor];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=PayToOptions;
                OnValidate=BEGIN
                             IF PayToOptions = PayToOptions::"Default (Vendor)" THEN
                               VALIDATE("Pay-to Vendor No.","Buy-from Vendor No.");
                           END;
                            }

    { 88  ;3   ;Group     ;
                Visible=PayToOptions = PayToOptions::"Another Vendor";
                GroupType=Group }

    { 18  ;4   ;Field     ;
                CaptionML=[ENU=Name;
                           ENG=Name];
                ToolTipML=[ENU=Specifies the name of the vendor sending the invoice.;
                           ENG=Specifies the name of the vendor sending the invoice.];
                ApplicationArea=#Basic,#Suite;
                NotBlank=Yes;
                SourceExpr="Pay-to Name";
                Importance=Promoted;
                OnValidate=VAR
                             ApplicationAreaSetup@1000 : Record 9178;
                           BEGIN
                             IF GETFILTER("Pay-to Vendor No.") = xRec."Pay-to Vendor No." THEN
                               IF "Pay-to Vendor No." <> xRec."Pay-to Vendor No." THEN
                                 SETRANGE("Pay-to Vendor No.");

                             IF ApplicationAreaSetup.IsFoundationEnabled THEN
                               PurchCalcDiscByType.ApplyDefaultInvoiceDiscount(0,Rec);

                             CurrPage.UPDATE;
                           END;
                            }

    { 20  ;4   ;Field     ;
                CaptionML=[ENU=Address;
                           ENG=Address];
                ToolTipML=[ENU=Specifies the address of the vendor sending the invoice.;
                           ENG=Specifies the address of the vendor sending the invoice.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pay-to Address";
                Importance=Additional;
                Enabled="Buy-from Vendor No." <> "Pay-to Vendor No.";
                Editable="Buy-from Vendor No." <> "Pay-to Vendor No." }

    { 22  ;4   ;Field     ;
                CaptionML=[ENU=Address 2;
                           ENG=Address 2];
                ToolTipML=[ENU=Specifies additional address information.;
                           ENG=Specifies additional address information.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pay-to Address 2";
                Importance=Additional;
                Enabled="Buy-from Vendor No." <> "Pay-to Vendor No.";
                Editable="Buy-from Vendor No." <> "Pay-to Vendor No." }

    { 1040004;4;Field     ;
                CaptionML=[ENU=City;
                           ENG=City];
                ToolTipML=[ENU=Specifies the city of the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the city of the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pay-to City";
                Enabled="Buy-from Vendor No." <> "Pay-to Vendor No.";
                Editable="Buy-from Vendor No." <> "Pay-to Vendor No." }

    { 1040006;4;Field     ;
                CaptionML=[ENU=County;
                           ENG=County];
                ToolTipML=[ENU=Specifies the county of the address that you want the items on the purchase document to be shipped to.;
                           ENG=Specifies the county of the address that you want the items on the purchase document to be shipped to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pay-to County";
                Enabled="Buy-from Vendor No." <> "Pay-to Vendor No.";
                Editable="Buy-from Vendor No." <> "Pay-to Vendor No." }

    { 82  ;4   ;Field     ;
                CaptionML=[ENU=Post Code;
                           ENG=Postcode];
                ToolTipML=[ENU=Specifies the postal code.;
                           ENG=Specifies the postcode.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pay-to Post Code";
                Importance=Additional;
                Enabled="Buy-from Vendor No." <> "Pay-to Vendor No.";
                Editable="Buy-from Vendor No." <> "Pay-to Vendor No." }

    { 130 ;4   ;Field     ;
                CaptionML=[ENU=Contact No.;
                           ENG=Contact No.];
                ToolTipML=[ENU=Specifies the number of the contact who sends the invoice.;
                           ENG=Specifies the number of the contact who sends the invoice.];
                ApplicationArea=#Advanced;
                SourceExpr="Pay-to Contact No.";
                Importance=Additional;
                Enabled="Buy-from Vendor No." <> "Pay-to Vendor No.";
                Editable="Buy-from Vendor No." <> "Pay-to Vendor No." }

    { 26  ;4   ;Field     ;
                CaptionML=[ENU=Contact;
                           ENG=Contact];
                ToolTipML=[ENU=Specifies the name of the person to contact about an invoice from this vendor.;
                           ENG=Specifies the name of the person to contact about an invoice from this vendor.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pay-to Contact";
                Enabled="Buy-from Vendor No." <> "Pay-to Vendor No.";
                Editable="Buy-from Vendor No." <> "Pay-to Vendor No." }

    { 1907468901;1;Group  ;
                CaptionML=[ENU=Foreign Trade;
                           ENG=Foreign Trade] }

    { 100 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a specification of the document's transaction, for the purpose of reporting to INTRASTAT.;
                           ENG=Specifies a specification of the document's transaction, for the purpose of reporting to INTRASTAT.];
                ApplicationArea=#Advanced;
                SourceExpr="Transaction Specification" }

    { 50  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of transaction that the document represents, for the purpose of reporting to INTRASTAT.;
                           ENG=Specifies the type of transaction that the document represents, for the purpose of reporting to INTRASTAT.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Transaction Type" }

    { 52  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the transport method, for the purpose of reporting to INTRASTAT.;
                           ENG=Specifies the transport method, for the purpose of reporting to INTRASTAT.];
                ApplicationArea=#Advanced;
                SourceExpr="Transport Method" }

    { 96  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the port of entry where the items pass into your country/region, for reporting to Intrastat.;
                           ENG=Specifies the code of the port of entry where the items pass into your country/region, for reporting to Intrastat.];
                ApplicationArea=#Advanced;
                SourceExpr="Entry Point" }

    { 98  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the area of the customer or vendor, for the purpose of reporting to INTRASTAT.;
                           ENG=Specifies the area of the customer or vendor, for the purpose of reporting to INTRASTAT.];
                ApplicationArea=#Advanced;
                SourceExpr=Area }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 27  ;1   ;Part      ;
                ApplicationArea=#All;
                SubPageLink=Table ID=CONST(38),
                            Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.);
                PagePartID=Page9103;
                Visible=OpenApprovalEntriesExistForCurrUser;
                PartType=Page }

    { 1906354007;1;Part   ;
                Name=ApprovalFactBox;
                ApplicationArea=#Advanced;
                PagePartID=Page9092;
                Visible=FALSE;
                PartType=Page }

    { 1901138007;1;Part   ;
                ApplicationArea=#Advanced;
                SubPageLink=No.=FIELD(Buy-from Vendor No.);
                PagePartID=Page9093;
                Visible=FALSE;
                PartType=Page }

    { 31  ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page193;
                Visible=NOT IsOfficeAddin;
                PartType=Page;
                ShowFilter=No }

    { 1904651607;1;Part   ;
                ApplicationArea=#Advanced;
                SubPageLink=No.=FIELD(Pay-to Vendor No.);
                PagePartID=Page9094;
                PartType=Page }

    { 1903435607;1;Part   ;
                ApplicationArea=#Advanced;
                SubPageLink=No.=FIELD(Buy-from Vendor No.);
                PagePartID=Page9095;
                Visible=FALSE;
                PartType=Page }

    { 1906949207;1;Part   ;
                ApplicationArea=#Advanced;
                SubPageLink=No.=FIELD(Pay-to Vendor No.);
                PagePartID=Page9096;
                Visible=FALSE;
                PartType=Page }

    { 3   ;1   ;Part      ;
                ApplicationArea=#Advanced;
                SubPageLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(Document No.),
                            Line No.=FIELD(Line No.);
                PagePartID=Page9100;
                ProviderID=54;
                Visible=FALSE;
                PartType=Page }

    { 49  ;1   ;Part      ;
                Name=WorkflowStatus;
                ApplicationArea=#All;
                PagePartID=Page1528;
                Visible=ShowWorkflowStatus;
                Enabled=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      DummyApplicationAreaSetup@1027 : Record 9178;
      CopyPurchDoc@1002 : Report 492;
      MoveNegPurchLines@1005 : Report 6698;
      ReportPrint@1003 : Codeunit 228;
      UserMgt@1004 : Codeunit 5700;
      PurchCalcDiscByType@1007 : Codeunit 66;
      OfficeMgt@1022 : Codeunit 1630;
      ChangeExchangeRate@1001 : Page 511;
      ShipToOptions@1025 : 'Default (Company Address),Location,Custom Address';
      PayToOptions@1028 : 'Default (Vendor),Another Vendor';
      HasIncomingDocument@1010 : Boolean;
      DocNoVisible@1006 : Boolean;
      VendorInvoiceNoMandatory@1008 : Boolean;
      OpenApprovalEntriesExist@1009 : Boolean;
      OpenApprovalEntriesExistForCurrUser@1000 : Boolean;
      ShowWorkflowStatus@1011 : Boolean;
      JobQueuesUsed@1014 : Boolean;
      OpenPostedPurchaseInvQst@1015 : TextConst 'ENU=The invoice has been posted and moved to the Posted Purchase Invoices window.\\Do you want to open the posted invoice?;ENG=The invoice has been posted and moved to the Posted Purchase Invoices window.\\Do you want to open the posted invoice?';
      IsOfficeAddin@1017 : Boolean;
      CanCancelApprovalForRecord@1013 : Boolean;
      DocumentIsPosted@1012 : Boolean;
      CreateIncomingDocumentEnabled@1016 : Boolean;
      CreateIncomingDocumentVisible@1021 : Boolean;
      CreateIncomingDocFromEmailAttachment@1018 : Boolean;
      TotalsMismatchErr@1019 : TextConst 'ENU=The invoice cannot be posted because the total is different from the total on the related incoming document.;ENG=The invoice cannot be posted because the total is different from the total on the related incoming document.';
      IncomingDocEmailAttachmentEnabled@1020 : Boolean;
      CanRequestApprovalForFlow@1023 : Boolean;
      CanCancelApprovalForFlow@1024 : Boolean;
      ShowShippingOptionsWithLocation@1026 : Boolean;
      IsSaaS@1029 : Boolean;

    [External]
    PROCEDURE LineModified@7();
    BEGIN
    END;

    LOCAL PROCEDURE Post@4(PostingCodeunitID@1000 : Integer);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchInvHeader@1003 : Record 122;
      LinesInstructionMgt@1001 : Codeunit 1320;
      InstructionMgt@1004 : Codeunit 1330;
      IsScheduledPosting@1005 : Boolean;
    BEGIN
      IF DummyApplicationAreaSetup.IsFoundationEnabled THEN
        LinesInstructionMgt.PurchaseCheckAllLinesHaveQuantityAssigned(Rec);

      SendToPosting(PostingCodeunitID);

      IsScheduledPosting := "Job Queue Status" = "Job Queue Status"::"Scheduled for Posting";
      DocumentIsPosted := (NOT PurchaseHeader.GET("Document Type","No.")) OR IsScheduledPosting;

      IF IsScheduledPosting THEN
        CurrPage.CLOSE;
      CurrPage.UPDATE(FALSE);

      IF PostingCodeunitID <> CODEUNIT::"Purch.-Post (Yes/No)" THEN
        EXIT;

      IF IsOfficeAddin THEN BEGIN
        PurchInvHeader.SETRANGE("Pre-Assigned No.","No.");
        PurchInvHeader.SETRANGE("Order No.",'');
        IF PurchInvHeader.FINDFIRST THEN
          PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader);
      END ELSE
        IF InstructionMgt.IsEnabled(InstructionMgt.ShowPostedConfirmationMessageCode) THEN
          ShowPostedConfirmationMessage;
    END;

    LOCAL PROCEDURE VerifyTotal@22();
    BEGIN
      IF NOT IsTotalValid THEN
        ERROR(TotalsMismatchErr);
    END;

    LOCAL PROCEDURE ApproveCalcInvDisc@1();
    BEGIN
      CurrPage.PurchLines.PAGE.ApproveCalcInvDisc;
    END;

    LOCAL PROCEDURE SaveInvoiceDiscountAmount@14();
    VAR
      DocumentTotals@1000 : Codeunit 57;
    BEGIN
      CurrPage.SAVERECORD;
      DocumentTotals.PurchaseRedistributeInvoiceDiscountAmountsOnDocument(Rec);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE PurchaserCodeOnAfterValidate@19046120();
    BEGIN
      CurrPage.PurchLines.PAGE.UpdateForm(TRUE);
    END;

    LOCAL PROCEDURE ShortcutDimension1CodeOnAfterV@19029405();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShortcutDimension2CodeOnAfterV@19008725();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE PricesIncludingVATOnAfterValid@19009096();
    BEGIN
      CurrPage.UPDATE;
      CALCFIELDS("Invoice Discount Amount");
    END;

    LOCAL PROCEDURE SetDocNoVisible@2();
    VAR
      DocumentNoVisibility@1000 : Codeunit 1400;
      DocType@1003 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Reminder,FinChMemo';
    BEGIN
      DocNoVisible := DocumentNoVisibility.PurchaseDocumentNoIsVisible(DocType::Invoice,"No.");
    END;

    LOCAL PROCEDURE SetExtDocNoMandatoryCondition@3();
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      VendorInvoiceNoMandatory := PurchasesPayablesSetup."Ext. Doc. No. Mandatory"
    END;

    LOCAL PROCEDURE SetControlAppearance@5();
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
      WorkflowWebhookMgt@1000 : Codeunit 1543;
    BEGIN
      HasIncomingDocument := "Incoming Document Entry No." <> 0;
      CreateIncomingDocumentEnabled := (NOT HasIncomingDocument) AND ("No." <> '');
      SetExtDocNoMandatoryCondition;

      IncomingDocEmailAttachmentEnabled := OfficeMgt.EmailHasAttachments;
      OpenApprovalEntriesExistForCurrUser := ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);
      OpenApprovalEntriesExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);

      CanCancelApprovalForRecord := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);

      WorkflowWebhookMgt.GetCanRequestAndCanCancel(RECORDID,CanRequestApprovalForFlow,CanCancelApprovalForFlow);
    END;

    LOCAL PROCEDURE ShowPostedConfirmationMessage@13();
    VAR
      PurchInvHeader@1000 : Record 122;
      InstructionMgt@1001 : Codeunit 1330;
    BEGIN
      PurchInvHeader.SETRANGE("Pre-Assigned No.","No.");
      PurchInvHeader.SETRANGE("Order No.",'');
      IF PurchInvHeader.FINDFIRST THEN
        IF InstructionMgt.ShowConfirm(OpenPostedPurchaseInvQst,InstructionMgt.ShowPostedConfirmationMessageCode) THEN
          PAGE.RUN(PAGE::"Posted Purchase Invoice",PurchInvHeader);
    END;

    LOCAL PROCEDURE ValidateShippingOption@8();
    BEGIN
      CASE ShipToOptions OF
        ShipToOptions::"Default (Company Address)",
        ShipToOptions::"Custom Address":
          VALIDATE("Location Code",'');
        ShipToOptions::Location:
          VALIDATE("Location Code");
      END;
    END;

    LOCAL PROCEDURE CalculateCurrentShippingAndPayToOption@36();
    BEGIN
      IF "Location Code" <> '' THEN
        ShipToOptions := ShipToOptions::Location
      ELSE
        IF ShipToAddressEqualsCompanyShipToAddress THEN
          ShipToOptions := ShipToOptions::"Default (Company Address)"
        ELSE
          ShipToOptions := ShipToOptions::"Custom Address";

      IF "Pay-to Vendor No." = "Buy-from Vendor No." THEN
        PayToOptions := PayToOptions::"Default (Vendor)"
      ELSE
        PayToOptions := PayToOptions::"Another Vendor";
    END;

    BEGIN
    END.
  }
}

OBJECT Page 61 Applied Customer Entries
{
  OBJECT-PROPERTIES
  {
    Date=24/05/19;
    Time=15:42:50;
    Modified=Yes;
    Version List=NAVW111.00.00.24232;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Applied Customer Entries;
               ENG=Applied Customer Entries];
    SourceTable=Table21;
    DataCaptionExpr=Heading;
    PageType=List;
    OnInit=BEGIN
             AmountVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 RESET;
                 SetConrolVisibility;

                 IF "Entry No." <> 0 THEN BEGIN
                   CreateCustLedgEntry := Rec;
                   IF CreateCustLedgEntry."Document Type" = 0 THEN
                     Heading := Text000
                   ELSE
                     Heading := FORMAT(CreateCustLedgEntry."Document Type");
                   Heading := Heading + ' ' + CreateCustLedgEntry."Document No.";

                   FindApplnEntriesDtldtLedgEntry;
                   SETCURRENTKEY("Entry No.");
                   SETRANGE("Entry No.");

                   IF CreateCustLedgEntry."Closed by Entry No." <> 0 THEN BEGIN
                     "Entry No." := CreateCustLedgEntry."Closed by Entry No.";
                     MARK(TRUE);
                   END;

                   SETCURRENTKEY("Closed by Entry No.");
                   SETRANGE("Closed by Entry No.",CreateCustLedgEntry."Entry No.");
                   IF FIND('-') THEN
                     REPEAT
                       MARK(TRUE);
                     UNTIL NEXT = 0;

                   SETCURRENTKEY("Entry No.");
                   SETRANGE("Closed by Entry No.");
                 END;

                 MARKEDONLY(TRUE);
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 20      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ENG=Ent&ry];
                      Image=Entry }
      { 27      ;2   ;Action    ;
                      CaptionML=[ENU=Reminder/Fin. Charge Entries;
                                 ENG=Reminder/Fin. Charge Entries];
                      ToolTipML=[ENU=View entries that were created when reminders and finance charge memos were issued.;
                                 ENG=View entries that were created when reminders and finance charge memos were issued.];
                      ApplicationArea=#Advanced;
                      RunObject=Page 444;
                      RunPageView=SORTING(Customer Entry No.);
                      RunPageLink=Customer Entry No.=FIELD(Entry No.);
                      Image=Reminder }
      { 32      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 35      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Detailed &Ledger Entries;
                                 ENG=Detailed &Ledger Entries];
                      ToolTipML=[ENU=View a summary of the all posted entries and adjustments related to a specific customer ledger entry.;
                                 ENG=View a summary of the all posted entries and adjustments related to a specific customer ledger entry.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 573;
                      RunPageView=SORTING(Cust. Ledger Entry No.,Posting Date);
                      RunPageLink=Cust. Ledger Entry No.=FIELD(Entry No.),
                                  Customer No.=FIELD(Customer No.);
                      Image=View }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      CaptionML=[ENU=&Navigate;
                                 ENG=&Navigate];
                      ToolTipML=[ENU=Find all entries and documents that exist for the document number and posting date on the selected entry or document.;
                                 ENG=Find all entries and documents that exist for the document number and posting date on the selected entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Navigate;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer entry's posting date.;
                           ENG=Specifies the customer entry's posting date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date" }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the document type that the customer entry belongs to.;
                           ENG=Specifies the document type that the customer entry belongs to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type" }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the entry's document number.;
                           ENG=Specifies the entry's document number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No." }

    { 1000000002;2;Field  ;
                SourceExpr="Document Date" }

    { 1000000003;2;Field  ;
                SourceExpr="External Document No." }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the customer entry.;
                           ENG=Specifies a description of the customer entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description }

    { 77  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 1 Code";
                Visible=FALSE }

    { 75  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 2 Code";
                Visible=FALSE }

    { 73  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the salesperson whom the entry is linked to.;
                           ENG=Specifies the code for the salesperson whom the entry is linked to.];
                ApplicationArea=#Advanced;
                SourceExpr="Salesperson Code";
                Visible=FALSE }

    { 71  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code for the amount on the line.;
                           ENG=Specifies the currency code for the amount on the line.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code" }

    { 33  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the original entry.;
                           ENG=Specifies the amount of the original entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Original Amount" }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the entry.;
                           ENG=Specifies the amount of the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Visible=AmountVisible }

    { 1000000000;2;Field  ;
                SourceExpr="Amount to Apply" }

    { 1000000001;2;Field  ;
                SourceExpr="Remaining Amount" }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits.;
                           ENG=Specifies the total of the ledger entries that represent debits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=DebitCreditVisible }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits.;
                           ENG=Specifies the total of the ledger entries that represent credits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=DebitCreditVisible }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that the entry was finally applied to (closed) with.;
                           ENG=Specifies the amount that the entry was finally applied to (closed) with.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Closed by Amount" }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the currency of the entry that was applied to (and closed) this customer ledger entry.;
                           ENG=Specifies the code of the currency of the entry that was applied to (and closed) this customer ledger entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Closed by Currency Code";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that was finally applied to (and closed) this customer ledger entry.;
                           ENG=Specifies the amount that was finally applied to (and closed) this customer ledger entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Closed by Currency Amount";
                AutoFormatType=1;
                AutoFormatExpr="Closed by Currency Code";
                Visible=FALSE }

    { 25  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.;
                           ENG=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.];
                ApplicationArea=#Advanced;
                SourceExpr="User ID";
                Visible=FALSE }

    { 23  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the source code that specifies where the entry was created.;
                           ENG=Specifies the source code that specifies where the entry was created.];
                ApplicationArea=#Advanced;
                SourceExpr="Source Code";
                Visible=FALSE }

    { 21  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the reason code, a supplementary source code that enables you to trace the entry.;
                           ENG=Specifies the reason code, a supplementary source code that enables you to trace the entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Reason Code";
                Visible=FALSE }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the entry, as assigned from the specified number series when the entry was created.;
                           ENG=Specifies the number of the entry, as assigned from the specified number series when the entry was created.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No." }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Document;ENG=Document';
      CreateCustLedgEntry@1001 : Record 21;
      Navigate@1002 : Page 344;
      Heading@1003 : Text[50];
      AmountVisible@1005 : Boolean;
      DebitCreditVisible@1004 : Boolean;

    LOCAL PROCEDURE FindApplnEntriesDtldtLedgEntry@1();
    VAR
      DtldCustLedgEntry1@1001 : Record 379;
      DtldCustLedgEntry2@1000 : Record 379;
    BEGIN
      DtldCustLedgEntry1.SETCURRENTKEY("Cust. Ledger Entry No.");
      DtldCustLedgEntry1.SETRANGE("Cust. Ledger Entry No.",CreateCustLedgEntry."Entry No.");
      DtldCustLedgEntry1.SETRANGE(Unapplied,FALSE);
      IF DtldCustLedgEntry1.FIND('-') THEN
        REPEAT
          IF DtldCustLedgEntry1."Cust. Ledger Entry No." =
             DtldCustLedgEntry1."Applied Cust. Ledger Entry No."
          THEN BEGIN
            DtldCustLedgEntry2.INIT;
            DtldCustLedgEntry2.SETCURRENTKEY("Applied Cust. Ledger Entry No.","Entry Type");
            DtldCustLedgEntry2.SETRANGE(
              "Applied Cust. Ledger Entry No.",DtldCustLedgEntry1."Applied Cust. Ledger Entry No.");
            DtldCustLedgEntry2.SETRANGE("Entry Type",DtldCustLedgEntry2."Entry Type"::Application);
            DtldCustLedgEntry2.SETRANGE(Unapplied,FALSE);
            IF DtldCustLedgEntry2.FIND('-') THEN
              REPEAT
                IF DtldCustLedgEntry2."Cust. Ledger Entry No." <>
                   DtldCustLedgEntry2."Applied Cust. Ledger Entry No."
                THEN BEGIN
                  SETCURRENTKEY("Entry No.");
                  SETRANGE("Entry No.",DtldCustLedgEntry2."Cust. Ledger Entry No.");
                  IF FIND('-') THEN
                    MARK(TRUE);
                END;
              UNTIL DtldCustLedgEntry2.NEXT = 0;
          END ELSE BEGIN
            SETCURRENTKEY("Entry No.");
            SETRANGE("Entry No.",DtldCustLedgEntry1."Applied Cust. Ledger Entry No.");
            IF FIND('-') THEN
              MARK(TRUE);
          END;
        UNTIL DtldCustLedgEntry1.NEXT = 0;
    END;

    [External]
    PROCEDURE SetTempCustLedgEntry@2(NewTempCustLedgEntryNo@1102601000 : Integer);
    BEGIN
      IF NewTempCustLedgEntryNo <> 0 THEN BEGIN
        SETRANGE("Entry No.",NewTempCustLedgEntryNo);
        FIND('-');
      END;
    END;

    LOCAL PROCEDURE SetConrolVisibility@8();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      AmountVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Debit/Credit Only");
      DebitCreditVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Amount Only");
    END;

    BEGIN
    END.
  }
}

OBJECT Page 62 Applied Vendor Entries
{
  OBJECT-PROPERTIES
  {
    Date=24/05/19;
    Time=10:47:47;
    Modified=Yes;
    Version List=NAVW111.00.00.24232;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Applied Vendor Entries;
               ENG=Applied Vendor Entries];
    SourceTable=Table25;
    DataCaptionExpr=Heading;
    PageType=List;
    OnInit=BEGIN
             AmountVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 RESET;
                 SetConrolVisibility;

                 IF "Entry No." <> 0 THEN BEGIN
                   CreateVendLedgEntry := Rec;
                   IF CreateVendLedgEntry."Document Type" = 0 THEN
                     Heading := Text000
                   ELSE
                     Heading := FORMAT(CreateVendLedgEntry."Document Type");
                   Heading := Heading + ' ' + CreateVendLedgEntry."Document No.";

                   FindApplnEntriesDtldtLedgEntry;
                   SETCURRENTKEY("Entry No.");
                   SETRANGE("Entry No.");

                   IF CreateVendLedgEntry."Closed by Entry No." <> 0 THEN BEGIN
                     "Entry No." := CreateVendLedgEntry."Closed by Entry No.";
                     MARK(TRUE);
                   END;

                   SETCURRENTKEY("Closed by Entry No.");
                   SETRANGE("Closed by Entry No.",CreateVendLedgEntry."Entry No.");
                   IF FIND('-') THEN
                     REPEAT
                       MARK(TRUE);
                     UNTIL NEXT = 0;

                   SETCURRENTKEY("Entry No.");
                   SETRANGE("Closed by Entry No.");
                 END;

                 MARKEDONLY(TRUE);
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 32      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ENG=Ent&ry];
                      Image=Entry }
      { 33      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 36      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Detailed &Ledger Entries;
                                 ENG=Detailed &Ledger Entries];
                      ToolTipML=[ENU=View a summary of the all posted entries and adjustments related to a specific vendor ledger entry.;
                                 ENG=View a summary of the all posted entries and adjustments related to a specific vendor ledger entry.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 574;
                      RunPageView=SORTING(Vendor Ledger Entry No.,Posting Date);
                      RunPageLink=Vendor Ledger Entry No.=FIELD(Entry No.),
                                  Vendor No.=FIELD(Vendor No.);
                      Image=View }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      CaptionML=[ENU=&Navigate;
                                 ENG=&Navigate];
                      ToolTipML=[ENU=Find all entries and documents that exist for the document number and posting date on the selected entry or document.;
                                 ENG=Find all entries and documents that exist for the document number and posting date on the selected entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Navigate;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor entry's posting date.;
                           ENG=Specifies the vendor entry's posting date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date" }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the document type that the vendor entry belongs to.;
                           ENG=Specifies the document type that the vendor entry belongs to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type" }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor entry's document number.;
                           ENG=Specifies the vendor entry's document number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No." }

    { 1000000001;2;Field  ;
                SourceExpr="Document Date" }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the vendor entry.;
                           ENG=Specifies a description of the vendor entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a document number that refers to the customer's or vendor's numbering system.;
                           ENG=Specifies a document number that refers to the customer's or vendor's numbering system.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="External Document No.";
                Visible=TRUE }

    { 83  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 1 Code";
                Visible=FALSE }

    { 81  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 2 Code";
                Visible=FALSE }

    { 79  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies which purchaser is assigned to the vendor.;
                           ENG=Specifies which purchaser is assigned to the vendor.];
                ApplicationArea=#Advanced;
                SourceExpr="Purchaser Code";
                Visible=FALSE }

    { 77  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code for the amount on the line.;
                           ENG=Specifies the currency code for the amount on the line.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code" }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the original entry.;
                           ENG=Specifies the amount of the original entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Original Amount" }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the entry.;
                           ENG=Specifies the amount of the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Visible=AmountVisible }

    { 1000000000;2;Field  ;
                SourceExpr="Amount to Apply" }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits.;
                           ENG=Specifies the total of the ledger entries that represent debits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=DebitCreditVisible }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits.;
                           ENG=Specifies the total of the ledger entries that represent credits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=DebitCreditVisible }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that the entry was finally applied to (closed) with.;
                           ENG=Specifies the amount that the entry was finally applied to (closed) with.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Closed by Amount" }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code of the entry that was applied to (and closed) this vendor ledger entry.;
                           ENG=Specifies the currency code of the entry that was applied to (and closed) this vendor ledger entry.];
                ApplicationArea=#Suite;
                SourceExpr="Closed by Currency Code" }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that was finally applied to (and closed) this vendor ledger entry.;
                           ENG=Specifies the amount that was finally applied to (and closed) this vendor ledger entry.];
                ApplicationArea=#Suite;
                SourceExpr="Closed by Currency Amount";
                AutoFormatType=1;
                AutoFormatExpr="Closed by Currency Code" }

    { 27  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.;
                           ENG=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.];
                ApplicationArea=#Advanced;
                SourceExpr="User ID";
                Visible=FALSE }

    { 25  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the source code that specifies where the entry was created.;
                           ENG=Specifies the source code that specifies where the entry was created.];
                ApplicationArea=#Advanced;
                SourceExpr="Source Code";
                Visible=FALSE }

    { 23  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the reason code, a supplementary source code that enables you to trace the entry.;
                           ENG=Specifies the reason code, a supplementary source code that enables you to trace the entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Reason Code";
                Visible=FALSE }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the entry, as assigned from the specified number series when the entry was created.;
                           ENG=Specifies the number of the entry, as assigned from the specified number series when the entry was created.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No." }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Document;ENG=Document';
      CreateVendLedgEntry@1001 : Record 25;
      Navigate@1002 : Page 344;
      Heading@1003 : Text[50];
      AmountVisible@1005 : Boolean;
      DebitCreditVisible@1004 : Boolean;

    LOCAL PROCEDURE FindApplnEntriesDtldtLedgEntry@1();
    VAR
      DtldVendLedgEntry1@1000 : Record 380;
      DtldVendLedgEntry2@1001 : Record 380;
    BEGIN
      DtldVendLedgEntry1.SETCURRENTKEY("Vendor Ledger Entry No.");
      DtldVendLedgEntry1.SETRANGE("Vendor Ledger Entry No.",CreateVendLedgEntry."Entry No.");
      DtldVendLedgEntry1.SETRANGE(Unapplied,FALSE);
      IF DtldVendLedgEntry1.FIND('-') THEN
        REPEAT
          IF DtldVendLedgEntry1."Vendor Ledger Entry No." =
             DtldVendLedgEntry1."Applied Vend. Ledger Entry No."
          THEN BEGIN
            DtldVendLedgEntry2.INIT;
            DtldVendLedgEntry2.SETCURRENTKEY("Applied Vend. Ledger Entry No.","Entry Type");
            DtldVendLedgEntry2.SETRANGE(
              "Applied Vend. Ledger Entry No.",DtldVendLedgEntry1."Applied Vend. Ledger Entry No.");
            DtldVendLedgEntry2.SETRANGE("Entry Type",DtldVendLedgEntry2."Entry Type"::Application);
            DtldVendLedgEntry2.SETRANGE(Unapplied,FALSE);
            IF DtldVendLedgEntry2.FIND('-') THEN
              REPEAT
                IF DtldVendLedgEntry2."Vendor Ledger Entry No." <>
                   DtldVendLedgEntry2."Applied Vend. Ledger Entry No."
                THEN BEGIN
                  SETCURRENTKEY("Entry No.");
                  SETRANGE("Entry No.",DtldVendLedgEntry2."Vendor Ledger Entry No.");
                  IF FIND('-') THEN
                    MARK(TRUE);
                END;
              UNTIL DtldVendLedgEntry2.NEXT = 0;
          END ELSE BEGIN
            SETCURRENTKEY("Entry No.");
            SETRANGE("Entry No.",DtldVendLedgEntry1."Applied Vend. Ledger Entry No.");
            IF FIND('-') THEN
              MARK(TRUE);
          END;
        UNTIL DtldVendLedgEntry1.NEXT = 0;
    END;

    LOCAL PROCEDURE SetConrolVisibility@8();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      AmountVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Debit/Credit Only");
      DebitCreditVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Amount Only");
    END;

    BEGIN
    END.
  }
}

OBJECT Page 233 Apply Vendor Entries
{
  OBJECT-PROPERTIES
  {
    Date=19/11/19;
    Time=11:42:21;
    Modified=Yes;
    Version List=NAVW111.00.00.24232;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Apply Vendor Entries;
               ENG=Apply Vendor Entries];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table25;
    DataCaptionFields=Vendor No.;
    PageType=Worksheet;
    OnInit=BEGIN
             AppliesToIDVisible := TRUE;
           END;

    OnOpenPage=VAR
                 OfficeMgt@1000 : Codeunit 1630;
               BEGIN
                 IF CalcType = CalcType::Direct THEN BEGIN
                   Vend.GET("Vendor No.");
                   ApplnCurrencyCode := Vend."Currency Code";
                   FindApplyingEntry;
                 END;

                 AppliesToIDVisible := ApplnType <> ApplnType::"Applies-to Doc. No.";

                 GLSetup.GET;

                 IF CalcType = CalcType::GenJnlLine THEN
                   CalcApplnAmount;
                 PostingDone := FALSE;
                 IsOfficeAddin := OfficeMgt.IsAvailable;
               END;

    OnAfterGetRecord=BEGIN
                       StyleTxt := SetStyle;
                     END;

    OnModifyRecord=BEGIN
                     CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);
                     IF "Applies-to ID" <> xRec."Applies-to ID" THEN
                       CalcApplnAmount;
                     EXIT(FALSE);
                   END;

    OnQueryClosePage=BEGIN
                       IF CloseAction = ACTION::LookupOK THEN
                         LookupOKOnPush;
                       IF ApplnType = ApplnType::"Applies-to Doc. No." THEN BEGIN
                         IF OK AND (ApplyingVendLedgEntry."Posting Date" < "Posting Date") THEN BEGIN
                           OK := FALSE;
                           ERROR(
                             EarlierPostingDateErr,ApplyingVendLedgEntry."Document Type",ApplyingVendLedgEntry."Document No.",
                             "Document Type","Document No.");
                         END;
                         IF OK THEN BEGIN
                           IF "Amount to Apply" = 0 THEN
                             "Amount to Apply" := "Remaining Amount";
                           CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);
                         END;
                       END;

                       IF CheckActionPerformed THEN BEGIN
                         Rec := ApplyingVendLedgEntry;
                         "Applying Entry" := FALSE;
                         IF AppliesToID = '' THEN BEGIN
                           "Applies-to ID" := '';
                           "Amount to Apply" := 0;
                         END;
                         CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);
                       END;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           IF ApplnType = ApplnType::"Applies-to Doc. No." THEN
                             CalcApplnAmount;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 37      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ENG=Ent&ry];
                      Image=Entry }
      { 31      ;2   ;Action    ;
                      CaptionML=[ENU=Applied E&ntries;
                                 ENG=Applied E&ntries];
                      ToolTipML=[ENU=View the ledger entries that have been applied to this record.;
                                 ENG=View the ledger entries that have been applied to this record.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 62;
                      RunPageOnRec=Yes;
                      Image=Approve }
      { 57      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 63      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Detailed &Ledger Entries;
                                 ENG=Detailed &Ledger Entries];
                      ToolTipML=[ENU=View a summary of the all posted entries and adjustments related to a specific vendor ledger entry.;
                                 ENG=View a summary of the all posted entries and adjustments related to a specific vendor ledger entry.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 574;
                      RunPageView=SORTING(Vendor Ledger Entry No.,Posting Date);
                      RunPageLink=Vendor Ledger Entry No.=FIELD(Entry No.);
                      Image=View }
      { 17      ;2   ;Action    ;
                      Name=Navigate;
                      CaptionML=[ENU=&Navigate;
                                 ENG=&Navigate];
                      ToolTipML=[ENU=Find all entries and documents that exist for the document number and posting date on the selected entry or document.;
                                 ENG=Find all entries and documents that exist for the document number and posting date on the selected entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Visible=NOT IsOfficeAddin;
                      Image=Navigate;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 15      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Application;
                                 ENG=&Application];
                      Image=Apply }
      { 13      ;2   ;Action    ;
                      Name=ActionSetAppliesToID;
                      ShortCutKey=Shift+F11;
                      CaptionML=[ENU=Set Applies-to ID;
                                 ENG=Set Applies-to ID];
                      ToolTipML=[ENU=Set the Applies-to ID field on the posted entry to automatically be filled in with the document number of the entry in the journal.;
                                 ENG=Set the Applies-to ID field on the posted entry to automatically be filled in with the document number of the entry in the journal.];
                      ApplicationArea=#Basic,#Suite;
                      Image=SelectLineToApply;
                      OnAction=BEGIN
                                 IF (CalcType = CalcType::GenJnlLine) AND (ApplnType = ApplnType::"Applies-to Doc. No.") THEN
                                   ERROR(CannotSetAppliesToIDErr);

                                 SetVendApplId;
                               END;
                                }
      { 11      ;2   ;Action    ;
                      Name=ActionPostApplication;
                      ShortCutKey=F9;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Post Application;
                                 ENG=Post Application];
                      ToolTipML=[ENU=Define the document number of the ledger entry to use to perform the application. In addition, you specify the Posting Date for the application.;
                                 ENG=Define the document number of the ledger entry to use to perform the application. In addition, you specify the Posting Date for the application.];
                      ApplicationArea=#Basic,#Suite;
                      Image=PostApplication;
                      OnAction=BEGIN
                                 PostDirectApplication(FALSE);
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=[ENU=Preview Posting;
                                 ENG=Preview Posting];
                      ToolTipML=[ENU=Review the different types of entries that will be created when you post the document or journal.;
                                 ENG=Review the different types of entries that will be created when you post the document or journal.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ViewPostedOrder;
                      OnAction=BEGIN
                                 PostDirectApplication(TRUE);
                               END;
                                }
      { 7       ;2   ;Separator ;
                      CaptionML=[ENU=-;
                                 ENG=-] }
      { 5       ;2   ;Action    ;
                      CaptionML=[ENU=Show Only Selected Entries to Be Applied;
                                 ENG=Show Only Selected Entries to Be Applied];
                      ToolTipML=[ENU=View the selected ledger entries that will be applied to the specified record.;
                                 ENG=View the selected ledger entries that will be applied to the specified record.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ShowSelected;
                      OnAction=BEGIN
                                 ShowAppliedEntries := NOT ShowAppliedEntries;
                                 IF ShowAppliedEntries THEN
                                   IF CalcType = CalcType::GenJnlLine THEN
                                     SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID")
                                   ELSE BEGIN
                                     VendEntryApplID := USERID;
                                     IF VendEntryApplID = '' THEN
                                       VendEntryApplID := '***';
                                     SETRANGE("Applies-to ID",VendEntryApplID);
                                   END
                                 ELSE
                                   SETRANGE("Applies-to ID");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 70  ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 73  ;2   ;Field     ;
                CaptionML=[ENU=Posting Date;
                           ENG=Posting Date];
                ToolTipML=[ENU=Specifies the posting date of the entry to be applied.;
                           ENG=Specifies the posting date of the entry to be applied.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingVendLedgEntry."Posting Date";
                Editable=FALSE }

    { 75  ;2   ;Field     ;
                CaptionML=[ENU=Document Type;
                           ENG=Document Type];
                ToolTipML=[ENU=Specifies the document type of the entry to be applied.;
                           ENG=Specifies the document type of the entry to be applied.];
                OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                 ENG=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingVendLedgEntry."Document Type";
                Editable=FALSE }

    { 77  ;2   ;Field     ;
                CaptionML=[ENU=Document No.;
                           ENG=Document No.];
                ToolTipML=[ENU=Specifies the document number of the entry to be applied.;
                           ENG=Specifies the document number of the entry to be applied.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingVendLedgEntry."Document No.";
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                Name=ApplyingVendorNo;
                CaptionML=[ENU=Vendor No.;
                           ENG=Vendor No.];
                ToolTipML=[ENU=Specifies the vendor number of the entry to be applied.;
                           ENG=Specifies the vendor number of the entry to be applied.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingVendLedgEntry."Vendor No.";
                Visible=FALSE;
                Editable=FALSE }

    { 85  ;2   ;Field     ;
                Name=ApplyingDescription;
                CaptionML=[ENU=Description;
                           ENG=Description];
                ToolTipML=[ENU=Specifies the description of the entry to be applied.;
                           ENG=Specifies the description of the entry to be applied.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingVendLedgEntry.Description;
                Visible=FALSE;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                CaptionML=[ENU=Currency Code;
                           ENG=Currency Code];
                ToolTipML=[ENU=Specifies the code for the currency that amounts are shown in.;
                           ENG=Specifies the code for the currency that amounts are shown in.];
                ApplicationArea=#Suite;
                SourceExpr=ApplyingVendLedgEntry."Currency Code";
                Editable=FALSE }

    { 81  ;2   ;Field     ;
                CaptionML=[ENU=Amount;
                           ENG=Amount];
                ToolTipML=[ENU=Specifies the amount on the entry to be applied.;
                           ENG=Specifies the amount on the entry to be applied.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingVendLedgEntry.Amount;
                Editable=FALSE }

    { 83  ;2   ;Field     ;
                CaptionML=[ENU=Remaining Amount;
                           ENG=Remaining Amount];
                ToolTipML=[ENU=Specifies the amount on the entry to be applied.;
                           ENG=Specifies the amount on the entry to be applied.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingVendLedgEntry."Remaining Amount";
                Editable=FALSE }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                Name=AppliesToID;
                ToolTipML=[ENU=Specifies the ID of entries that will be applied to when you choose the Apply Entries action.;
                           ENG=Specifies the ID of entries that will be applied to when you choose the Apply Entries action.];
                ApplicationArea=#All;
                SourceExpr="Applies-to ID";
                Visible=AppliesToIDVisible;
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE);
                           END;
                            }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor entry's posting date.;
                           ENG=Specifies the vendor entry's posting date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date";
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the document type that the vendor entry belongs to.;
                           ENG=Specifies the document type that the vendor entry belongs to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor entry's document number.;
                           ENG=Specifies the vendor entry's document number.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No.";
                Editable=FALSE;
                StyleExpr=StyleTxt }

    { 1000000001;2;Field  ;
                SourceExpr="Document Date" }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a document number that refers to the customer's or vendor's numbering system.;
                           ENG=Specifies a document number that refers to the customer's or vendor's numbering system.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="External Document No." }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the vendor account that the entry is linked to.;
                           ENG=Specifies the number of the vendor account that the entry is linked to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Vendor No.";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the vendor entry.;
                           ENG=Specifies a description of the vendor entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Editable=FALSE }

    { 39  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code for the amount on the line.;
                           ENG=Specifies the currency code for the amount on the line.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code" }

    { 61  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the original entry.;
                           ENG=Specifies the amount of the original entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Original Amount";
                Visible=FALSE;
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the entry.;
                           ENG=Specifies the amount of the entry.];
                ApplicationArea=#Advanced;
                SourceExpr=Amount;
                Visible=FALSE;
                Editable=FALSE }

    { 19  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits.;
                           ENG=Specifies the total of the ledger entries that represent debits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=FALSE }

    { 21  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits.;
                           ENG=Specifies the total of the ledger entries that represent credits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=FALSE }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that remains to be applied to before the entry is totally applied to.;
                           ENG=Specifies the amount that remains to be applied to before the entry is totally applied to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Amount";
                Editable=FALSE }

    { 33  ;2   ;Field     ;
                CaptionML=[ENU=Appln. Remaining Amount;
                           ENG=Appln. Remaining Amount];
                ToolTipML=[ENU=Specifies the amount that remains to be applied to before the entry is totally applied to.;
                           ENG=Specifies the amount that remains to be applied to before the entry is totally applied to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CalcApplnRemainingAmount("Remaining Amount");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 90  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount to apply.;
                           ENG=Specifies the amount to apply.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Amount to Apply";
                OnValidate=BEGIN
                             CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);

                             IF (xRec."Amount to Apply" = 0) OR ("Amount to Apply" = 0) AND
                                ((ApplnType = ApplnType::"Applies-to ID") OR (CalcType = CalcType::Direct))
                             THEN
                               SetVendApplId;
                             GET("Entry No.");
                             AmounttoApplyOnAfterValidate;
                           END;
                            }

    { 92  ;2   ;Field     ;
                CaptionML=[ENU=Appln. Amount to Apply;
                           ENG=Appln. Amount to Apply];
                ToolTipML=[ENU=Specifies the amount to apply.;
                           ENG=Specifies the amount to apply.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CalcApplnAmounttoApply("Amount to Apply");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the due date on the entry.;
                           ENG=Specifies the due date on the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Due Date";
                StyleExpr=StyleTxt }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.;
                           ENG=Specifies the date on which the amount in the entry must be paid for a payment discount to be granted.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pmt. Discount Date";
                OnValidate=BEGIN
                             RecalcApplnAmount;
                           END;
                            }

    { 66  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the latest date the amount in the entry must be paid in order for payment discount tolerance to be granted.;
                           ENG=Specifies the latest date the amount in the entry must be paid in order for payment discount tolerance to be granted.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Pmt. Disc. Tolerance Date" }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment of the purchase invoice.;
                           ENG=Specifies the payment of the purchase invoice.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Reference" }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the discount that you can obtain if the entry is applied to before the payment discount date.;
                           ENG=Specifies the discount that you can obtain if the entry is applied to before the payment discount date.];
                ApplicationArea=#Advanced;
                SourceExpr="Original Pmt. Disc. Possible";
                Visible=FALSE }

    { 64  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the remaining payment discount which can be received if the payment is made before the payment discount date.;
                           ENG=Specifies the remaining payment discount which can be received if the payment is made before the payment discount date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Remaining Pmt. Disc. Possible";
                OnValidate=BEGIN
                             RecalcApplnAmount;
                           END;
                            }

    { 51  ;2   ;Field     ;
                CaptionML=[ENU=Appln. Pmt. Disc. Possible;
                           ENG=Appln. Pmt. Disc. Possible];
                ToolTipML=[ENU=Specifies the discount that you can obtain if the entry is applied to before the payment discount date.;
                           ENG=Specifies the discount that you can obtain if the entry is applied to before the payment discount date.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CalcApplnRemainingAmount("Remaining Pmt. Disc. Possible");
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode }

    { 68  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the maximum tolerated amount the entry can differ from the amount on the invoice or credit memo.;
                           ENG=Specifies the maximum tolerated amount the entry can differ from the amount on the invoice or credit memo.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Max. Payment Tolerance" }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the amount on the entry has been fully paid or there is still a remaining amount that must be applied to.;
                           ENG=Specifies whether the amount on the entry has been fully paid or there is still a remaining amount that must be applied to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Open;
                Editable=FALSE }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the entry to be applied is positive.;
                           ENG=Specifies if the entry to be applied is positive.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Positive;
                Editable=FALSE }

    { 56  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 1 Code" }

    { 1000000000;2;Field  ;
                SourceExpr="On Hold" }

    { 59  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                           ENG=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.];
                ApplicationArea=#Suite;
                SourceExpr="Global Dimension 2 Code" }

    { 41  ;1   ;Group      }

    { 1903222401;2;Group  ;
                GroupType=FixedLayout }

    { 1903866701;3;Group  ;
                CaptionML=[ENU=Appln. Currency;
                           ENG=Appln. Currency] }

    { 49  ;4   ;Field     ;
                ToolTipML=[ENU=Specifies the currency code that the amount will be applied in, in case of different currencies.;
                           ENG=Specifies the currency code that the amount will be applied in, in case of different currencies.];
                ApplicationArea=#Suite;
                SourceExpr=ApplnCurrencyCode;
                TableRelation=Currency;
                Editable=FALSE;
                ShowCaption=No }

    { 1900545201;3;Group  ;
                CaptionML=[ENU=Amount to Apply;
                           ENG=Amount to Apply] }

    { 45  ;4   ;Field     ;
                Name=AmountToApply;
                CaptionML=[ENU=Amount to Apply;
                           ENG=Amount to Apply];
                ToolTipML=[ENU=Specifies the sum of the amounts on all the selected vendor ledger entries that will be applied by the entry shown in the Available Amount field. The amount is in the currency represented by the code in the Currency Code field.;
                           ENG=Specifies the sum of the amounts on all the selected vendor ledger entries that will be applied by the entry shown in the Available Amount field. The amount is in the currency represented by the code in the Currency Code field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AppliedAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1903099901;3;Group  ;
                CaptionML=[ENU=Pmt. Disc. Amount;
                           ENG=Pmt. Disc. Amount] }

    { 94  ;4   ;Field     ;
                Name=PmtDiscAmount;
                CaptionML=[ENU=Pmt. Disc. Amount;
                           ENG=Pmt. Disc. Amount];
                ToolTipML=[ENU=Specifies the sum of the payment discount amounts granted on all the selected vendor ledger entries that will be applied by the entry shown in the Available Amount field. The amount is in the currency represented by the code in the Currency Code field.;
                           ENG=Specifies the sum of the payment discount amounts granted on all the selected vendor ledger entries that will be applied by the entry shown in the Available Amount field. The amount is in the currency represented by the code in the Currency Code field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=-PmtDiscAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901652301;3;Group  ;
                CaptionML=[ENU=Rounding;
                           ENG=Rounding] }

    { 53  ;4   ;Field     ;
                CaptionML=[ENU=Rounding;
                           ENG=Rounding];
                ToolTipML=[ENU=Specifies the rounding difference when you apply entries in different currencies to one another. The amount is in the currency represented by the code in the Currency Code field.;
                           ENG=Specifies the rounding difference when you apply entries in different currencies to one another. The amount is in the currency represented by the code in the Currency Code field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901992701;3;Group  ;
                CaptionML=[ENU=Applied Amount;
                           ENG=Applied Amount] }

    { 98  ;4   ;Field     ;
                Name=AppliedAmount;
                CaptionML=[ENU=Applied Amount;
                           ENG=Applied Amount];
                ToolTipML=[ENU=Specifies the sum of the amounts in the Amount to Apply field, Pmt. Disc. Amount field, and the Rounding. The amount is in the currency represented by the code in the Currency Code field.;
                           ENG=Specifies the sum of the amounts in the Amount to Apply field, Pmt. Disc. Amount field, and the Rounding. The amount is in the currency represented by the code in the Currency Code field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1900295601;3;Group  ;
                CaptionML=[ENU=Available Amount;
                           ENG=Available Amount] }

    { 47  ;4   ;Field     ;
                CaptionML=[ENU=Available Amount;
                           ENG=Available Amount];
                ToolTipML=[ENU=Specifies the amount of the journal entry, purchase credit memo, or current vendor ledger entry that you have selected as the applying entry.;
                           ENG=Specifies the amount of the journal entry, purchase credit memo, or current vendor ledger entry that you have selected as the applying entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ApplyingAmount;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

    { 1901652401;3;Group  ;
                CaptionML=[ENU=Balance;
                           ENG=Balance] }

    { 43  ;4   ;Field     ;
                Name=ControlBalance;
                CaptionML=[ENU=Balance;
                           ENG=Balance];
                ToolTipML=[ENU=Specifies any extra amount that will remain after the application.;
                           ENG=Specifies any extra amount that will remain after the application.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AppliedAmount + (-PmtDiscAmount) + ApplyingAmount + ApplnRounding;
                AutoFormatType=1;
                AutoFormatExpr=ApplnCurrencyCode;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      ApplyingVendLedgEntry@1033 : TEMPORARY Record 25;
      AppliedVendLedgEntry@1001 : Record 25;
      Currency@1002 : Record 4;
      CurrExchRate@1003 : Record 330;
      GenJnlLine@1004 : Record 81;
      GenJnlLine2@1005 : Record 81;
      PurchHeader@1006 : Record 38;
      Vend@1007 : Record 23;
      VendLedgEntry@1008 : Record 25;
      GLSetup@1009 : Record 98;
      TotalPurchLine@1010 : Record 39;
      TotalPurchLineLCY@1011 : Record 39;
      VendEntrySetApplID@1013 : Codeunit 111;
      GenJnlApply@1014 : Codeunit 225;
      PurchPost@1015 : Codeunit 90;
      PaymentToleranceMgt@1037 : Codeunit 426;
      Navigate@1012 : Page 344;
      GenJnlLineApply@1016 : Boolean;
      AppliedAmount@1017 : Decimal;
      ApplyingAmount@1018 : Decimal;
      PmtDiscAmount@1040 : Decimal;
      ApplnDate@1019 : Date;
      ApplnCurrencyCode@1020 : Code[10];
      ApplnRoundingPrecision@1021 : Decimal;
      ApplnRounding@1022 : Decimal;
      ApplnType@1023 : ' ,Applies-to Doc. No.,Applies-to ID';
      AmountRoundingPrecision@1024 : Decimal;
      VATAmount@1025 : Decimal;
      VATAmountText@1026 : Text[30];
      StyleTxt@1031 : Text;
      CalcType@1027 : 'Direct,GenJnlLine,PurchHeader';
      VendEntryApplID@1029 : Code[50];
      AppliesToID@1042 : Code[50];
      ValidExchRate@1030 : Boolean;
      DifferentCurrenciesInAppln@1032 : Boolean;
      Text002@1036 : TextConst 'ENU=You must select an applying entry before you can post the application.;ENG=You must select an applying entry before you can post the application.';
      Text003@1035 : TextConst 'ENU=You must post the application from the window where you entered the applying entry.;ENG=You must post the application from the window where you entered the applying entry.';
      CannotSetAppliesToIDErr@1038 : TextConst 'ENU=You cannot set Applies-to ID while selecting Applies-to Doc. No.;ENG=You cannot set Applies-to ID while selecting Applies-to Doc. No.';
      ShowAppliedEntries@1039 : Boolean;
      OK@1028 : Boolean;
      EarlierPostingDateErr@1034 : TextConst 'ENU=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.;ENG=You cannot apply and post an entry to an entry with an earlier posting date.\\Instead, post the document of type %1 with the number %2 and then apply it to the document of type %3 with the number %4.';
      PostingDone@1000 : Boolean;
      AppliesToIDVisible@19043506 : Boolean INDATASET;
      ActionPerformed@1104 : Boolean;
      Text012@1043 : TextConst 'ENU=The application was successfully posted.;ENG=The application was successfully posted.';
      Text013@1044 : TextConst 'ENU=The %1 entered must not be before the %1 on the %2.;ENG=The %1 entered must not be before the %1 on the %2.';
      Text019@1045 : TextConst 'ENU=Post application process has been canceled.;ENG=Post application process has been cancelled.';
      IsOfficeAddin@1041 : Boolean;

    [Internal]
    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81;ApplnTypeSelect@1001 : Integer);
    BEGIN
      GenJnlLine := NewGenJnlLine;
      GenJnlLineApply := TRUE;

      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN
        ApplyingAmount := GenJnlLine.Amount;
      IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor THEN
        ApplyingAmount := -GenJnlLine.Amount;
      ApplnDate := GenJnlLine."Posting Date";
      ApplnCurrencyCode := GenJnlLine."Currency Code";
      CalcType := CalcType::GenJnlLine;

      CASE ApplnTypeSelect OF
        GenJnlLine.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        GenJnlLine.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      END;

      SetApplyingVendLedgEntry;
    END;

    [Internal]
    PROCEDURE SetPurch@2(NewPurchHeader@1000 : Record 38;VAR NewVendLedgEntry@1001 : Record 25;ApplnTypeSelect@1002 : Integer);
    BEGIN
      PurchHeader := NewPurchHeader;
      COPYFILTERS(NewVendLedgEntry);

      PurchPost.SumPurchLines(
        PurchHeader,0,TotalPurchLine,TotalPurchLineLCY,
        VATAmount,VATAmountText);

      CASE PurchHeader."Document Type" OF
        PurchHeader."Document Type"::"Return Order",
        PurchHeader."Document Type"::"Credit Memo":
          ApplyingAmount := TotalPurchLine."Amount Including VAT"
        ELSE
          ApplyingAmount := -TotalPurchLine."Amount Including VAT";
      END;

      ApplnDate := PurchHeader."Posting Date";
      ApplnCurrencyCode := PurchHeader."Currency Code";
      CalcType := CalcType::PurchHeader;

      CASE ApplnTypeSelect OF
        PurchHeader.FIELDNO("Applies-to Doc. No."):
          ApplnType := ApplnType::"Applies-to Doc. No.";
        PurchHeader.FIELDNO("Applies-to ID"):
          ApplnType := ApplnType::"Applies-to ID";
      END;

      SetApplyingVendLedgEntry;
    END;

    [External]
    PROCEDURE SetVendLedgEntry@13(NewVendLedgEntry@1000 : Record 25);
    BEGIN
      Rec := NewVendLedgEntry;
    END;

    [Internal]
    PROCEDURE SetApplyingVendLedgEntry@9();
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      CASE CalcType OF
        CalcType::PurchHeader:
          BEGIN
            ApplyingVendLedgEntry."Posting Date" := PurchHeader."Posting Date";
            IF PurchHeader."Document Type" = PurchHeader."Document Type"::"Return Order" THEN
              ApplyingVendLedgEntry."Document Type" := PurchHeader."Document Type"::"Credit Memo"
            ELSE
              ApplyingVendLedgEntry."Document Type" := PurchHeader."Document Type";
            ApplyingVendLedgEntry."Document No." := PurchHeader."No.";
            ApplyingVendLedgEntry."Vendor No." := PurchHeader."Pay-to Vendor No.";
            ApplyingVendLedgEntry.Description := PurchHeader."Posting Description";
            ApplyingVendLedgEntry."Currency Code" := PurchHeader."Currency Code";
            IF ApplyingVendLedgEntry."Document Type" = ApplyingVendLedgEntry."Document Type"::"Credit Memo" THEN  BEGIN
              ApplyingVendLedgEntry.Amount := TotalPurchLine."Amount Including VAT";
              ApplyingVendLedgEntry."Remaining Amount" := TotalPurchLine."Amount Including VAT";
            END ELSE BEGIN
              ApplyingVendLedgEntry.Amount := -TotalPurchLine."Amount Including VAT";
              ApplyingVendLedgEntry."Remaining Amount" := -TotalPurchLine."Amount Including VAT";
            END;
            CalcApplnAmount;
          END;
        CalcType::Direct:
          BEGIN
            IF "Applying Entry" THEN BEGIN
              IF ApplyingVendLedgEntry."Entry No." <> 0 THEN
                VendLedgEntry := ApplyingVendLedgEntry;
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",Rec);
              IF "Applies-to ID" = '' THEN
                SetVendApplId;
              CALCFIELDS(Amount);
              ApplyingVendLedgEntry := Rec;
              IF VendLedgEntry."Entry No." <> 0 THEN BEGIN
                Rec := VendLedgEntry;
                "Applying Entry" := FALSE;
                SetVendApplId;
              END;
              SETFILTER("Entry No.",'<> %1',ApplyingVendLedgEntry."Entry No.");
              ApplyingAmount := ApplyingVendLedgEntry."Remaining Amount";
              ApplnDate := ApplyingVendLedgEntry."Posting Date";
              ApplnCurrencyCode := ApplyingVendLedgEntry."Currency Code";
            END;
            CalcApplnAmount;
          END;
        CalcType::GenJnlLine:
          BEGIN
            ApplyingVendLedgEntry."Posting Date" := GenJnlLine."Posting Date";
            ApplyingVendLedgEntry."Document Type" := GenJnlLine."Document Type";
            ApplyingVendLedgEntry."Document No." := GenJnlLine."Document No.";
            IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor THEN BEGIN
              ApplyingVendLedgEntry."Vendor No." := GenJnlLine."Bal. Account No.";
              Vendor.GET(ApplyingVendLedgEntry."Vendor No.");
              ApplyingVendLedgEntry.Description := Vendor.Name;
            END ELSE BEGIN
              ApplyingVendLedgEntry."Vendor No." := GenJnlLine."Account No.";
              ApplyingVendLedgEntry.Description := GenJnlLine.Description;
            END;
            ApplyingVendLedgEntry."Currency Code" := GenJnlLine."Currency Code";
            ApplyingVendLedgEntry.Amount := GenJnlLine.Amount;
            ApplyingVendLedgEntry."Remaining Amount" := GenJnlLine.Amount;
            CalcApplnAmount;
          END;
      END;
    END;

    [Internal]
    PROCEDURE SetVendApplId@10();
    BEGIN
      IF (CalcType = CalcType::GenJnlLine) AND (ApplyingVendLedgEntry."Posting Date" < "Posting Date") THEN
        ERROR(
          EarlierPostingDateErr,ApplyingVendLedgEntry."Document Type",ApplyingVendLedgEntry."Document No.",
          "Document Type","Document No.");

      IF ApplyingVendLedgEntry."Entry No." <> 0 THEN
        GenJnlApply.CheckAgainstApplnCurrency(
          ApplnCurrencyCode,"Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);

      VendLedgEntry.COPY(Rec);
      CurrPage.SETSELECTIONFILTER(VendLedgEntry);
      IF GenJnlLineApply THEN
        VendEntrySetApplID.SetApplId(VendLedgEntry,ApplyingVendLedgEntry,GenJnlLine."Applies-to ID")
      ELSE
        VendEntrySetApplID.SetApplId(VendLedgEntry,ApplyingVendLedgEntry,PurchHeader."Applies-to ID");

      ActionPerformed := VendLedgEntry."Applies-to ID" <> '';
      CalcApplnAmount;
    END;

    LOCAL PROCEDURE CalcApplnAmount@7();
    BEGIN
      AppliedAmount := 0;
      PmtDiscAmount := 0;
      DifferentCurrenciesInAppln := FALSE;

      CASE CalcType OF
        CalcType::Direct:
          BEGIN
            FindAmountRounding;
            VendEntryApplID := USERID;
            IF VendEntryApplID = '' THEN
              VendEntryApplID := '***';

            VendLedgEntry := ApplyingVendLedgEntry;

            AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
            AppliedVendLedgEntry.SETRANGE("Vendor No.","Vendor No.");
            AppliedVendLedgEntry.SETRANGE(Open,TRUE);
            IF AppliesToID = '' THEN
              AppliedVendLedgEntry.SETRANGE("Applies-to ID",VendEntryApplID)
            ELSE
              AppliedVendLedgEntry.SETRANGE("Applies-to ID",AppliesToID);

            IF ApplyingVendLedgEntry."Entry No." <> 0 THEN BEGIN
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              AppliedVendLedgEntry.SETFILTER("Entry No.",'<>%1',VendLedgEntry."Entry No.");
            END;

            HandlChosenEntries(0,
              VendLedgEntry."Remaining Amount",
              VendLedgEntry."Currency Code",
              VendLedgEntry."Posting Date");
          END;
        CalcType::GenJnlLine:
          BEGIN
            FindAmountRounding;
            IF GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor THEN
              CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);

            CASE ApplnType OF
              ApplnType::"Applies-to Doc. No.":
                BEGIN
                  AppliedVendLedgEntry := Rec;
                  WITH AppliedVendLedgEntry DO BEGIN
                    CALCFIELDS("Remaining Amount");
                    IF "Currency Code" <> ApplnCurrencyCode THEN BEGIN
                      "Remaining Amount" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");
                      "Remaining Pmt. Disc. Possible" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Pmt. Disc. Possible");
                      "Amount to Apply" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Amount to Apply");
                    END;

                    IF "Amount to Apply" <> 0 THEN
                      AppliedAmount := ROUND("Amount to Apply",AmountRoundingPrecision)
                    ELSE
                      AppliedAmount := ROUND("Remaining Amount",AmountRoundingPrecision);

                    IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(
                         GenJnlLine,AppliedVendLedgEntry,0,FALSE) AND
                       ((ABS(GenJnlLine.Amount) + ApplnRoundingPrecision >=
                         ABS(AppliedAmount - "Remaining Pmt. Disc. Possible")) OR
                        (GenJnlLine.Amount = 0))
                    THEN
                      PmtDiscAmount := "Remaining Pmt. Disc. Possible";

                    IF NOT DifferentCurrenciesInAppln THEN
                      DifferentCurrenciesInAppln := ApplnCurrencyCode <> "Currency Code";
                  END;
                  CheckRounding;
                END;
              ApplnType::"Applies-to ID":
                BEGIN
                  GenJnlLine2 := GenJnlLine;
                  AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                  AppliedVendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
                  AppliedVendLedgEntry.SETRANGE(Open,TRUE);
                  AppliedVendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");

                  HandlChosenEntries(1,
                    GenJnlLine2.Amount,
                    GenJnlLine2."Currency Code",
                    GenJnlLine2."Posting Date");
                END;
            END;
          END;
        CalcType::PurchHeader:
          BEGIN
            FindAmountRounding;

            CASE ApplnType OF
              ApplnType::"Applies-to Doc. No.":
                BEGIN
                  AppliedVendLedgEntry := Rec;
                  WITH AppliedVendLedgEntry DO BEGIN
                    CALCFIELDS("Remaining Amount");

                    IF "Currency Code" <> ApplnCurrencyCode THEN
                      "Remaining Amount" :=
                        CurrExchRate.ExchangeAmtFCYToFCY(
                          ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");

                    AppliedAmount := AppliedAmount + ROUND("Remaining Amount",AmountRoundingPrecision);

                    IF NOT DifferentCurrenciesInAppln THEN
                      DifferentCurrenciesInAppln := ApplnCurrencyCode <> "Currency Code";
                  END;
                  CheckRounding;
                END;
              ApplnType::"Applies-to ID":
                WITH VendLedgEntry DO BEGIN
                  AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                  AppliedVendLedgEntry.SETRANGE("Vendor No.",PurchHeader."Pay-to Vendor No.");
                  AppliedVendLedgEntry.SETRANGE(Open,TRUE);
                  AppliedVendLedgEntry.SETRANGE("Applies-to ID",PurchHeader."Applies-to ID");

                  HandlChosenEntries(2,
                    ApplyingAmount,
                    ApplnCurrencyCode,
                    ApplnDate);
                END;
            END;
          END;
      END;
    END;

    LOCAL PROCEDURE CalcApplnRemainingAmount@4(Amount@1000 : Decimal) : Decimal;
    VAR
      ApplnRemainingAmount@1001 : Decimal;
    BEGIN
      ValidExchRate := TRUE;
      IF ApplnCurrencyCode = "Currency Code" THEN
        EXIT(Amount);

      IF ApplnDate = 0D THEN
        ApplnDate := "Posting Date";
      ApplnRemainingAmount :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,Amount,ValidExchRate);
      EXIT(ApplnRemainingAmount);
    END;

    LOCAL PROCEDURE CalcApplnAmounttoApply@11(AmounttoApply@1000 : Decimal) : Decimal;
    VAR
      ApplnAmountToApply@1001 : Decimal;
    BEGIN
      ValidExchRate := TRUE;

      IF ApplnCurrencyCode = "Currency Code" THEN
        EXIT(AmounttoApply);

      IF ApplnDate = 0D THEN
        ApplnDate := "Posting Date";
      ApplnAmountToApply :=
        CurrExchRate.ApplnExchangeAmtFCYToFCY(
          ApplnDate,"Currency Code",ApplnCurrencyCode,AmounttoApply,ValidExchRate);
      EXIT(ApplnAmountToApply);
    END;

    LOCAL PROCEDURE FindAmountRounding@6();
    BEGIN
      IF ApplnCurrencyCode = '' THEN BEGIN
        Currency.INIT;
        Currency.Code := '';
        Currency.InitRoundingPrecision;
      END ELSE
        IF ApplnCurrencyCode <> Currency.Code THEN
          Currency.GET(ApplnCurrencyCode);

      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    LOCAL PROCEDURE CheckRounding@3();
    BEGIN
      ApplnRounding := 0;

      CASE CalcType OF
        CalcType::PurchHeader:
          EXIT;
        CalcType::GenJnlLine:
          IF (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Payment) AND
             (GenJnlLine."Document Type" <> GenJnlLine."Document Type"::Refund)
          THEN
            EXIT;
      END;

      IF ApplnCurrencyCode = '' THEN
        ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision"
      ELSE BEGIN
        IF ApplnCurrencyCode <> "Currency Code" THEN
          Currency.GET(ApplnCurrencyCode);
        ApplnRoundingPrecision := Currency."Appln. Rounding Precision";
      END;

      IF (ABS((AppliedAmount - PmtDiscAmount) + ApplyingAmount) <= ApplnRoundingPrecision) AND DifferentCurrenciesInAppln THEN
        ApplnRounding := -((AppliedAmount - PmtDiscAmount) + ApplyingAmount);
    END;

    [External]
    PROCEDURE GetVendLedgEntry@5(VAR VendLedgEntry@1000 : Record 25);
    BEGIN
      VendLedgEntry := Rec;
    END;

    LOCAL PROCEDURE FindApplyingEntry@12();
    BEGIN
      IF CalcType = CalcType::Direct THEN BEGIN
        VendEntryApplID := USERID;
        IF VendEntryApplID = '' THEN
          VendEntryApplID := '***';

        VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
        VendLedgEntry.SETRANGE("Vendor No.","Vendor No.");
        IF AppliesToID = '' THEN
          VendLedgEntry.SETRANGE("Applies-to ID",VendEntryApplID)
        ELSE
          VendLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
        VendLedgEntry.SETRANGE(Open,TRUE);
        VendLedgEntry.SETRANGE("Applying Entry",TRUE);
        IF VendLedgEntry.FINDFIRST THEN BEGIN
          VendLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
          ApplyingVendLedgEntry := VendLedgEntry;
          SETFILTER("Entry No.",'<>%1',VendLedgEntry."Entry No.");
          ApplyingAmount := VendLedgEntry."Remaining Amount";
          ApplnDate := VendLedgEntry."Posting Date";
          ApplnCurrencyCode := VendLedgEntry."Currency Code";
        END;
        CalcApplnAmount;
      END;
    END;

    LOCAL PROCEDURE HandlChosenEntries@8(Type@1000 : 'Direct,GenJnlLine,PurchHeader';CurrentAmount@1001 : Decimal;CurrencyCode@1002 : Code[10];PostingDate@1003 : Date);
    VAR
      AppliedVendLedgEntryTemp@1004 : TEMPORARY Record 25;
      PossiblePmtdisc@1007 : Decimal;
      OldPmtdisc@1008 : Decimal;
      CorrectionAmount@1009 : Decimal;
      RemainingAmountExclDiscounts@1012 : Decimal;
      CanUseDisc@1005 : Boolean;
      FromZeroGenJnl@1010 : Boolean;
    BEGIN
      IF AppliedVendLedgEntry.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          AppliedVendLedgEntryTemp := AppliedVendLedgEntry;
          AppliedVendLedgEntryTemp.INSERT;
        UNTIL AppliedVendLedgEntry.NEXT = 0;
      END ELSE
        EXIT;

      FromZeroGenJnl := (CurrentAmount = 0) AND (Type = Type::GenJnlLine);

      REPEAT
        IF NOT FromZeroGenJnl THEN
          AppliedVendLedgEntryTemp.SETRANGE(Positive,CurrentAmount < 0);
        IF AppliedVendLedgEntryTemp.FINDFIRST THEN BEGIN
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedVendLedgEntryTemp,PostingDate);

          CASE Type OF
            Type::Direct:
              CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscVend(VendLedgEntry,AppliedVendLedgEntryTemp,0,FALSE,FALSE);
            Type::GenJnlLine:
              CanUseDisc := PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine2,AppliedVendLedgEntryTemp,0,FALSE)
            ELSE
              CanUseDisc := FALSE;
          END;

          IF CanUseDisc AND
             (ABS(AppliedVendLedgEntryTemp."Amount to Apply") >= ABS(AppliedVendLedgEntryTemp."Remaining Amount" -
                AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible"))
          THEN BEGIN
            IF (ABS(CurrentAmount) > ABS(AppliedVendLedgEntryTemp."Remaining Amount" -
                  AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible"))
            THEN BEGIN
              PmtDiscAmount := PmtDiscAmount + AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
              CurrentAmount := CurrentAmount + AppliedVendLedgEntryTemp."Remaining Amount" -
                AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
            END ELSE
              IF (ABS(CurrentAmount) = ABS(AppliedVendLedgEntryTemp."Remaining Amount" -
                    AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible"))
              THEN BEGIN
                PmtDiscAmount := PmtDiscAmount + AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible" ;
                CurrentAmount := CurrentAmount + AppliedVendLedgEntryTemp."Remaining Amount" -
                  AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                AppliedAmount := AppliedAmount + CorrectionAmount;
              END ELSE
                IF FromZeroGenJnl THEN BEGIN
                  PmtDiscAmount := PmtDiscAmount + AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  CurrentAmount := CurrentAmount +
                    AppliedVendLedgEntryTemp."Remaining Amount" - AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                END ELSE BEGIN
                  PossiblePmtdisc := AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                  RemainingAmountExclDiscounts := AppliedVendLedgEntryTemp."Remaining Amount" - PossiblePmtdisc -
                    AppliedVendLedgEntryTemp."Max. Payment Tolerance";
                  IF ABS(CurrentAmount) + ABS(CalcOppositeEntriesAmount(AppliedVendLedgEntryTemp)) >= ABS(RemainingAmountExclDiscounts)
                  THEN BEGIN
                    PmtDiscAmount := PmtDiscAmount + PossiblePmtdisc;
                    AppliedAmount := AppliedAmount + CorrectionAmount;
                  END;
                  CurrentAmount := CurrentAmount + AppliedVendLedgEntryTemp."Remaining Amount" -
                    AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                END;
          END ELSE BEGIN
            IF ((CurrentAmount + AppliedVendLedgEntryTemp."Amount to Apply") * CurrentAmount) >= 0 THEN
              AppliedAmount := AppliedAmount + CorrectionAmount;
            CurrentAmount := CurrentAmount + AppliedVendLedgEntryTemp."Amount to Apply";
          END;
        END ELSE BEGIN
          AppliedVendLedgEntryTemp.SETRANGE(Positive);
          AppliedVendLedgEntryTemp.FINDFIRST;
          ExchangeAmountsOnLedgerEntry(Type,CurrencyCode,AppliedVendLedgEntryTemp,PostingDate);
        END;

        IF OldPmtdisc <> PmtDiscAmount THEN
          AppliedAmount := AppliedAmount + AppliedVendLedgEntryTemp."Remaining Amount"
        ELSE
          AppliedAmount := AppliedAmount + AppliedVendLedgEntryTemp."Amount to Apply";
        OldPmtdisc := PmtDiscAmount;

        IF PossiblePmtdisc <> 0 THEN
          CorrectionAmount := AppliedVendLedgEntryTemp."Remaining Amount" - AppliedVendLedgEntryTemp."Amount to Apply"
        ELSE
          CorrectionAmount := 0;

        IF NOT DifferentCurrenciesInAppln THEN
          DifferentCurrenciesInAppln := ApplnCurrencyCode <> AppliedVendLedgEntryTemp."Currency Code";

        AppliedVendLedgEntryTemp.DELETE;
        AppliedVendLedgEntryTemp.SETRANGE(Positive);

      UNTIL NOT AppliedVendLedgEntryTemp.FINDFIRST;
      CheckRounding;
    END;

    LOCAL PROCEDURE AmounttoApplyOnAfterValidate@19038179();
    BEGIN
      IF ApplnType <> ApplnType::"Applies-to Doc. No." THEN BEGIN
        CalcApplnAmount;
        CurrPage.UPDATE(FALSE);
      END;
    END;

    LOCAL PROCEDURE RecalcApplnAmount@19051222();
    BEGIN
      CurrPage.UPDATE(TRUE);
      CalcApplnAmount;
    END;

    LOCAL PROCEDURE LookupOKOnPush@19031339();
    BEGIN
      OK := TRUE;
    END;

    LOCAL PROCEDURE PostDirectApplication@15(PreviewMode@1005 : Boolean);
    VAR
      VendEntryApplyPostedEntries@1000 : Codeunit 227;
      PostApplication@1002 : Page 579;
      Applied@1006 : Boolean;
      ApplicationDate@1001 : Date;
      NewApplicationDate@1003 : Date;
      NewDocumentNo@1004 : Code[20];
    BEGIN
      IF CalcType = CalcType::Direct THEN BEGIN
        IF ApplyingVendLedgEntry."Entry No." <> 0 THEN BEGIN
          Rec := ApplyingVendLedgEntry;
          ApplicationDate := VendEntryApplyPostedEntries.GetApplicationDate(Rec);

          PostApplication.SetValues("Document No.",ApplicationDate);
          IF ACTION::OK = PostApplication.RUNMODAL THEN BEGIN
            PostApplication.GetValues(NewDocumentNo,NewApplicationDate);
            IF NewApplicationDate < ApplicationDate THEN
              ERROR(Text013,FIELDCAPTION("Posting Date"),TABLECAPTION);
          END ELSE
            ERROR(Text019);

          IF PreviewMode THEN
            VendEntryApplyPostedEntries.PreviewApply(Rec,NewDocumentNo,NewApplicationDate)
          ELSE
            Applied := VendEntryApplyPostedEntries.Apply(Rec,NewDocumentNo,NewApplicationDate);

          IF (NOT PreviewMode) AND Applied THEN BEGIN
            MESSAGE(Text012);
            PostingDone := TRUE;
            CurrPage.CLOSE;
          END;
        END ELSE
          ERROR(Text002);
      END ELSE
        ERROR(Text003);
    END;

    LOCAL PROCEDURE CheckActionPerformed@1011() : Boolean;
    BEGIN
      IF ActionPerformed THEN
        EXIT(FALSE);
      IF (NOT (CalcType = CalcType::Direct) AND NOT OK AND NOT PostingDone) OR
         (ApplnType = ApplnType::"Applies-to Doc. No.")
      THEN
        EXIT(FALSE);
      EXIT((CalcType = CalcType::Direct) AND NOT OK AND NOT PostingDone);
    END;

    [External]
    PROCEDURE SetAppliesToID@1031(AppliesToID2@1043 : Code[50]);
    BEGIN
      AppliesToID := AppliesToID2;
    END;

    LOCAL PROCEDURE ExchangeAmountsOnLedgerEntry@14(Type@1000 : 'Direct,GenJnlLine,PurchHeader';CurrencyCode@1001 : Code[10];VAR CalcVendLedgEntry@1002 : Record 25;PostingDate@1004 : Date);
    VAR
      CalculateCurrency@1003 : Boolean;
    BEGIN
      CalcVendLedgEntry.CALCFIELDS("Remaining Amount");

      IF Type = Type::Direct THEN
        CalculateCurrency := ApplyingVendLedgEntry."Entry No." <> 0
      ELSE
        CalculateCurrency := TRUE;

      IF (CurrencyCode <> CalcVendLedgEntry."Currency Code") AND CalculateCurrency THEN BEGIN
        CalcVendLedgEntry."Remaining Amount" :=
          CurrExchRate.ExchangeAmount(
            CalcVendLedgEntry."Remaining Amount",
            CalcVendLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcVendLedgEntry."Remaining Pmt. Disc. Possible" :=
          CurrExchRate.ExchangeAmount(
            CalcVendLedgEntry."Remaining Pmt. Disc. Possible",
            CalcVendLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
        CalcVendLedgEntry."Amount to Apply" :=
          CurrExchRate.ExchangeAmount(
            CalcVendLedgEntry."Amount to Apply",
            CalcVendLedgEntry."Currency Code",
            CurrencyCode,PostingDate);
      END;
    END;

    LOCAL PROCEDURE CalcOppositeEntriesAmount@17(VAR TempAppliedVendorLedgerEntry@1000 : TEMPORARY Record 25) Result : Decimal;
    VAR
      SavedAppliedVendorLedgerEntry@1002 : Record 25;
      CurrPosFilter@1001 : Text;
    BEGIN
      WITH TempAppliedVendorLedgerEntry DO BEGIN
        CurrPosFilter := GETFILTER(Positive);
        IF CurrPosFilter <> '' THEN BEGIN
          SavedAppliedVendorLedgerEntry := TempAppliedVendorLedgerEntry;
          SETRANGE(Positive,NOT Positive);
          IF FINDSET THEN
            REPEAT
              CALCFIELDS("Remaining Amount");
              Result += "Remaining Amount";
            UNTIL NEXT = 0;
          SETFILTER(Positive,CurrPosFilter);
          TempAppliedVendorLedgerEntry := SavedAppliedVendorLedgerEntry;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Page 256 Payment Journal
{
  OBJECT-PROPERTIES
  {
    Date=20/11/19;
    Time=15:56:32;
    Modified=Yes;
    Version List=NAVW111.00.00.21836,NAVGB11.00.00.21836;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Payment Journal;
               ENG=Payment Journal];
    SaveValues=Yes;
    SourceTable=Table81;
    DataCaptionExpr=DataCaption;
    DelayedInsert=Yes;
    PageType=Worksheet;
    AutoSplitKey=Yes;
    PromotedActionCategoriesML=[ENU=New,Process,Report,Bank,Prepare,Approve,Page;
                                ENG=New,Process,Report,Bank,Prepare,Approve,Page];
    OnInit=BEGIN
             TotalBalanceVisible := TRUE;
             BalanceVisible := TRUE;
             AmountVisible := TRUE;
           END;

    OnOpenPage=VAR
                 ServerConfigSettingHandler@1001 : Codeunit 6723;
                 PermissionManager@1002 : Codeunit 9002;
                 JnlSelected@1000 : Boolean;
               BEGIN
                 IsSaasExcelAddinEnabled := ServerConfigSettingHandler.GetIsSaasExcelAddinEnabled;
                 IsSaaS := PermissionManager.SoftwareAsAService;
                 IF CURRENTCLIENTTYPE = CLIENTTYPE::ODataV4 THEN
                   EXIT;

                 BalAccName := '';

                 SetConrolVisibility;
                 IF IsOpenedFromBatch THEN BEGIN
                   CurrentJnlBatchName := "Journal Batch Name";
                   GenJnlManagement.OpenJnl(CurrentJnlBatchName,Rec);
                   SetControlAppearanceFromBatch;
                   EXIT;
                 END;
                 GenJnlManagement.TemplateSelection(PAGE::"Payment Journal",4,FALSE,Rec,JnlSelected);
                 IF NOT JnlSelected THEN
                   ERROR('');
                 GenJnlManagement.OpenJnl(CurrentJnlBatchName,Rec);
                 SetControlAppearanceFromBatch;
               END;

    OnAfterGetRecord=BEGIN
                       StyleTxt := GetOverdueDateInteractions(OverdueWarningText);
                       ShowShortcutDimCode(ShortcutDimCode);
                       HasPmtFileErr := HasPaymentFileErrors;
                       RecipientBankAccountMandatory := IsAllowPaymentExport AND
                         (("Bal. Account Type" = "Bal. Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Customer));
                     END;

    OnNewRecord=BEGIN
                  HasPmtFileErr := FALSE;
                  UpdateBalance;
                  EnableApplyEntriesAction;
                  SetUpNewLine(xRec,Balance,BelowxRec);
                  CLEAR(ShortcutDimCode);
                END;

    OnModifyRecord=BEGIN
                     CheckForPmtJnlErrors;
                   END;

    OnAfterGetCurrRecord=VAR
                           GenJournalBatch@1000 : Record 232;
                           WorkflowEventHandling@1001 : Codeunit 1520;
                           WorkflowManagement@1002 : Codeunit 1501;
                         BEGIN
                           StyleTxt := GetOverdueDateInteractions(OverdueWarningText);
                           GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                           UpdateBalance;
                           EnableApplyEntriesAction;
                           SetControlAppearance;
                           CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);

                           IF GenJournalBatch.GET("Journal Template Name","Journal Batch Name") THEN BEGIN
                             ShowWorkflowStatusOnBatch := CurrPage.WorkflowStatusBatch.PAGE.SetFilterOnWorkflowRecord(GenJournalBatch.RECORDID);
                             IsAllowPaymentExport := GenJournalBatch."Allow Payment Export";
                           END;
                           ShowWorkflowStatusOnLine := CurrPage.WorkflowStatusLine.PAGE.SetFilterOnWorkflowRecord(RECORDID);

                           EventFilter := WorkflowEventHandling.RunWorkflowOnSendGeneralJournalLineForApprovalCode;
                           EnabledApprovalWorkflowsExist := WorkflowManagement.EnabledWorkflowExist(DATABASE::"Gen. Journal Line",EventFilter);
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 57      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 ENG=&Line];
                      Image=Line }
      { 58      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      ApplicationArea=#Suite;
                      Promoted=Yes;
                      Image=Dimensions;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowDimensions;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 92      ;2   ;Action    ;
                      Name=IncomingDoc;
                      AccessByPermission=TableData 130=R;
                      CaptionML=[ENU=Incoming Document;
                                 ENG=Incoming Document];
                      ToolTipML=[ENU=View or create an incoming document record that is linked to the entry or document.;
                                 ENG=View or create an incoming document record that is linked to the entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Document;
                      PromotedCategory=Process;
                      Scope=Repeater;
                      OnAction=VAR
                                 IncomingDocument@1000 : Record 130;
                               BEGIN
                                 VALIDATE("Incoming Document Entry No.",IncomingDocument.SelectIncomingDocument("Incoming Document Entry No.",RECORDID));
                               END;
                                }
      { 37      ;1   ;ActionGroup;
                      CaptionML=[ENU=A&ccount;
                                 ENG=A&ccount];
                      Image=ChartOfAccounts }
      { 38      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Card;
                                 ENG=Card];
                      ToolTipML=[ENU=View or change detailed information about the record on the document or journal line.;
                                 ENG=View or change detailed information about the record on the document or journal line.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 15;
                      Image=EditLines }
      { 39      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Ledger E&ntries;
                                 ENG=Ledger E&ntries];
                      ToolTipML=[ENU=View the history of transactions that have been posted for the selected record.;
                                 ENG=View the history of transactions that have been posted for the selected record.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 14;
                      Promoted=No;
                      Image=GLRegisters;
                      PromotedCategory=Process }
      { 41      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Payments;
                                 ENG=&Payments];
                      Image=Payment }
      { 42      ;2   ;Action    ;
                      Name=SuggestVendorPayments;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Suggest Vendor Payments;
                                 ENG=Suggest Vendor Payments];
                      ToolTipML=[ENU=Create payment suggestions as lines in the payment journal.;
                                 ENG=Create payment suggestions as lines in the payment journal.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SuggestVendorPayments;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 SuggestVendorPayments@1001 : Report 393;
                               BEGIN
                                 CLEAR(SuggestVendorPayments);
                                 SuggestVendorPayments.SetGenJnlLine(Rec);
                                 SuggestVendorPayments.RUNMODAL;
                               END;
                                }
      { 1040000 ;2   ;Action    ;
                      CaptionML=[ENU=Print Remi&ttance Advice;
                                 ENG=Print Remi&ttance Advice];
                      ToolTipML=[ENU=Print the remittance advice before posting a payment journal and after posting a payment. This advice displays vendor invoice numbers, which helps vendors to perform reconciliations.;
                                 ENG=Print the remittance advice before posting a payment journal and after posting a payment. This advice displays vendor invoice numbers, which helps vendors to perform reconciliations.];
                      ApplicationArea=#Basic,#Suite;
                      Image=PrintAttachment;
                      OnAction=BEGIN
                                 GenJnlLine.RESET;
                                 GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 REPORT.RUN(REPORT::"Remittance Advice - Journal",TRUE,FALSE,GenJnlLine);
                               END;
                                }
      { 1040007 ;2   ;Separator  }
      { 112     ;2   ;Action    ;
                      Name=SuggestEmployeePayments;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Suggest Employee Payments;
                                 ENG=Suggest Employee Payments];
                      ToolTipML=[ENU=Create payment suggestions as lines in the payment journal.;
                                 ENG=Create payment suggestions as lines in the payment journal.];
                      ApplicationArea=#BasicHR;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SuggestVendorPayments;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 SuggestEmployeePayments@1001 : Report 394;
                               BEGIN
                                 CLEAR(SuggestEmployeePayments);
                                 SuggestEmployeePayments.SetGenJnlLine(Rec);
                                 SuggestEmployeePayments.RUNMODAL;
                               END;
                                }
      { 63      ;2   ;Action    ;
                      Name=PreviewCheck;
                      CaptionML=[ENU=P&review Check;
                                 ENG=P&review Cheque];
                      ToolTipML=[ENU=Preview the check before printing it.;
                                 ENG=Preview the cheque before printing it.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 10510;
                      RunPageLink=Journal Template Name=FIELD(Journal Template Name),
                                  Journal Batch Name=FIELD(Journal Batch Name),
                                  Line No.=FIELD(Line No.);
                      Image=ViewCheck }
      { 64      ;2   ;Action    ;
                      Name=PrintCheck;
                      AccessByPermission=TableData 272=R;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Print Check;
                                 ENG=Print Cheque];
                      ToolTipML=[ENU=Prepare to print the check.;
                                 ENG=Prepare to print the cheque.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=PrintCheck;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GenJnlLine.RESET;
                                 GenJnlLine.COPY(Rec);
                                 GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 DocPrint.PrintCheck(GenJnlLine);
                                 CODEUNIT.RUN(CODEUNIT::"Adjust Gen. Journal Balance",Rec);
                               END;
                                }
      { 106     ;2   ;ActionGroup;
                      CaptionML=[ENU=Electronic Payments;
                                 ENG=Electronic Payments];
                      Image=ElectronicPayment }
      { 15      ;3   ;Action    ;
                      Name=ExportPaymentsToFile;
                      Ellipsis=Yes;
                      CaptionML=[ENU=E&xport;
                                 ENG=E&xport];
                      ToolTipML=[ENU=Export a file with the payment information on the journal lines.;
                                 ENG=Export a file with the payment information on the journal lines.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=ExportFile;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 GenJnlLine@1001 : Record 81;
                               BEGIN
                                 CheckIfPrivacyBlocked;
                                 GenJnlLine.COPYFILTERS(Rec);
                                 IF GenJnlLine.FINDFIRST THEN
                                   GenJnlLine.ExportPaymentFile;
                               END;
                                }
      { 104     ;3   ;Action    ;
                      Name=VoidPayments;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Void;
                                 ENG=Void];
                      ToolTipML=[ENU=Void the exported electronic payment file.;
                                 ENG=Void the exported electronic payment file.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=VoidElectronicDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GenJnlLine.COPYFILTERS(Rec);
                                 IF GenJnlLine.FINDFIRST THEN
                                   GenJnlLine.VoidPaymentFile;
                               END;
                                }
      { 107     ;3   ;Action    ;
                      Name=TransmitPayments;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Transmit;
                                 ENG=Transmit];
                      ToolTipML=[ENU=Transmit the exported electronic payment file to the bank.;
                                 ENG=Transmit the exported electronic payment file to the bank.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=TransmitElectronicDoc;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 GenJnlLine.COPYFILTERS(Rec);
                                 IF GenJnlLine.FINDFIRST THEN
                                   GenJnlLine.TransmitPaymentFile;
                               END;
                                }
      { 65      ;2   ;Action    ;
                      CaptionML=[ENU=Void Check;
                                 ENG=Void Cheque];
                      ToolTipML=[ENU=Void the check if, for example, the check is not cashed by the bank.;
                                 ENG=Void the cheque if, for example, the cheque is not cashed by the bank.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=VoidCheck;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TESTFIELD("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                 TESTFIELD("Check Printed",TRUE);
                                 IF CONFIRM(VoidCheckQst,FALSE,"Document No.") THEN
                                   CheckManagement.VoidCheck(Rec);
                               END;
                                }
      { 66      ;2   ;Action    ;
                      CaptionML=[ENU=Void &All Checks;
                                 ENG=Void &All Cheques];
                      ToolTipML=[ENU=Void all checks if, for example, the checks are not cashed by the bank.;
                                 ENG=Void all cheques if, for example, the cheques are not cashed by the bank.];
                      ApplicationArea=#Basic,#Suite;
                      Image=VoidAllChecks;
                      OnAction=BEGIN
                                 IF CONFIRM(VoidAllPrintedChecksQst,FALSE) THEN BEGIN
                                   GenJnlLine.RESET;
                                   GenJnlLine.COPY(Rec);
                                   GenJnlLine.SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                                   GenJnlLine.SETRANGE("Check Printed",TRUE);
                                   IF GenJnlLine.FIND('-') THEN
                                     REPEAT
                                       GenJnlLine2 := GenJnlLine;
                                       CheckManagement.VoidCheck(GenJnlLine2);
                                     UNTIL GenJnlLine.NEXT = 0;
                                 END;
                               END;
                                }
      { 26      ;2   ;Action    ;
                      Name=CreditTransferRegEntries;
                      CaptionML=[ENU=Credit Transfer Reg. Entries;
                                 ENG=Credit Transfer Reg. Entries];
                      ToolTipML=[ENU=View or edit the credit transfer entries that are related to file export for credit transfers.;
                                 ENG=View or edit the credit transfer entries that are related to file export for credit transfers.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 16;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExportReceipt;
                      PromotedCategory=Category4 }
      { 23      ;2   ;Action    ;
                      Name=CreditTransferRegisters;
                      CaptionML=[ENU=Credit Transfer Registers;
                                 ENG=Credit Transfer Registers];
                      ToolTipML=[ENU=View or edit the payment files that have been exported in connection with credit transfers.;
                                 ENG=View or edit the payment files that have been exported in connection with credit transfers.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 1205;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExportElectronicDocument;
                      PromotedCategory=Category4 }
      { 54      ;1   ;Action    ;
                      Name=Approvals;
                      AccessByPermission=TableData 454=R;
                      CaptionML=[ENU=Approvals;
                                 ENG=Approvals];
                      ToolTipML=[ENU=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.;
                                 ENG=View a list of the records that are waiting to be approved. For example, you can see who requested the record to be approved, when it was sent, and when it is due to be approved.];
                      ApplicationArea=#Suite;
                      Image=Approvals;
                      OnAction=VAR
                                 GenJournalLine@1001 : Record 81;
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 GetCurrentlySelectedLines(GenJournalLine);
                                 ApprovalsMgmt.ShowJournalApprovalEntries(GenJournalLine);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 40      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 19      ;2   ;Action    ;
                      CaptionML=[ENU=Renumber Document Numbers;
                                 ENG=Renumber Document Numbers];
                      ToolTipML=[ENU=Resort the numbers in the Document No. column to avoid posting errors because the document numbers are not in sequence. Entry applications and line groupings are preserved.;
                                 ENG=Resort the numbers in the Document No. column to avoid posting errors because the document numbers are not in sequence. Entry applications and line groupings are preserved.];
                      ApplicationArea=#Basic,#Suite;
                      Image=EditLines;
                      OnAction=BEGIN
                                 RenumberDocumentNo
                               END;
                                }
      { 93      ;2   ;Action    ;
                      Name=ApplyEntries;
                      ShortCutKey=Shift+F11;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Apply Entries;
                                 ENG=Apply Entries];
                      ToolTipML=[ENU=Apply the payment amount on a journal line to a sales or purchase document that was already posted for a customer or vendor. This updates the amount on the posted document, and the document can either be partially paid, or closed as paid or refunded.;
                                 ENG=Apply the payment amount on a journal line to a sales or purchase document that was already posted for a customer or vendor. This updates the amount on the posted document, and the document can either be partially paid, or closed as paid or refunded.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 225;
                      Promoted=Yes;
                      Enabled=ApplyEntriesActionEnabled;
                      Image=ApplyEntries;
                      PromotedCategory=Process }
      { 68      ;2   ;Action    ;
                      Name=CalculatePostingDate;
                      CaptionML=[ENU=Calculate Posting Date;
                                 ENG=Calculate Posting Date];
                      ToolTipML=[ENU=Calculate the date that will appear as the posting date on the journal lines.;
                                 ENG=Calculate the date that will appear as the posting date on the journal lines.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=CalcWorkCenterCalendar;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 CalculatePostingDate;
                               END;
                                }
      { 94      ;2   ;Action    ;
                      CaptionML=[ENU=Insert Conv. LCY Rndg. Lines;
                                 ENG=Insert Conv. LCY Rndg. Lines];
                      ToolTipML=[ENU=Insert a rounding correction line in the journal. This rounding correction line will balance in LCY when amounts in the foreign currency also balance. You can then post the journal.;
                                 ENG=Insert a rounding correction line in the journal. This rounding correction line will balance in LCY when amounts in the foreign currency also balance. You can then post the journal.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Codeunit 407;
                      Image=InsertCurrency }
      { 34      ;2   ;Action    ;
                      Name=PositivePayExport;
                      CaptionML=[ENU=Positive Pay Export;
                                 ENG=Positive Pay Export];
                      ToolTipML=[ENU=Export a Positive Pay file that contains vendor information, check number, and payment amount, which you send to the bank to make sure that your bank only clears validated checks and amounts when you process payments.;
                                 ENG=Export a Positive Pay file that contains vendor information, cheque number, and payment amount, which you send to the bank to make sure that your bank only clears validated cheques and amounts when you process payments.];
                      ApplicationArea=#Advanced;
                      Visible=FALSE;
                      Image=Export;
                      OnAction=VAR
                                 GenJnlBatch@1000 : Record 232;
                                 BankAcc@1001 : Record 270;
                               BEGIN
                                 GenJnlBatch.GET("Journal Template Name",CurrentJnlBatchName);
                                 IF GenJnlBatch."Bal. Account Type" = GenJnlBatch."Bal. Account Type"::"Bank Account" THEN BEGIN
                                   BankAcc."No." := GenJnlBatch."Bal. Account No.";
                                   PAGE.RUN(PAGE::"Positive Pay Export",BankAcc);
                                 END;
                               END;
                                }
      { 43      ;1   ;ActionGroup;
                      CaptionML=[ENU=P&osting;
                                 ENG=P&osting];
                      Image=Post }
      { 48      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F11;
                      CaptionML=[ENU=Reconcile;
                                 ENG=Reconcile];
                      ToolTipML=[ENU=View the balances on bank accounts that are marked for reconciliation, usually liquid accounts.;
                                 ENG=View the balances on bank accounts that are marked for reconciliation, usually liquid accounts.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Reconcile;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 GLReconcile.SetGenJnlLine(Rec);
                                 GLReconcile.RUN;
                               END;
                                }
      { 78      ;2   ;Action    ;
                      Name=PreCheck;
                      CaptionML=[ENU=Vendor Pre-Payment Journal;
                                 ENG=Vendor Pre-Payment Journal];
                      ToolTipML=[ENU=View journal line entries, payment discounts, discount tolerance amounts, payment tolerance, and any errors associated with the entries. You can use the results of the report to review payment journal lines and to review the results of posting before you actually post.;
                                 ENG=View journal line entries, payment discounts, discount tolerance amounts, payment tolerance, and any errors associated with the entries. You can use the results of the report to review payment journal lines and to review the results of posting before you actually post.];
                      ApplicationArea=#Basic,#Suite;
                      Image=PreviewChecks;
                      OnAction=VAR
                                 GenJournalBatch@1000 : Record 232;
                               BEGIN
                                 GenJournalBatch.INIT;
                                 GenJournalBatch.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJournalBatch.SETRANGE(Name,"Journal Batch Name");
                                 REPORT.RUN(REPORT::"Vendor Pre-Payment Journal",TRUE,FALSE,GenJournalBatch);
                               END;
                                }
      { 45      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Test Report;
                                 ENG=Test Report];
                      ToolTipML=[ENU=View a test report so that you can find and correct any errors before you perform the actual posting of the journal or document.;
                                 ENG=View a test report so that you can find and correct any errors before you perform the actual posting of the journal or document.];
                      ApplicationArea=#Basic,#Suite;
                      Image=TestReport;
                      OnAction=BEGIN
                                 ReportPrint.PrintGenJnlLine(Rec);
                               END;
                                }
      { 46      ;2   ;Action    ;
                      Name=Post;
                      ShortCutKey=F9;
                      CaptionML=[ENU=P&ost;
                                 ENG=P&ost];
                      ToolTipML=[ENU=Finalize the document or journal by posting the amounts and quantities to the related accounts in your company books.;
                                 ENG=Finalise the document or journal by posting the amounts and quantities to the related accounts in your company books.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post",Rec);
                                 CurrentJnlBatchName := GETRANGEMAX("Journal Batch Name");
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 32      ;2   ;Action    ;
                      Name=Preview;
                      CaptionML=[ENU=Preview Posting;
                                 ENG=Preview Posting];
                      ToolTipML=[ENU=Review the different types of entries that will be created when you post the document or journal.;
                                 ENG=Review the different types of entries that will be created when you post the document or journal.];
                      ApplicationArea=#Basic,#Suite;
                      Image=ViewPostedOrder;
                      OnAction=VAR
                                 GenJnlPost@1001 : Codeunit 231;
                               BEGIN
                                 GenJnlPost.Preview(Rec);
                               END;
                                }
      { 47      ;2   ;Action    ;
                      ShortCutKey=Shift+F9;
                      CaptionML=[ENU=Post and &Print;
                                 ENG=Post and &Print];
                      ToolTipML=[ENU=Finalize and prepare to print the document or journal. The values and quantities are posted to the related accounts. A report request window where you can specify what to include on the print-out.;
                                 ENG=Finalise and prepare to print the document or journal. The values and quantities are posted to the related accounts. A report request window where you can specify what to include on the print-out.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostPrint;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post+Print",Rec);
                                 CurrentJnlBatchName := GETRANGEMAX("Journal Batch Name");
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 36      ;1   ;ActionGroup;
                      CaptionML=[ENU=Request Approval;
                                 ENG=Request Approval] }
      { 86      ;2   ;ActionGroup;
                      Name=SendApprovalRequest;
                      CaptionML=[ENU=Send Approval Request;
                                 ENG=Send Approval Request];
                      Image=SendApprovalRequest }
      { 76      ;3   ;Action    ;
                      Name=SendApprovalRequestJournalBatch;
                      CaptionML=[ENU=Journal Batch;
                                 ENG=Journal Batch];
                      ToolTipML=[ENU=Send all journal lines for approval, also those that you may not see because of filters.;
                                 ENG=Send all journal lines for approval, also those that you may not see because of filters.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT OpenApprovalEntriesOnBatchOrAnyJnlLineExist AND CanRequestFlowApprovalForBatchAndAllLines;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.TrySendJournalBatchApprovalRequest(Rec);
                                 SetControlAppearanceFromBatch;
                                 SetControlAppearance;
                               END;
                                }
      { 74      ;3   ;Action    ;
                      Name=SendApprovalRequestJournalLine;
                      CaptionML=[ENU=Selected Journal Lines;
                                 ENG=Selected Journal Lines];
                      ToolTipML=[ENU=Send selected journal lines for approval.;
                                 ENG=Send selected journal lines for approval.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT OpenApprovalEntriesOnBatchOrCurrJnlLineExist AND CanRequestFlowApprovalForBatchAndCurrentLine;
                      Image=SendApprovalRequest;
                      OnAction=VAR
                                 GenJournalLine@1001 : Record 81;
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 GetCurrentlySelectedLines(GenJournalLine);
                                 ApprovalsMgmt.TrySendJournalLineApprovalRequests(GenJournalLine);
                               END;
                                }
      { 52      ;2   ;ActionGroup;
                      Name=CancelApprovalRequest;
                      CaptionML=[ENU=Cancel Approval Request;
                                 ENG=Cancel Approval Request];
                      Image=Cancel }
      { 50      ;3   ;Action    ;
                      Name=CancelApprovalRequestJournalBatch;
                      CaptionML=[ENU=Journal Batch;
                                 ENG=Journal Batch];
                      ToolTipML=[ENU=Cancel sending all journal lines for approval, also those that you may not see because of filters.;
                                 ENG=Cancel sending all journal lines for approval, also those that you may not see because of filters.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=CanCancelApprovalForJnlBatch OR CanCancelFlowApprovalForBatch;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.TryCancelJournalBatchApprovalRequest(Rec);
                                 SetControlAppearanceFromBatch;
                                 SetControlAppearance;
                               END;
                                }
      { 96      ;3   ;Action    ;
                      Name=CancelApprovalRequestJournalLine;
                      CaptionML=[ENU=Selected Journal Lines;
                                 ENG=Selected Journal Lines];
                      ToolTipML=[ENU=Cancel sending selected journal lines for approval.;
                                 ENG=Cancel sending selected journal lines for approval.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=CanCancelApprovalForJnlLine OR CanCancelFlowApprovalForLine;
                      Image=CancelApprovalRequest;
                      OnAction=VAR
                                 GenJournalLine@1001 : Record 81;
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 GetCurrentlySelectedLines(GenJournalLine);
                                 ApprovalsMgmt.TryCancelJournalLineApprovalRequests(GenJournalLine);
                               END;
                                }
      { 114     ;2   ;Action    ;
                      Name=CreateFlow;
                      CaptionML=[ENU=Create a Flow;
                                 ENG=Create a Flow];
                      ToolTipML=[ENU=Create a new Flow from a list of relevant Flow templates.;
                                 ENG=Create a new Flow from a list of relevant Flow templates.];
                      ApplicationArea=#Basic,#Suite;
                      Visible=IsSaaS;
                      Image=Flow;
                      OnAction=VAR
                                 FlowServiceManagement@1000 : Codeunit 6400;
                                 FlowTemplateSelector@1001 : Page 6400;
                               BEGIN
                                 // Opens page 6400 where the user can use filtered templates to create new flows.
                                 FlowTemplateSelector.SetSearchText(FlowServiceManagement.GetJournalTemplateFilter);
                                 FlowTemplateSelector.RUN;
                               END;
                                }
      { 116     ;2   ;Action    ;
                      Name=SeeFlows;
                      CaptionML=[ENU=See my Flows;
                                 ENG=See my Flows];
                      ToolTipML=[ENU=View and configure Flows that you created.;
                                 ENG=View and configure Flows that you created.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 6401;
                      Image=Flow }
      { 98      ;1   ;ActionGroup;
                      CaptionML=[ENU=Workflow;
                                 ENG=Workflow] }
      { 90      ;2   ;Action    ;
                      Name=CreateApprovalWorkflow;
                      CaptionML=[ENU=Create Approval Workflow;
                                 ENG=Create Approval Workflow];
                      ToolTipML=[ENU=Set up an approval workflow for payment journal lines, by going through a few pages that will guide you.;
                                 ENG=Set up an approval workflow for payment journal lines, by going through a few pages that will guide you.];
                      ApplicationArea=#Suite;
                      Enabled=NOT EnabledApprovalWorkflowsExist;
                      Image=CreateWorkflow;
                      OnAction=VAR
                                 TempApprovalWorkflowWizard@1001 : TEMPORARY Record 1804;
                               BEGIN
                                 TempApprovalWorkflowWizard."Journal Batch Name" := "Journal Batch Name";
                                 TempApprovalWorkflowWizard."Journal Template Name" := "Journal Template Name";
                                 TempApprovalWorkflowWizard."For All Batches" := FALSE;
                                 TempApprovalWorkflowWizard.INSERT;

                                 PAGE.RUNMODAL(PAGE::"Pmt. App. Workflow Setup Wzrd.",TempApprovalWorkflowWizard);
                               END;
                                }
      { 102     ;2   ;Action    ;
                      Name=ManageApprovalWorkflows;
                      CaptionML=[ENU=Manage Approval Workflows;
                                 ENG=Manage Approval Workflows];
                      ToolTipML=[ENU=View or edit existing approval workflows for payment journal lines.;
                                 ENG=View or edit existing approval workflows for payment journal lines.];
                      ApplicationArea=#Suite;
                      Enabled=EnabledApprovalWorkflowsExist;
                      Image=WorkflowSetup;
                      OnAction=VAR
                                 WorkflowManagement@1000 : Codeunit 1501;
                               BEGIN
                                 WorkflowManagement.NavigateToWorkflows(DATABASE::"Gen. Journal Line",EventFilter);
                               END;
                                }
      { 72      ;1   ;ActionGroup;
                      CaptionML=[ENU=Approval;
                                 ENG=Approval] }
      { 70      ;2   ;Action    ;
                      Name=Approve;
                      CaptionML=[ENU=Approve;
                                 ENG=Approve];
                      ToolTipML=[ENU=Approve the requested changes.;
                                 ENG=Approve the requested changes.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Approve;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.ApproveGenJournalLineRequest(Rec);
                               END;
                                }
      { 62      ;2   ;Action    ;
                      Name=Reject;
                      CaptionML=[ENU=Reject;
                                 ENG=Reject];
                      ToolTipML=[ENU=Reject the approval request.;
                                 ENG=Reject the approval request.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      PromotedIsBig=Yes;
                      Image=Reject;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.RejectGenJournalLineRequest(Rec);
                               END;
                                }
      { 60      ;2   ;Action    ;
                      Name=Delegate;
                      CaptionML=[ENU=Delegate;
                                 ENG=Delegate];
                      ToolTipML=[ENU=Delegate the approval to a substitute approver.;
                                 ENG=Delegate the approval to a substitute approver.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=Delegate;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 ApprovalsMgmt.DelegateGenJournalLineRequest(Rec);
                               END;
                                }
      { 56      ;2   ;Action    ;
                      Name=Comment;
                      CaptionML=[ENU=Comments;
                                 ENG=Comments];
                      ToolTipML=[ENU=View or add comments for the record.;
                                 ENG=View or add comments for the record.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=OpenApprovalEntriesExistForCurrUser;
                      Image=ViewComments;
                      PromotedCategory=Category6;
                      OnAction=VAR
                                 GenJournalBatch@1001 : Record 232;
                                 ApprovalsMgmt@1000 : Codeunit 1535;
                               BEGIN
                                 IF OpenApprovalEntriesOnJnlLineExist THEN
                                   ApprovalsMgmt.GetApprovalComment(Rec)
                                 ELSE
                                   IF OpenApprovalEntriesOnJnlBatchExist THEN
                                     IF GenJournalBatch.GET("Journal Template Name","Journal Batch Name") THEN
                                       ApprovalsMgmt.GetApprovalComment(GenJournalBatch);
                               END;
                                }
      { 109     ;1   ;ActionGroup;
                      CaptionML=[ENU=Page;
                                 ENG=Page] }
      { 108     ;2   ;Action    ;
                      Name=EditInExcel;
                      CaptionML=[ENU=Edit in Excel;
                                 ENG=Edit in Excel];
                      ToolTipML=[ENU=Send the data in the journal to an Excel file for analysis or editing.;
                                 ENG=Send the data in the journal to an Excel file for analysis or editing.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=IsSaasExcelAddinEnabled;
                      PromotedIsBig=Yes;
                      Image=Excel;
                      PromotedCategory=Category7;
                      PromotedOnly=Yes;
                      OnAction=VAR
                                 ODataUtility@1000 : Codeunit 6710;
                               BEGIN
                                 ODataUtility.EditJournalWorksheetInExcel(CurrPage.CAPTION,CurrPage.OBJECTID(FALSE),"Journal Batch Name","Journal Template Name");
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 33  ;1   ;Field     ;
                Lookup=Yes;
                CaptionML=[ENU=Batch Name;
                           ENG=Batch Name];
                ToolTipML=[ENU=Specifies the name of the journal batch, a personalized journal layout, that the journal is based on.;
                           ENG=Specifies the name of the journal batch, a personalised journal layout, that the journal is based on.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CurrentJnlBatchName;
                OnValidate=BEGIN
                             GenJnlManagement.CheckName(CurrentJnlBatchName,Rec);
                             CurrentJnlBatchNameOnAfterVali;
                           END;

                OnLookup=BEGIN
                           CurrPage.SAVERECORD;
                           GenJnlManagement.LookupName(CurrentJnlBatchName,Rec);
                           CurrPage.UPDATE(FALSE);
                         END;
                          }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the posting date for the entry.;
                           ENG=Specifies the posting date for the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date";
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 35  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when the related document was created.;
                           ENG=Specifies the date when the related document was created.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Date";
                Visible=FALSE;
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 1040001;2;Field     ;
                ToolTipML=[ENU=Specifies the date when the document was received.;
                           ENG=Specifies the date when the document was received.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Invoice Receipt Date";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of document that the entry on the journal line is.;
                           ENG=Specifies the type of document that the entry on the journal line is.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type";
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a document number for the journal line.;
                           ENG=Specifies a document number for the journal line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No.";
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 9   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the incoming document that this general journal line is created for.;
                           ENG=Specifies the number of the incoming document that this general journal line is created for.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Incoming Document Entry No.";
                Visible=FALSE;
                OnAssistEdit=BEGIN
                               IF "Incoming Document Entry No." > 0 THEN
                                 HYPERLINK(GetIncomingDocumentURL);
                             END;
                              }

    { 83  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a document number that refers to the customer's or vendor's numbering system.;
                           ENG=Specifies a document number that refers to the customer's or vendor's numbering system.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="External Document No." }

    { 21  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the external document number that will be exported in the payment file.;
                           ENG=Specifies the external document number that will be exported in the payment file.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to Ext. Doc. No.";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of account that the entry on the journal line will be posted to.;
                           ENG=Specifies the type of account that the entry on the journal line will be posted to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Account Type";
                OnValidate=BEGIN
                             GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                             EnableApplyEntriesAction;
                           END;
                            }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the account number that the entry on the journal line will be posted to.;
                           ENG=Specifies the account number that the entry on the journal line will be posted to.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Account No.";
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                OnValidate=BEGIN
                             GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                             ShowShortcutDimCode(ShortcutDimCode);
                           END;

                ShowMandatory=True }

    { 13  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the bank account that the amount will be transferred to after it has been exported from the payment journal.;
                           ENG=Specifies the bank account that the amount will be transferred to after it has been exported from the payment journal.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Recipient Bank Account";
                ShowMandatory=RecipientBankAccountMandatory }

    { 11  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the message exported to the payment file when you use the Export Payments to File function in the Payment Journal window.;
                           ENG=Specifies the message exported to the payment file when you use the Export Payments to File function in the Payment Journal window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Message to Recipient" }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the entry.;
                           ENG=Specifies a description of the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Style=Attention;
                StyleExpr=HasPmtFileErr }

    { 53  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the salesperson or purchaser who is linked to the journal line.;
                           ENG=Specifies the salesperson or purchaser who is linked to the journal line.];
                ApplicationArea=#Suite;
                SourceExpr="Salespers./Purch. Code";
                Visible=FALSE }

    { 95  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the campaign that the journal line is linked to.;
                           ENG=Specifies the number of the campaign that the journal line is linked to.];
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Campaign No.";
                Visible=FALSE }

    { 55  ;2   ;Field     ;
                AssistEdit=Yes;
                ToolTipML=[ENU=Specifies the code of the currency for the amounts on the journal line.;
                           ENG=Specifies the code of the currency for the amounts on the journal line.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code";
                OnAssistEdit=BEGIN
                               ChangeExchangeRate.SetParameter("Currency Code","Currency Factor","Posting Date");
                               IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN
                                 VALIDATE("Currency Factor",ChangeExchangeRate.GetParameter);

                               CLEAR(ChangeExchangeRate);
                             END;
                              }

    { 77  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of transaction.;
                           ENG=Specifies the type of transaction.];
                ApplicationArea=#Advanced;
                SourceExpr="Gen. Posting Type";
                Visible=FALSE }

    { 79  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor's or customer's trade type to link transactions made for this business partner with the appropriate general ledger account according to the general posting setup.;
                           ENG=Specifies the vendor's or customer's trade type to link transactions made for this business partner with the appropriate general ledger account according to the general posting setup.];
                ApplicationArea=#Advanced;
                SourceExpr="Gen. Bus. Posting Group";
                Visible=FALSE }

    { 81  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the item's product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.;
                           ENG=Specifies the item's product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.];
                ApplicationArea=#Advanced;
                SourceExpr="Gen. Prod. Posting Group";
                Visible=FALSE }

    { 85  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.;
                           ENG=Specifies the VAT specification of the involved customer or vendor to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.];
                ApplicationArea=#Advanced;
                SourceExpr="VAT Bus. Posting Group";
                Visible=FALSE }

    { 87  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the VAT specification of the involved item or resource to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.;
                           ENG=Specifies the VAT specification of the involved item or resource to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.];
                ApplicationArea=#Advanced;
                SourceExpr="VAT Prod. Posting Group";
                Visible=FALSE }

    { 100 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how to make payment, such as with bank transfer, cash,  or check.;
                           ENG=Specifies how to make payment, such as with bank transfer, cash, or cheque.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Method Code";
                ShowMandatory=True }

    { 110 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment of the purchase invoice.;
                           ENG=Specifies the payment of the purchase invoice.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Payment Reference" }

    { 115 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the vendor who sent the purchase invoice.;
                           ENG=Specifies the vendor who sent the purchase invoice.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Creditor No." }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total amount (including VAT) that the journal line consists of.;
                           ENG=Specifies the total amount (including VAT) that the journal line consists of.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Visible=AmountVisible;
                Style=Attention;
                StyleExpr=HasPmtFileErr;
                ShowMandatory=True }

    { 111 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total amount in local currency (including VAT) that the journal line consists of.;
                           ENG=Specifies the total amount in local currency (including VAT) that the journal line consists of.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Amount (LCY)";
                Visible=AmountVisible }

    { 1000;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits.;
                           ENG=Specifies the total of the ledger entries that represent debits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=DebitCreditVisible }

    { 1001;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits.;
                           ENG=Specifies the total of the ledger entries that represent credits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=DebitCreditVisible }

    { 97  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of VAT that is included in the total amount.;
                           ENG=Specifies the amount of VAT that is included in the total amount.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Amount";
                Visible=FALSE }

    { 101 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the difference between the calculated VAT amount and a VAT amount that you have entered manually.;
                           ENG=Specifies the difference between the calculated VAT amount and a VAT amount that you have entered manually.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Difference";
                Visible=FALSE }

    { 99  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of Bal. VAT included in the total amount.;
                           ENG=Specifies the amount of Bal. VAT included in the total amount.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. VAT Amount";
                Visible=FALSE }

    { 103 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the difference between the calculate VAT amount and the VAT amount that you have entered manually.;
                           ENG=Specifies the difference between the calculate VAT amount and the VAT amount that you have entered manually.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. VAT Difference";
                Visible=FALSE }

    { 61  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of account that a balancing entry is posted to, such as BANK for a cash account.;
                           ENG=Specifies the type of account that a balancing entry is posted to, such as BANK for a cash account.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. Account Type";
                OnValidate=BEGIN
                             EnableApplyEntriesAction;
                           END;
                            }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the general ledger, customer, vendor, or bank account that the balancing entry is posted to, such as a cash account for cash purchases.;
                           ENG=Specifies the number of the general ledger, customer, vendor, or bank account that the balancing entry is posted to, such as a cash account for cash purchases.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bal. Account No.";
                OnValidate=BEGIN
                             GenJnlManagement.GetAccounts(Rec,AccName,BalAccName);
                             ShowShortcutDimCode(ShortcutDimCode);
                           END;
                            }

    { 71  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the general posting type associated with the balancing account that will be used when you post the entry on the journal line.;
                           ENG=Specifies the general posting type associated with the balancing account that will be used when you post the entry on the journal line.];
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Gen. Posting Type";
                Visible=FALSE }

    { 73  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the general business posting group code associated with the balancing account that will be used when you post the entry.;
                           ENG=Specifies the general business posting group code associated with the balancing account that will be used when you post the entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Gen. Bus. Posting Group";
                Visible=FALSE }

    { 75  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the general product posting group code associated with the balancing account that will be used when you post the entry.;
                           ENG=Specifies the general product posting group code associated with the balancing account that will be used when you post the entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Bal. Gen. Prod. Posting Group";
                Visible=FALSE }

    { 89  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the VAT business posting group that will be used when you post the entry on the journal line.;
                           ENG=Specifies the code of the VAT business posting group that will be used when you post the entry on the journal line.];
                ApplicationArea=#Advanced;
                SourceExpr="Bal. VAT Bus. Posting Group";
                Visible=FALSE }

    { 91  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the VAT product posting group that will be used when you post the entry on the journal line.;
                           ENG=Specifies the code of the VAT product posting group that will be used when you post the entry on the journal line.];
                ApplicationArea=#Advanced;
                SourceExpr="Bal. VAT Prod. Posting Group";
                Visible=FALSE }

    { 49  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                           ENG=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.];
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE }

    { 51  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                           ENG=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.];
                ApplicationArea=#Suite;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE }

    { 300 ;2   ;Field     ;
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[3];
                CaptionClass='1,2,3';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(3),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(3,ShortcutDimCode[3]);
                           END;
                            }

    { 302 ;2   ;Field     ;
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[4];
                CaptionClass='1,2,4';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(4),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(4,ShortcutDimCode[4]);
                           END;
                            }

    { 304 ;2   ;Field     ;
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[5];
                CaptionClass='1,2,5';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(5),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(5,ShortcutDimCode[5]);
                           END;
                            }

    { 306 ;2   ;Field     ;
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[6];
                CaptionClass='1,2,6';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(6),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(6,ShortcutDimCode[6]);
                           END;
                            }

    { 308 ;2   ;Field     ;
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[7];
                CaptionClass='1,2,7';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(7),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(7,ShortcutDimCode[7]);
                           END;
                            }

    { 310 ;2   ;Field     ;
                ApplicationArea=#Suite;
                SourceExpr=ShortcutDimCode[8];
                CaptionClass='1,2,8';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(8),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=FALSE;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(8,ShortcutDimCode[8]);
                           END;
                            }

    { 5   ;2   ;Field     ;
                Name=Applied (Yes/No);
                CaptionML=[ENU=Applied (Yes/No);
                           ENG=Applied (Yes/No)];
                ToolTipML=[ENU=Specifies if the payment has been applied.;
                           ENG=Specifies if the payment has been applied.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=IsApplied }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of the posted document that this document or journal line will be applied to when you post, for example to register payment.;
                           ENG=Specifies the type of the posted document that this document or journal line will be applied to when you post, for example to register payment.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to Doc. Type" }

    { 20  ;2   ;Field     ;
                Name=AppliesToDocNo;
                ToolTipML=[ENU=Specifies the number of the posted document that this document or journal line will be applied to when you post, for example to register payment.;
                           ENG=Specifies the number of the posted document that this document or journal line will be applied to when you post, for example to register payment.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to Doc. No.";
                StyleExpr=StyleTxt }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of entries that will be applied to when you choose the Apply Entries action.;
                           ENG=Specifies the ID of entries that will be applied to when you choose the Apply Entries action.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applies-to ID";
                Visible=FALSE;
                StyleExpr=StyleTxt }

    { 105 ;2   ;Field     ;
                Name=GetAppliesToDocDueDate;
                CaptionML=[ENU=Applies-to Doc. Due Date;
                           ENG=Applies-to Doc. Due Date];
                ToolTipML=[ENU=Specifies the due date from the Applies-to Doc. on the journal line.;
                           ENG=Specifies the due date from the Applies-to Doc. on the journal line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetAppliesToDocDueDate;
                StyleExpr=StyleTxt }

    { 67  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the payment type to be used for the entry on the journal line.;
                           ENG=Specifies the code for the payment type to be used for the entry on the journal line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Bank Payment Type" }

    { 59  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether a check has been printed for the amount on the payment journal line.;
                           ENG=Specifies whether a cheque has been printed for the amount on the payment journal line.];
                ApplicationArea=#Advanced;
                SourceExpr="Check Printed";
                Visible=FALSE }

    { 69  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the reason code, a supplementary source code that enables you to trace the entry.;
                           ENG=Specifies the reason code, a supplementary source code that enables you to trace the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Reason Code";
                Visible=FALSE }

    { 113 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the entry as a corrective entry. You can use the field if you need to post a corrective entry to an account.;
                           ENG=Specifies the entry as a corrective entry. You can use the field if you need to post a corrective entry to an account.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Correction }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a comment related to registering a payment.;
                           ENG=Specifies a comment related to registering a payment.];
                ApplicationArea=#Advanced;
                SourceExpr=Comment;
                Visible=FALSE }

    { 290 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that the payment journal line was exported to a payment file.;
                           ENG=Specifies that the payment journal line was exported to a payment file.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Exported to Payment File" }

    { 28  ;2   ;Field     ;
                Name=TotalExportedAmount;
                DrillDown=Yes;
                CaptionML=[ENU=Total Exported Amount;
                           ENG=Total Exported Amount];
                ToolTipML=[ENU=Specifies the amount for the payment journal line that has been exported to payment files that are not canceled.;
                           ENG=Specifies the amount for the payment journal line that has been exported to payment files that are not cancelled.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalExportedAmount;
                OnDrillDown=BEGIN
                              DrillDownExportedAmount
                            END;
                             }

    { 1000000000;2;Field  ;
                SourceExpr="On Hold" }

    { 17  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that an error occurred when you used the Export Payments to File function in the Payment Journal window.;
                           ENG=Specifies that an error occurred when you used the Export Payments to File function in the Payment Journal window.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Has Payment Export Error" }

    { 24  ;1   ;Group      }

    { 80  ;2   ;Group     ;
                GroupType=FixedLayout }

    { 82  ;3   ;Group     ;
                GroupType=Group }

    { 84  ;4   ;Field     ;
                ToolTipML=[ENU=Specifies the text that is displayed for overdue payments.;
                           ENG=Specifies the text that is displayed for overdue payments.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=OverdueWarningText;
                Style=Unfavorable;
                StyleExpr=TRUE }

    { 1903561801;2;Group  ;
                GroupType=FixedLayout }

    { 1903866901;3;Group  ;
                CaptionML=[ENU=Account Name;
                           ENG=Account Name] }

    { 29  ;4   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the account.;
                           ENG=Specifies the name of the account.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=AccName;
                Editable=FALSE;
                ShowCaption=No }

    { 1902759701;3;Group  ;
                CaptionML=[ENU=Bal. Account Name;
                           ENG=Bal. Account Name] }

    { 31  ;4   ;Field     ;
                CaptionML=[ENU=Bal. Account Name;
                           ENG=Bal. Account Name];
                ToolTipML=[ENU=Specifies the name of the balancing account that has been entered on the journal line.;
                           ENG=Specifies the name of the balancing account that has been entered on the journal line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=BalAccName;
                Editable=FALSE }

    { 1900545401;3;Group  ;
                CaptionML=[ENU=Balance;
                           ENG=Balance] }

    { 25  ;4   ;Field     ;
                Name=Balance;
                CaptionML=[ENU=Balance;
                           ENG=Balance];
                ToolTipML=[ENU=Specifies the balance that has accumulated in the payment journal on the line where the cursor is.;
                           ENG=Specifies the balance that has accumulated in the payment journal on the line where the cursor is.];
                ApplicationArea=#All;
                SourceExpr=Balance + "Balance (LCY)" - xRec."Balance (LCY)";
                AutoFormatType=1;
                Visible=BalanceVisible;
                Editable=FALSE }

    { 1900295801;3;Group  ;
                CaptionML=[ENU=Total Balance;
                           ENG=Total Balance] }

    { 27  ;4   ;Field     ;
                Name=TotalBalance;
                CaptionML=[ENU=Total Balance;
                           ENG=Total Balance];
                ToolTipML=[ENU=Specifies the total balance in the payment journal.;
                           ENG=Specifies the total balance in the payment journal.];
                ApplicationArea=#All;
                SourceExpr=TotalBalance + "Balance (LCY)" - xRec."Balance (LCY)";
                AutoFormatType=1;
                Visible=TotalBalanceVisible;
                Editable=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 30  ;1   ;Part      ;
                Name=IncomingDocAttachFactBox;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page193;
                PartType=Page;
                ShowFilter=No }

    { 7   ;1   ;Part      ;
                CaptionML=[ENU=Payment File Errors;
                           ENG=Payment File Errors];
                ApplicationArea=#Basic,#Suite;
                SubPageLink=Journal Template Name=FIELD(Journal Template Name),
                            Journal Batch Name=FIELD(Journal Batch Name),
                            Journal Line No.=FIELD(Line No.);
                PagePartID=Page1228;
                PartType=Page }

    { 1900919607;1;Part   ;
                ApplicationArea=#Advanced;
                SubPageLink=Dimension Set ID=FIELD(Dimension Set ID);
                PagePartID=Page699;
                Visible=FALSE;
                PartType=Page }

    { 88  ;1   ;Part      ;
                Name=WorkflowStatusBatch;
                CaptionML=[ENU=Batch Workflows;
                           ENG=Batch Workflows];
                ApplicationArea=#Suite;
                PagePartID=Page1528;
                Visible=ShowWorkflowStatusOnBatch;
                Enabled=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 44  ;1   ;Part      ;
                Name=WorkflowStatusLine;
                CaptionML=[ENU=Line Workflows;
                           ENG=Line Workflows];
                ApplicationArea=#Suite;
                PagePartID=Page1528;
                Visible=ShowWorkflowStatusOnLine;
                Enabled=FALSE;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      VoidCheckQst@1000 : TextConst 'ENU=Void Check %1?;ENG=Void Cheque %1?';
      VoidAllPrintedChecksQst@1001 : TextConst 'ENU=Void all printed checks?;ENG=Void all printed cheques?';
      GenJnlLine@1003 : Record 81;
      GenJnlLine2@1004 : Record 81;
      GenJnlManagement@1007 : Codeunit 230;
      ReportPrint@1008 : Codeunit 228;
      DocPrint@1009 : Codeunit 229;
      CheckManagement@1010 : Codeunit 367;
      ChangeExchangeRate@1005 : Page 511;
      GLReconcile@1002 : Page 345;
      CurrentJnlBatchName@1011 : Code[10];
      AccName@1012 : Text[50];
      BalAccName@1013 : Text[50];
      Balance@1014 : Decimal;
      TotalBalance@1015 : Decimal;
      ShowBalance@1016 : Boolean;
      ShowTotalBalance@1017 : Boolean;
      HasPmtFileErr@1006 : Boolean;
      ShortcutDimCode@1018 : ARRAY [8] OF Code[20];
      ApplyEntriesActionEnabled@1031 : Boolean;
      BalanceVisible@19073040 : Boolean INDATASET;
      TotalBalanceVisible@19063333 : Boolean INDATASET;
      StyleTxt@1106 : Text;
      OverdueWarningText@1120 : Text;
      EventFilter@1029 : Text;
      OpenApprovalEntriesExistForCurrUser@1019 : Boolean;
      OpenApprovalEntriesExistForCurrUserBatch@1032 : Boolean;
      OpenApprovalEntriesOnJnlBatchExist@1024 : Boolean;
      OpenApprovalEntriesOnJnlLineExist@1023 : Boolean;
      OpenApprovalEntriesOnBatchOrCurrJnlLineExist@1022 : Boolean;
      OpenApprovalEntriesOnBatchOrAnyJnlLineExist@1021 : Boolean;
      ShowWorkflowStatusOnBatch@1020 : Boolean;
      ShowWorkflowStatusOnLine@1025 : Boolean;
      CanCancelApprovalForJnlBatch@1026 : Boolean;
      CanCancelApprovalForJnlLine@1027 : Boolean;
      EnabledApprovalWorkflowsExist@1028 : Boolean;
      IsAllowPaymentExport@1030 : Boolean;
      IsSaasExcelAddinEnabled@1033 : Boolean;
      RecipientBankAccountMandatory@1034 : Boolean;
      CanRequestFlowApprovalForBatch@1035 : Boolean;
      CanRequestFlowApprovalForBatchAndAllLines@1036 : Boolean;
      CanRequestFlowApprovalForBatchAndCurrentLine@1037 : Boolean;
      CanCancelFlowApprovalForBatch@1038 : Boolean;
      CanCancelFlowApprovalForLine@1039 : Boolean;
      AmountVisible@1040 : Boolean;
      IsSaaS@1042 : Boolean;
      DebitCreditVisible@1041 : Boolean;

    LOCAL PROCEDURE CheckForPmtJnlErrors@5();
    VAR
      BankAccount@1000 : Record 270;
      BankExportImportSetup@1001 : Record 1200;
    BEGIN
      IF HasPmtFileErr THEN
        IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND BankAccount.GET("Bal. Account No.") THEN
          IF BankExportImportSetup.GET(BankAccount."Payment Export Format") THEN
            IF BankExportImportSetup."Check Export Codeunit" > 0 THEN
              CODEUNIT.RUN(BankExportImportSetup."Check Export Codeunit",Rec);
    END;

    LOCAL PROCEDURE UpdateBalance@1();
    BEGIN
      GenJnlManagement.CalcBalance(
        Rec,xRec,Balance,TotalBalance,ShowBalance,ShowTotalBalance);
      BalanceVisible := ShowBalance;
      TotalBalanceVisible := ShowTotalBalance;
    END;

    LOCAL PROCEDURE EnableApplyEntriesAction@2();
    BEGIN
      ApplyEntriesActionEnabled :=
        ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) OR
        ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]);
    END;

    LOCAL PROCEDURE CurrentJnlBatchNameOnAfterVali@19002411();
    BEGIN
      CurrPage.SAVERECORD;
      GenJnlManagement.SetName(CurrentJnlBatchName,Rec);
      SetControlAppearanceFromBatch;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE GetCurrentlySelectedLines@3(VAR GenJournalLine@1000 : Record 81) : Boolean;
    BEGIN
      CurrPage.SETSELECTIONFILTER(GenJournalLine);
      EXIT(GenJournalLine.FINDSET);
    END;

    LOCAL PROCEDURE SetControlAppearanceFromBatch@4();
    VAR
      GenJournalBatch@1000 : Record 232;
      ApprovalsMgmt@1002 : Codeunit 1535;
      WorkflowWebhookManagement@1001 : Codeunit 1543;
      CanRequestFlowApprovalForAllLines@1003 : Boolean;
    BEGIN
      IF ("Journal Template Name" <> '') AND ("Journal Batch Name" <> '') THEN
        GenJournalBatch.GET("Journal Template Name","Journal Batch Name")
      ELSE
        IF NOT GenJournalBatch.GET(GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName) THEN
          EXIT;

      CheckOpenApprovalEntries(GenJournalBatch.RECORDID);

      CanCancelApprovalForJnlBatch := ApprovalsMgmt.CanCancelApprovalForRecord(GenJournalBatch.RECORDID);

      WorkflowWebhookManagement.GetCanRequestAndCanCancelJournalBatch(
        GenJournalBatch,CanRequestFlowApprovalForBatch,CanCancelFlowApprovalForBatch,CanRequestFlowApprovalForAllLines);
      CanRequestFlowApprovalForBatchAndAllLines := CanRequestFlowApprovalForBatch AND CanRequestFlowApprovalForAllLines;
    END;

    LOCAL PROCEDURE CheckOpenApprovalEntries@7(BatchRecordId@1000 : RecordID);
    VAR
      ApprovalsMgmt@1001 : Codeunit 1535;
    BEGIN
      OpenApprovalEntriesExistForCurrUserBatch := ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(BatchRecordId);

      OpenApprovalEntriesOnJnlBatchExist := ApprovalsMgmt.HasOpenApprovalEntries(BatchRecordId);

      OpenApprovalEntriesOnBatchOrAnyJnlLineExist :=
        OpenApprovalEntriesOnJnlBatchExist OR
        ApprovalsMgmt.HasAnyOpenJournalLineApprovalEntries("Journal Template Name","Journal Batch Name");
    END;

    LOCAL PROCEDURE SetControlAppearance@6();
    VAR
      ApprovalsMgmt@1002 : Codeunit 1535;
      WorkflowWebhookManagement@1000 : Codeunit 1543;
      CanRequestFlowApprovalForLine@1001 : Boolean;
    BEGIN
      OpenApprovalEntriesExistForCurrUser :=
        OpenApprovalEntriesExistForCurrUserBatch OR ApprovalsMgmt.HasOpenApprovalEntriesForCurrentUser(RECORDID);

      OpenApprovalEntriesOnJnlLineExist := ApprovalsMgmt.HasOpenApprovalEntries(RECORDID);
      OpenApprovalEntriesOnBatchOrCurrJnlLineExist := OpenApprovalEntriesOnJnlBatchExist OR OpenApprovalEntriesOnJnlLineExist;

      CanCancelApprovalForJnlLine := ApprovalsMgmt.CanCancelApprovalForRecord(RECORDID);

      WorkflowWebhookManagement.GetCanRequestAndCanCancel(RECORDID,CanRequestFlowApprovalForLine,CanCancelFlowApprovalForLine);
      CanRequestFlowApprovalForBatchAndCurrentLine := CanRequestFlowApprovalForBatch AND CanRequestFlowApprovalForLine;
    END;

    LOCAL PROCEDURE SetConrolVisibility@8();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      AmountVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Debit/Credit Only");
      DebitCreditVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Amount Only");
    END;

    BEGIN
    END.
  }
}

OBJECT Page 573 Detailed Cust. Ledg. Entries
{
  OBJECT-PROPERTIES
  {
    Date=01/11/19;
    Time=11:22:13;
    Modified=Yes;
    Version List=NAVW111.00.00.24232;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Detailed Cust. Ledg. Entries;
               ENG=Detailed Cust. Ledg. Entries];
    InsertAllowed=No;
    SourceTable=Table379;
    DataCaptionFields=Cust. Ledger Entry No.,Customer No.;
    PageType=List;
    OnInit=BEGIN
             AmountVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 SetConrolVisibility;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 27      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 28      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Unapply Entries;
                                 ENG=Unapply Entries];
                      ToolTipML=[ENU=Unselect one or more ledger entries that you want to unapply this record.;
                                 ENG=Unselect one or more ledger entries that you want to unapply this record.];
                      ApplicationArea=#Basic,#Suite;
                      Image=UnApply;
                      OnAction=VAR
                                 CustEntryApplyPostedEntries@1000 : Codeunit 226;
                               BEGIN
                                 CustEntryApplyPostedEntries.UnApplyDtldCustLedgEntry(Rec);
                               END;
                                }
      { 26      ;1   ;Action    ;
                      CaptionML=[ENU=&Navigate;
                                 ENG=&Navigate];
                      ToolTipML=[ENU=Find all entries and documents that exist for the document number and posting date on the selected entry or document.;
                                 ENG=Find all entries and documents that exist for the document number and posting date on the selected entry or document.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Image=Navigate;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Navigate.SetDoc("Posting Date","Document No.");
                                 Navigate.RUN;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the posting date of the detailed customer ledger entry.;
                           ENG=Specifies the posting date of the detailed customer ledger entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Posting Date" }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the entry type of the detailed customer ledger entry.;
                           ENG=Specifies the entry type of the detailed customer ledger entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry Type" }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the document type of the detailed customer ledger entry.;
                           ENG=Specifies the document type of the detailed customer ledger entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document Type" }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the document number of the transaction that created the entry.;
                           ENG=Specifies the document number of the transaction that created the entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Document No." }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer account number to which the entry is posted.;
                           ENG=Specifies the customer account number to which the entry is posted.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Customer No." }

    { 42  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the Global Dimension 1 code of the initial customer ledger entry.;
                           ENG=Specifies the Global Dimension 1 code of the initial customer ledger entry.];
                ApplicationArea=#Dimensions;
                SourceExpr="Initial Entry Global Dim. 1";
                Visible=FALSE }

    { 44  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the Global Dimension 2 code of the initial customer ledger entry.;
                           ENG=Specifies the Global Dimension 2 code of the initial customer ledger entry.];
                ApplicationArea=#Dimensions;
                SourceExpr="Initial Entry Global Dim. 2";
                Visible=FALSE }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the currency if the amount is in a foreign currency.;
                           ENG=Specifies the code for the currency if the amount is in a foreign currency.];
                ApplicationArea=#Suite;
                SourceExpr="Currency Code" }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the detailed customer ledger entry.;
                           ENG=Specifies the amount of the detailed customer ledger entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Visible=AmountVisible }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the entry in LCY.;
                           ENG=Specifies the amount of the entry in LCY.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Amount (LCY)";
                Visible=AmountVisible }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits.;
                           ENG=Specifies the total of the ledger entries that represent debits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount";
                Visible=DebitCreditVisible }

    { 7   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent debits, expressed in LCY.;
                           ENG=Specifies the total of the ledger entries that represent debits, expressed in LCY.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Debit Amount (LCY)";
                Visible=DebitCreditVisible }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits.;
                           ENG=Specifies the total of the ledger entries that represent credits.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount";
                Visible=DebitCreditVisible }

    { 9   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the ledger entries that represent credits, expressed in LCY.;
                           ENG=Specifies the total of the ledger entries that represent credits, expressed in LCY.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Credit Amount (LCY)";
                Visible=DebitCreditVisible }

    { 40  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date on which the initial entry is due for payment.;
                           ENG=Specifies the date on which the initial entry is due for payment.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Initial Entry Due Date" }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.;
                           ENG=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.];
                ApplicationArea=#Advanced;
                SourceExpr="User ID";
                Visible=FALSE }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the source code that specifies where the entry was created.;
                           ENG=Specifies the source code that specifies where the entry was created.];
                ApplicationArea=#Advanced;
                SourceExpr="Source Code";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the reason code, a supplementary source code that enables you to trace the entry.;
                           ENG=Specifies the reason code, a supplementary source code that enables you to trace the entry.];
                ApplicationArea=#Advanced;
                SourceExpr="Reason Code";
                Visible=FALSE }

    { 29  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the entry has been unapplied (undone) from the Unapply Customer Entries window by the entry no. shown in the Unapplied by Entry No. field.;
                           ENG=Specifies whether the entry has been unapplied (undone) from the Unapply Customer Entries window by the entry no. shown in the Unapplied by Entry No. field.];
                ApplicationArea=#Advanced;
                SourceExpr=Unapplied;
                Visible=FALSE }

    { 33  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the correcting entry, if the original entry has been unapplied (undone) from the Unapply Customer Entries window.;
                           ENG=Specifies the number of the correcting entry, if the original entry has been unapplied (undone) from the Unapply Customer Entries window.];
                ApplicationArea=#Advanced;
                SourceExpr="Unapplied by Entry No.";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the entry number of the customer ledger entry that the detailed customer ledger entry line was created for.;
                           ENG=Specifies the entry number of the customer ledger entry that the detailed customer ledger entry line was created for.];
                ApplicationArea=#Advanced;
                SourceExpr="Cust. Ledger Entry No.";
                Visible=FALSE }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the entry, as assigned from the specified number series when the entry was created.;
                           ENG=Specifies the number of the entry, as assigned from the specified number series when the entry was created.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No." }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Navigate@1000 : Page 344;
      AmountVisible@1002 : Boolean;
      DebitCreditVisible@1001 : Boolean;

    LOCAL PROCEDURE SetConrolVisibility@8();
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      AmountVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Debit/Credit Only");
      DebitCreditVisible := NOT (GLSetup."Show Amounts" = GLSetup."Show Amounts"::"Amount Only");
    END;

    BEGIN
    END.
  }
}

OBJECT Page 50000 Customer Invoice API
{
  OBJECT-PROPERTIES
  {
    Date=20/09/19;
    Time=09:23:52;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    SourceTable=Table112;
    PageType=API;
    EntitySetName=items;
    EntityName=item;
    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                SourceExpr="Sell-to Customer No." }

    { 1000000003;2;Field  ;
                SourceExpr="No." }

    { 1000000004;2;Field  ;
                SourceExpr="Bill-to Customer No." }

    { 1000000005;2;Field  ;
                SourceExpr="Bill-to Name" }

    { 1000000006;2;Field  ;
                SourceExpr="Bill-to Name 2" }

    { 1000000007;2;Field  ;
                SourceExpr="Bill-to Address" }

    { 1000000008;2;Field  ;
                SourceExpr="Bill-to Address 2" }

    { 1000000009;2;Field  ;
                SourceExpr="Bill-to City" }

    { 1000000010;2;Field  ;
                SourceExpr="Bill-to Contact" }

    { 1000000011;2;Field  ;
                SourceExpr="Your Reference" }

    { 1000000012;2;Field  ;
                SourceExpr="Ship-to Code" }

    { 1000000013;2;Field  ;
                SourceExpr="Ship-to Name" }

    { 1000000014;2;Field  ;
                SourceExpr="Ship-to Name 2" }

    { 1000000015;2;Field  ;
                SourceExpr="Ship-to Address" }

    { 1000000016;2;Field  ;
                SourceExpr="Ship-to Address 2" }

    { 1000000017;2;Field  ;
                SourceExpr="Ship-to City" }

    { 1000000018;2;Field  ;
                SourceExpr="Ship-to Contact" }

    { 1000000019;2;Field  ;
                SourceExpr="Order Date" }

    { 1000000020;2;Field  ;
                SourceExpr="Posting Date" }

    { 1000000021;2;Field  ;
                SourceExpr="Shipment Date" }

    { 1000000022;2;Field  ;
                SourceExpr="Posting Description" }

    { 1000000023;2;Field  ;
                SourceExpr="Payment Terms Code" }

    { 1000000024;2;Field  ;
                SourceExpr="Due Date" }

    { 1000000025;2;Field  ;
                SourceExpr="Payment Discount %" }

    { 1000000026;2;Field  ;
                SourceExpr="Pmt. Discount Date" }

    { 1000000027;2;Field  ;
                SourceExpr="Shipment Method Code" }

    { 1000000028;2;Field  ;
                SourceExpr="Location Code" }

    { 1000000029;2;Field  ;
                SourceExpr="Shortcut Dimension 1 Code" }

    { 1000000030;2;Field  ;
                SourceExpr="Shortcut Dimension 2 Code" }

    { 1000000031;2;Field  ;
                SourceExpr="Customer Posting Group" }

    { 1000000032;2;Field  ;
                SourceExpr="Currency Code" }

    { 1000000033;2;Field  ;
                SourceExpr="Currency Factor" }

    { 1000000034;2;Field  ;
                SourceExpr="Customer Price Group" }

    { 1000000035;2;Field  ;
                SourceExpr="Prices Including VAT" }

    { 1000000036;2;Field  ;
                SourceExpr="Invoice Disc. Code" }

    { 1000000037;2;Field  ;
                SourceExpr="Customer Disc. Group" }

    { 1000000038;2;Field  ;
                SourceExpr="Language Code" }

    { 1000000039;2;Field  ;
                SourceExpr="Salesperson Code" }

    { 1000000040;2;Field  ;
                SourceExpr="Order No." }

    { 1000000041;2;Field  ;
                SourceExpr=Comment }

    { 1000000042;2;Field  ;
                SourceExpr="No. Printed" }

    { 1000000043;2;Field  ;
                SourceExpr="On Hold" }

    { 1000000044;2;Field  ;
                SourceExpr="Applies-to Doc. Type" }

    { 1000000045;2;Field  ;
                SourceExpr="Applies-to Doc. No." }

    { 1000000046;2;Field  ;
                SourceExpr="Bal. Account No." }

    { 1000000047;2;Field  ;
                SourceExpr=Amount }

    { 1000000048;2;Field  ;
                SourceExpr="Amount Including VAT" }

    { 1000000049;2;Field  ;
                SourceExpr="VAT Registration No." }

    { 1000000050;2;Field  ;
                SourceExpr="Reason Code" }

    { 1000000051;2;Field  ;
                SourceExpr="Gen. Bus. Posting Group" }

    { 1000000052;2;Field  ;
                SourceExpr="EU 3-Party Trade" }

    { 1000000053;2;Field  ;
                SourceExpr="Transaction Type" }

    { 1000000054;2;Field  ;
                SourceExpr="Transport Method" }

    { 1000000055;2;Field  ;
                SourceExpr="VAT Country/Region Code" }

    { 1000000056;2;Field  ;
                SourceExpr="Sell-to Customer Name" }

    { 1000000057;2;Field  ;
                SourceExpr="Sell-to Customer Name 2" }

    { 1000000058;2;Field  ;
                SourceExpr="Sell-to Address" }

    { 1000000059;2;Field  ;
                SourceExpr="Sell-to Address 2" }

    { 1000000060;2;Field  ;
                SourceExpr="Sell-to City" }

    { 1000000061;2;Field  ;
                SourceExpr="Sell-to Contact" }

    { 1000000062;2;Field  ;
                SourceExpr="Bill-to Post Code" }

    { 1000000063;2;Field  ;
                SourceExpr="Bill-to County" }

    { 1000000064;2;Field  ;
                SourceExpr="Bill-to Country/Region Code" }

    { 1000000065;2;Field  ;
                SourceExpr="Sell-to Post Code" }

    { 1000000066;2;Field  ;
                SourceExpr="Sell-to County" }

    { 1000000067;2;Field  ;
                SourceExpr="Sell-to Country/Region Code" }

    { 1000000068;2;Field  ;
                SourceExpr="Ship-to Post Code" }

    { 1000000069;2;Field  ;
                SourceExpr="Ship-to County" }

    { 1000000070;2;Field  ;
                SourceExpr="Ship-to Country/Region Code" }

    { 1000000071;2;Field  ;
                SourceExpr="Bal. Account Type" }

    { 1000000072;2;Field  ;
                SourceExpr="Exit Point" }

    { 1000000073;2;Field  ;
                SourceExpr=Correction }

    { 1000000074;2;Field  ;
                SourceExpr="Document Date" }

    { 1000000075;2;Field  ;
                SourceExpr="External Document No." }

    { 1000000076;2;Field  ;
                SourceExpr=Area }

    { 1000000077;2;Field  ;
                SourceExpr="Transaction Specification" }

    { 1000000078;2;Field  ;
                SourceExpr="Payment Method Code" }

    { 1000000079;2;Field  ;
                SourceExpr="Shipping Agent Code" }

    { 1000000080;2;Field  ;
                SourceExpr="Package Tracking No." }

    { 1000000081;2;Field  ;
                SourceExpr="Pre-Assigned No. Series" }

    { 1000000082;2;Field  ;
                SourceExpr="No. Series" }

    { 1000000083;2;Field  ;
                SourceExpr="Order No. Series" }

    { 1000000084;2;Field  ;
                SourceExpr="Pre-Assigned No." }

    { 1000000085;2;Field  ;
                SourceExpr="User ID" }

    { 1000000086;2;Field  ;
                SourceExpr="Source Code" }

    { 1000000087;2;Field  ;
                SourceExpr="Tax Area Code" }

    { 1000000088;2;Field  ;
                SourceExpr="Tax Liable" }

    { 1000000089;2;Field  ;
                SourceExpr="VAT Bus. Posting Group" }

    { 1000000090;2;Field  ;
                SourceExpr="VAT Base Discount %" }

    { 1000000091;2;Field  ;
                SourceExpr="Invoice Discount Calculation" }

    { 1000000092;2;Field  ;
                SourceExpr="Invoice Discount Value" }

    { 1000000093;2;Field  ;
                SourceExpr="Prepayment No. Series" }

    { 1000000094;2;Field  ;
                SourceExpr="Prepayment Invoice" }

    { 1000000095;2;Field  ;
                SourceExpr="Prepayment Order No." }

    { 1000000096;2;Field  ;
                SourceExpr="Quote No." }

    { 1000000097;2;Field  ;
                SourceExpr="Last Email Sent Time" }

    { 1000000098;2;Field  ;
                SourceExpr="Last Email Sent Status" }

    { 1000000099;2;Field  ;
                SourceExpr="Sent as Email" }

    { 1000000100;2;Field  ;
                SourceExpr="Last Email Notif Cleared" }

    { 1000000101;2;Field  ;
                SourceExpr="Work Description" }

    { 1000000102;2;Field  ;
                SourceExpr="Dimension Set ID" }

    { 1000000103;2;Field  ;
                SourceExpr="Payment Service Set ID" }

    { 1000000104;2;Field  ;
                SourceExpr="Document Exchange Identifier" }

    { 1000000105;2;Field  ;
                SourceExpr="Document Exchange Status" }

    { 1000000106;2;Field  ;
                SourceExpr="Doc. Exch. Original Identifier" }

    { 1000000107;2;Field  ;
                SourceExpr="Coupled to CRM" }

    { 1000000108;2;Field  ;
                SourceExpr="Direct Debit Mandate ID" }

    { 1000000109;2;Field  ;
                SourceExpr=Closed }

    { 1000000110;2;Field  ;
                SourceExpr="Remaining Amount" }

    { 1000000111;2;Field  ;
                SourceExpr="Cust. Ledger Entry No." }

    { 1000000112;2;Field  ;
                SourceExpr="Invoice Discount Amount" }

    { 1000000113;2;Field  ;
                SourceExpr=Cancelled }

    { 1000000114;2;Field  ;
                SourceExpr=Corrective }

    { 1000000115;2;Field  ;
                SourceExpr="Campaign No." }

    { 1000000116;2;Field  ;
                SourceExpr="Sell-to Contact No." }

    { 1000000117;2;Field  ;
                SourceExpr="Bill-to Contact No." }

    { 1000000118;2;Field  ;
                SourceExpr="Opportunity No." }

    { 1000000119;2;Field  ;
                SourceExpr="Responsibility Center" }

    { 1000000120;2;Field  ;
                SourceExpr="Allow Line Disc." }

    { 1000000121;2;Field  ;
                SourceExpr="Get Shipment Used" }

    { 1000000122;2;Field  ;
                SourceExpr=Id }

    { 1000000123;2;Field  ;
                SourceExpr="Type of Supply Code" }

  }
  CODE
  {

    BEGIN
    END.
  }
}

